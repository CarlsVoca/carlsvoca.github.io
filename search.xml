<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Namomo Winter Camp 2021 Final Contest</title>
    <url>/2021/02/01/Namomo-Winter-Camp-2021-Final-Contest/</url>
    <content><![CDATA[<p><a href="contest%2020355%20en.pdf">题面</a></p>
<a id="more"></a>
<h2 id="a.-wusu">A. Wusu</h2>
<h4 id="题意">题意</h4>
<p>对一个长度不超过100000的字符串，求最长符合要求的子串的长度，要求：绕中心旋转180°后与原串相等。</p>
<h4 id="题解">题解</h4>
<p>Manacher改一改。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Manacher&#123;</span><br><span class="line">    <span class="keyword">char</span> tmp[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> p[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">bool</span> vis[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==b&amp;&amp;(a==<span class="string">'%'</span>||a==<span class="string">'o'</span>||a==<span class="string">'s'</span>||a==<span class="string">'x'</span>||a==<span class="string">'z'</span>))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">'b'</span>&amp;&amp;b==<span class="string">'q'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="string">'b'</span>&amp;&amp;a==<span class="string">'q'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">'d'</span>&amp;&amp;b==<span class="string">'p'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="string">'d'</span>&amp;&amp;a==<span class="string">'p'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">'w'</span>&amp;&amp;b==<span class="string">'m'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="string">'w'</span>&amp;&amp;a==<span class="string">'m'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">'n'</span>&amp;&amp;b==<span class="string">'u'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="string">'n'</span>&amp;&amp;a==<span class="string">'u'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)tmp[i*<span class="number">2</span><span class="number">-1</span>]=<span class="string">'%'</span>,tmp[i*<span class="number">2</span>]=s[i];</span><br><span class="line">        tmp[len=len*<span class="number">2</span>+<span class="number">1</span>]=<span class="string">'%'</span>;</span><br><span class="line">        <span class="keyword">int</span> pos=<span class="number">0</span>,R=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> MAX=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!judge(tmp[i],tmp[i]))&#123;p[i]=<span class="number">0</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;R)p[i]=min(p[pos*<span class="number">2</span>-i],R-i);<span class="keyword">else</span> p[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(i-p[i]&gt;=<span class="number">1</span>&amp;&amp;i+p[i]&lt;=len&amp;&amp;judge(tmp[i-p[i]],tmp[i+p[i]]))p[i]++;</span><br><span class="line">            <span class="keyword">if</span>(i+p[i]&gt;R)pos=i,R=i+p[i];</span><br><span class="line">            MAX=max(MAX,p[i]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> MAX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Manacher;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("data.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("tmp.out","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,do_main(s));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-play-with-intervals">D. Play with Intervals</h2>
<h4 id="题意-1">题意</h4>
<p>给出m个端点范围在[1,n]之间的线段<span class="math inline">\((n,m\leq5000)\)</span>，求一个最大子集，使集合中任两个线段或有包含关系，或没有没有共同部分。</p>
<h4 id="题解-1">题解</h4>
<p><span class="math inline">\(dp[i]\)</span>表示只考虑当前solve范围内的线段，所选线段的最大<span class="math inline">\(r\leq i\)</span>的最大答案</p>
<ul>
<li><p>不存在线段的<span class="math inline">\(r=i\)</span>：<span class="math inline">\(dp[i]=dp[i-1]\)</span></p></li>
<li><p>存在线段的<span class="math inline">\(r=i\)</span>：<span class="math inline">\(dp[i]=max(dp[i-1],dp[line.l-1]+solve(line.l,line.r)+cnt[line](\)</span>line为solve范围内所有r=i的线段<span class="math inline">\())\)</span></p>
<p>其中cnt[line]为与line相同的线段个数</p></li>
</ul>
<p>对于算出来的某个区间的结果，记录下来，之后再次访问的时候可避免重复计算。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,id;</span><br><span class="line">     <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Data&amp; d)<span class="keyword">const</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> r==d.r?l&gt;d.l:r&lt;d.r;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;Data&gt; v[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(d[x].l==d[y].l&amp;&amp;d[x].r==d[y].r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(d[x].l&lt;=d[y].l&amp;&amp;d[x].r&gt;=d[y].r)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dp[maxn];</span><br><span class="line">    <span class="comment">// vector&lt;int&gt; dp;</span></span><br><span class="line">    <span class="comment">// dp.clear();</span></span><br><span class="line">    <span class="keyword">if</span>(f[x]!=<span class="number">-1</span>)<span class="keyword">return</span> f[x];</span><br><span class="line">    sort(v[x].begin(),v[x].end());</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// dp.push_back(0);</span></span><br><span class="line">    dp[d[x].l<span class="number">-1</span>-(d[x].l<span class="number">-1</span>)]=<span class="number">0</span>;</span><br><span class="line">    rep(i,d[x].l,d[x].r)&#123;    </span><br><span class="line">        <span class="comment">// dp.push_back(0);</span></span><br><span class="line">        dp[i-(d[x].l<span class="number">-1</span>)]=dp[i<span class="number">-1</span>-(d[x].l<span class="number">-1</span>)];</span><br><span class="line">        <span class="keyword">if</span>(pos&gt;=v[x].size())<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(v[x][pos].r==i)&#123;</span><br><span class="line">            <span class="keyword">int</span> bgn=pos;</span><br><span class="line">            <span class="keyword">while</span>(pos&lt;v[x].size()&amp;&amp;v[x][pos].r==i)&#123;</span><br><span class="line">                <span class="comment">// printf("debug:%d %d %d\n",v[x][pos].l,v[x][pos].r,cnt[mp(v[x][pos].l,v[x][pos].r)]);</span></span><br><span class="line">                dp[i-(d[x].l<span class="number">-1</span>)]=max(dp[i-(d[x].l<span class="number">-1</span>)],dp[v[x][pos].l<span class="number">-1</span>-(d[x].l<span class="number">-1</span>)]+solve(v[x][pos].id)+cnt[v[x][pos].id]);</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf("debug:x=%d f=%d\n",x,dp[d[x].r]);</span></span><br><span class="line">    <span class="keyword">return</span> f[x]=dp[d[x].r-(d[x].l<span class="number">-1</span>)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        rep(i,<span class="number">1</span>,m+<span class="number">1</span>)&#123;</span><br><span class="line">            f[i]=<span class="number">-1</span>;</span><br><span class="line">            v[i].clear();</span><br><span class="line">            cnt[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;d[i].l,&amp;d[i].r);</span><br><span class="line">            d[i].id=i;</span><br><span class="line">        &#125;</span><br><span class="line">        d[m+<span class="number">1</span>].l=<span class="number">1</span>;d[m+<span class="number">1</span>].r=n+<span class="number">1</span>;d[m+<span class="number">1</span>].id=m+<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,m+<span class="number">1</span>)rep(j,<span class="number">1</span>,m+<span class="number">1</span>)<span class="keyword">if</span>(i!=j&amp;&amp;judge(i,j))v[i].push_back(d[j]);</span><br><span class="line">        rep(i,<span class="number">1</span>,m)rep(j,<span class="number">1</span>,m)<span class="keyword">if</span>(d[i].l==d[j].l&amp;&amp;d[i].r==d[j].r)cnt[i]++;</span><br><span class="line">        <span class="comment">// rep(i,1,m+1)&#123;</span></span><br><span class="line">        <span class="comment">//     printf("debug:");</span></span><br><span class="line">        <span class="comment">//     rep(j,0,(int)v[i].size()-1)printf("%d ",v[i][j].id);</span></span><br><span class="line">        <span class="comment">//     putchar('\n');</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,solve(m+<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="f.-cut-the-string">F. Cut the String</h2>
<h4 id="题意-2">题意</h4>
<p>给你一个长度不超过200000的数字串，对其进行划分，对于某一种划分的贡献为其所有块的数字乘积：如<span class="math inline">\(12|3|45\)</span>的贡献为<span class="math inline">\(12*3*45\)</span>。求所有划分方法的贡献和。</p>
<h4 id="题解-2">题解</h4>
<p>考虑某一位在最终答案中的贡献，推推式子。<span class="math inline">\(O(n)\)</span></p>
<p>dls：“分治fft。”</p>
<p><img src="/2021/02/01/Namomo-Winter-Camp-2021-Final-Contest/dls%20F.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line">LL dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;d[i]);</span><br><span class="line">    dp[n+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    LL sum=<span class="number">1</span>;</span><br><span class="line">    per(i,n,<span class="number">1</span>)&#123;</span><br><span class="line">        dp[i]=(i!=n?dp[i+<span class="number">1</span>]:<span class="number">0</span>)+sum*d[i];</span><br><span class="line">        dp[i]%=MOD;</span><br><span class="line">        sum*=<span class="number">10</span>;</span><br><span class="line">        sum+=dp[i];</span><br><span class="line">        sum%=MOD;</span><br><span class="line">        <span class="comment">// printf("Debug:%d %lld\n",i,dp[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>namomo winter camp 2021</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 103 (Rated for Div. 2)</title>
    <url>/2021/02/01/Educational-Codeforces-Round-103-Rated-for-Div-2/</url>
    <content><![CDATA[<h2 id="a.-k-divisible-sum">A. K-divisible Sum</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="keyword">if</span>(k&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%k==<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,k%n==<span class="number">0</span>?k/n:k/n+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-inflation">B. Inflation</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;p[i]);</span><br><span class="line">        LL ans=<span class="number">0</span>,pri=p[<span class="number">0</span>];</span><br><span class="line">        rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i]/pri*<span class="number">100</span>&gt;k)&#123;</span><br><span class="line">                LL tmp=pri;</span><br><span class="line">                pri=<span class="built_in">ceil</span>(<span class="number">100</span>*p[i]/k);</span><br><span class="line">                ans+=pri-tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            pri+=p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-longest-simple-cycle">C. Longest Simple Cycle</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c[i]);</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        rep(i,<span class="number">1</span>,n<span class="number">-1</span>)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        rep(i,<span class="number">1</span>,n<span class="number">-1</span>)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">        a[n]=b[n]=<span class="number">1</span>;</span><br><span class="line">        LL ans=<span class="number">0</span>,res=<span class="number">0</span>,pre=max(a[<span class="number">1</span>],b[<span class="number">1</span>])-min(a[<span class="number">1</span>],b[<span class="number">1</span>])+<span class="number">2</span>;</span><br><span class="line">        rep(i,<span class="number">2</span>,n)&#123;</span><br><span class="line">            ans=max(ans,c[i]<span class="number">-1</span>+pre);</span><br><span class="line">            <span class="keyword">if</span>(a[i]==b[i])pre=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> pre=max(max(a[i],b[i])-min(a[i],b[i])+<span class="number">2l</span>l,pre+min(a[i],b[i])<span class="number">-1</span>+c[i]-max(a[i],b[i])+<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        rep(i,1,n)&#123;</span></span><br><span class="line"><span class="comment">            if(i==1)&#123;</span></span><br><span class="line"><span class="comment">                res=max(a[i],b[i])-min(a[i],b[i]);</span></span><br><span class="line"><span class="comment">                res+=2;</span></span><br><span class="line"><span class="comment">                continue;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            // printf("debug:%lld\n",res);</span></span><br><span class="line"><span class="comment">            if(a[i]==b[i])&#123;</span></span><br><span class="line"><span class="comment">                ans=max(ans,res+c[i]-1);</span></span><br><span class="line"><span class="comment">                res=0;</span></span><br><span class="line"><span class="comment">                res+=2;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else&#123;</span></span><br><span class="line"><span class="comment">                ans=max(ans,res+c[i]-1);</span></span><br><span class="line"><span class="comment">                res+=min(a[i],b[i])-1+c[i]-max(a[i],b[i]);</span></span><br><span class="line"><span class="comment">                res+=2;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            // printf("debug:%d %lld\n",i,res);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-journey">D. Journey</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        vis[<span class="number">0</span>]=vis[n]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i<span class="number">-1</span>]!=s[i])vis[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> vis[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)sum[i]=sum[i<span class="number">-1</span>]+(<span class="keyword">int</span>)vis[i];</span><br><span class="line">        rep(i,<span class="number">0</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'L'</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"1 "</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> l=i+<span class="number">1</span>,r=n;</span><br><span class="line">                    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span>(sum[mid]-sum[i]==mid-i)l=mid+<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> r=mid;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,l-i+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==n)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[n<span class="number">-1</span>]==<span class="string">'R'</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"1 "</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> l=<span class="number">0</span>,r=i<span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                        <span class="keyword">int</span> mid=(l+r&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span>(sum[i<span class="number">-1</span>]-(mid==<span class="number">0</span>?<span class="number">0</span>:sum[mid<span class="number">-1</span>])==i<span class="number">-1</span>-mid+<span class="number">1</span>)r=mid<span class="number">-1</span>;</span><br><span class="line">                        <span class="keyword">else</span> l=mid;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d "</span>,i-l+<span class="number">1</span>);    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(s[i<span class="number">-1</span>]==<span class="string">'L'</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> l=<span class="number">0</span>,r=i<span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                        <span class="keyword">int</span> mid=(l+r&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span>(sum[i<span class="number">-1</span>]-(mid==<span class="number">0</span>?<span class="number">0</span>:sum[mid<span class="number">-1</span>])==i<span class="number">-1</span>-mid+<span class="number">1</span>)r=mid<span class="number">-1</span>;</span><br><span class="line">                        <span class="keyword">else</span> l=mid;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// printf("debug:i=%d l=%d\n",i,l);</span></span><br><span class="line">                    res+=i-l;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(s[i]==<span class="string">'R'</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> l=i+<span class="number">1</span>,r=n;</span><br><span class="line">                    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span>(sum[mid]-sum[i]==mid-i)l=mid+<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> r=mid;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// printf("debug:i=%d r=%d\n",i,l);</span></span><br><span class="line">                    res+=l-i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,res+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.-pattern-matching">E. Pattern Matching</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn*<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nume=<span class="number">0</span>,last[maxn];</span><br><span class="line"><span class="keyword">int</span> de[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    de[v]++;</span><br><span class="line">    e[++nume]=(Edge)&#123;u,v,last[u]&#125;;</span><br><span class="line">    last[u]=nume;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="built_in">string</span> ss[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Topo_Sort&#123;</span><br><span class="line">    <span class="keyword">int</span> topo[maxn],num=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!de[i])q.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">            topo[++num]=u;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">                <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">                <span class="keyword">if</span>(--de[v]==<span class="number">0</span>)q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num!=n)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Topo_Sort;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id,ch[<span class="number">35</span>];</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> sz=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> s,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">0</span>,k<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t[u].ch[s[i]-<span class="string">'_'</span>])u=t[u].ch[s[i]-<span class="string">'_'</span>];</span><br><span class="line">        <span class="keyword">else</span> u=t[u].ch[s[i]-<span class="string">'_'</span>]=++sz;</span><br><span class="line">    &#125;</span><br><span class="line">    t[u].id=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="built_in">string</span> s,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="string">""</span>)&#123;</span><br><span class="line">        <span class="comment">// printf("debug:%d %d\n",x,t[u].id);</span></span><br><span class="line">        <span class="keyword">if</span>(x!=t[u].id)add_edge(x,t[u].id);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t[u].ch[s[<span class="number">0</span>]-<span class="string">'_'</span>])query(t[u].ch[s[<span class="number">0</span>]-<span class="string">'_'</span>],s.substr(<span class="number">1</span>),x);</span><br><span class="line">    <span class="keyword">if</span>(t[u].ch[<span class="number">0</span>])query(t[u].ch[<span class="number">0</span>],s.substr(<span class="number">1</span>),x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="built_in">string</span> a,<span class="built_in">string</span> b)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">0</span>,k<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==b[i]||a[i]==<span class="string">'_'</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;ss[i];</span><br><span class="line">        insert(ss[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(!match(ss[x],s))&#123;flag=<span class="number">0</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line">        query(<span class="number">1</span>,s,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(do_main()||!flag)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        rep(i,<span class="number">1</span>,num)<span class="built_in">printf</span>(<span class="string">"%d "</span>,topo[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #698 (Div. 2)</title>
    <url>/2021/02/01/Codeforces-Round-698-Div-2/</url>
    <content><![CDATA[<h2 id="a.-nezzar-and-colorful-balls">A. Nezzar and Colorful Balls</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">1</span>,ans=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">2</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]==a[i<span class="number">-1</span>])cnt++;</span><br><span class="line">            <span class="keyword">else</span> ans=max(cnt,ans),cnt=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=max(cnt,ans);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-nezzar-and-lucky-number">B. Nezzar and Lucky Number</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%<span class="number">10</span>==d)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> q,d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;q,&amp;d);</span><br><span class="line">        rep(i,<span class="number">1</span>,q)&#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            <span class="keyword">if</span>(d==<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> cnt=x/d;</span><br><span class="line">                <span class="keyword">if</span>(x%d==<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> y=x%d;</span><br><span class="line">                    <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">1000</span>&amp;&amp;y+d*j&lt;=x;j++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(judge(y+j*d,d))&#123;flag=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-nezzar-and-symmetric-array">C. Nezzar and Symmetric Array</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">LL d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">2</span>*n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;d[i]);</span><br><span class="line">        sort(d+<span class="number">1</span>,d+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        LL res=<span class="number">0</span>,pre=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(d[<span class="number">1</span>]!=d[<span class="number">2</span>])flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">2</span>*n;i+=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">// printf("debug:%d %d\n",d[i]-d[i-2],i-1);</span></span><br><span class="line">            <span class="keyword">if</span>(d[i]!=d[i+<span class="number">1</span>]||d[i]==d[i<span class="number">-2</span>])&#123;flag=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span>((d[i]-d[i<span class="number">-2</span>])%(i<span class="number">-1</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">// printf("Debug:%lld\n",(d[i]-d[i-2])/(i-1));</span></span><br><span class="line">                pre+=((d[i]-d[i<span class="number">-2</span>])/(i<span class="number">-1</span>));</span><br><span class="line">                res+=pre;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;flag=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf("debug:%lld %lld %d\n",d[1],res,2*n);</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>&amp;&amp;d[<span class="number">1</span>]%<span class="number">2</span>!=<span class="number">0</span>)flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;<span class="number">1</span>&amp;&amp;(d[<span class="number">1</span>]&lt;=<span class="number">2</span>*res||(d[<span class="number">1</span>]<span class="number">-2</span>*res)%(<span class="number">2</span>*n)!=<span class="number">0</span>))flag=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// double x=(d[1]-2*res)/(2.0*n);</span></span><br><span class="line">        <span class="comment">// printf("x=%lf\n",x);</span></span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-nezzar-and-board">D. Nezzar and Board</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Gcd&#123;</span><br><span class="line">    <span class="function">LL <span class="title">gcd</span><span class="params">(LL x,LL y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y?gcd(y,x%y):x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Gcd;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        LL k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;n,&amp;k);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">        LL G=a[<span class="number">2</span>]-a[<span class="number">1</span>];</span><br><span class="line">        rep(i,<span class="number">3</span>,n)G=gcd(G,a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="keyword">if</span>((k-a[<span class="number">1</span>])%G==<span class="number">0</span>)&#123;flag=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #697 (Div. 3)</title>
    <url>/2021/01/26/Codeforces-Round-697-Div-3/</url>
    <content><![CDATA[<h2 id="a.-odd-divisor">A. Odd Divisor</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        LL n;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        LL k=log2(n);</span><br><span class="line">        <span class="keyword">if</span>(n==(<span class="number">1L</span>L&lt;&lt;k))<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-new-years-number">B. New Year's Number</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">int</span> k=n/<span class="number">2020</span>;</span><br><span class="line">        <span class="keyword">if</span>(n-k*<span class="number">2020</span>&lt;=k)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-ball-in-berland">C. Ball in Berland</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],cnt1[maxn],cnt2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> A,B,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;A,&amp;B,&amp;k);</span><br><span class="line">        rep(i,<span class="number">1</span>,A)cnt1[i]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,B)cnt2[i]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,k)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]),cnt1[a[i]]++;</span><br><span class="line">        rep(i,<span class="number">1</span>,k)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]),cnt2[b[i]]++;</span><br><span class="line">        LL ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,k)&#123;</span><br><span class="line">            ans+=k-cnt1[a[i]]-cnt2[b[i]]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans/<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-cleaning-the-phone">D. Cleaning the Phone</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Data &amp;d)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;d.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Data&gt; v1,v2;</span><br><span class="line"></span><br><span class="line">LL sum1[maxn],sum2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        v1.clear();</span><br><span class="line">        v2.clear();</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d[i].a);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d[i].b);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(d[i].b==<span class="number">1</span>)v1.push_back(d[i]);</span><br><span class="line">            <span class="keyword">else</span> v2.push_back(d[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(v1.begin(),v1.end());</span><br><span class="line">        sort(v2.begin(),v2.end());</span><br><span class="line">        <span class="keyword">int</span> s1=v1.size(),s2=v2.size();</span><br><span class="line">        sum1[<span class="number">0</span>]=sum2[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,s1<span class="number">-1</span>)&#123;</span><br><span class="line">            sum1[i+<span class="number">1</span>]=sum1[i]+v1[i].a;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">0</span>,s2<span class="number">-1</span>)&#123;</span><br><span class="line">            sum2[i+<span class="number">1</span>]=sum2[i]+v2[i].a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=INF;</span><br><span class="line">        rep(i,<span class="number">0</span>,s1)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum1[i]+sum2[s2]&lt;m)<span class="keyword">continue</span>;</span><br><span class="line">            ans=min(ans,i*<span class="number">1</span>+<span class="number">2</span>*(<span class="keyword">int</span>)(lower_bound(sum2,sum2+s2+<span class="number">1</span>,m-sum1[i])-sum2));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans==INF)<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.-advertising-agency">E. Advertising Agency</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line">LL C[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a&gt;b;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">0</span>||j==i) C[i][j]=<span class="number">1</span>%p;</span><br><span class="line">            <span class="keyword">else</span> C[i][j]=(C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j])%p;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf("%lld\n",C[1][1]);</span></span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="comment">// puts("Carls");</span></span><br><span class="line">        <span class="keyword">int</span> n,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">-1</span>,r=<span class="number">-1</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]==a[k]&amp;&amp;l==<span class="number">-1</span>)l=i;</span><br><span class="line">            <span class="keyword">if</span>(a[i]==a[k]&amp;&amp;(i==n||a[i+<span class="number">1</span>]!=a[k]))r=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,C[r-l+<span class="number">1</span>][k-l+<span class="number">1</span>]%p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="f.-unusual-matrix">F. Unusual Matrix</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn],b[maxn][maxn],tmp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)rep(j,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;a[i][j]);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)rep(j,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;b[i][j]);</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            rep(j,<span class="number">1</span>,n)&#123;</span><br><span class="line">                tmp[i][j]=a[i][j]^a[<span class="number">1</span>][j]^b[<span class="number">1</span>][j];</span><br><span class="line">                <span class="comment">// printf("%d",tmp[i][j]);</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// putchar('\n');</span></span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">bool</span> f1=<span class="number">1</span>;</span><br><span class="line">            rep(j,<span class="number">1</span>,n)<span class="keyword">if</span>(tmp[i][j]!=b[i][j])f1=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">bool</span> f2=<span class="number">1</span>;</span><br><span class="line">            rep(j,<span class="number">1</span>,n)<span class="keyword">if</span>(tmp[i][j]==b[i][j])f2=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(f1||f2)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;flag=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="g.-strange-beauty">G. Strange Beauty</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Fast_IO&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>;<span class="keyword">int</span> flag=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">        <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">-1</span>;<span class="keyword">if</span>(ch==EOF)<span class="keyword">return</span> <span class="number">0</span>;ch=getchar();&#125;</span><br><span class="line">        <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">        <span class="keyword">return</span> x*=flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Fast_IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],f[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; v[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">2</span>;i&lt;=<span class="number">2e5</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(LL j=i*i;j&lt;=<span class="number">2e5</span>;j+=i)&#123;</span><br><span class="line">            v[j].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)a[i]=read();</span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]==<span class="number">1</span>)f[<span class="number">1</span>]++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                f[a[i]]=max(f[a[i]]+<span class="number">1</span>,f[<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j:v[a[i]])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[i]%j==<span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(f[j])f[a[i]]=max(f[a[i]],f[j]+<span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">if</span>(f[a[i]/j])f[a[i]]=max(f[a[i]],f[a[i]/j]+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                f[a[i]]=max(f[a[i]],<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ans=max(f[a[i]],ans);</span><br><span class="line">            <span class="comment">// printf("debug:%d %d\n",a[i],f[a[i]]);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #696 (Div. 2)</title>
    <url>/2021/01/20/Codeforces-Round-696-Div-2/</url>
    <content><![CDATA[<h2 id="a.-puzzle-from-the-future">A. Puzzle From the Future</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">string</span> b;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;b;</span><br><span class="line">        a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> pre;</span><br><span class="line">        <span class="keyword">if</span>(b[<span class="number">0</span>]==<span class="string">'0'</span>)pre=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> pre=<span class="number">2</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b[i]==<span class="string">'0'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(pre==<span class="number">1</span>)a[i]=<span class="number">0</span>,pre=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(pre==<span class="number">2</span>)a[i]=<span class="number">1</span>,pre=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(pre==<span class="number">0</span>)a[i]=<span class="number">1</span>,pre=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(pre==<span class="number">1</span>)a[i]=<span class="number">1</span>,pre=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(pre==<span class="number">2</span>)a[i]=<span class="number">0</span>,pre=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(pre==<span class="number">0</span>)a[i]=<span class="number">1</span>,pre=<span class="number">2</span>;    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf("ans");</span></span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-different-divisors">B. Different Divisors</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Sieve_of_Euler&#123;</span><br><span class="line">    <span class="keyword">int</span> nump=<span class="number">0</span>,prime[maxn];</span><br><span class="line">    <span class="keyword">bool</span> is_prime[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(is_prime,<span class="number">1</span>,<span class="keyword">sizeof</span>(is_prime));</span><br><span class="line">        is_prime[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(is_prime[i])prime[++nump]=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=nump&amp;&amp;prime[j]*i&lt;maxn;j++)&#123;</span><br><span class="line">                is_prime[i*prime[j]]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Sieve_of_Euler;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    do_main();</span><br><span class="line">    <span class="comment">// printf("debug:%d\n",prime[lower_bound(prime+1,prime+nump,+1)-prime]);</span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        LL d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;d);</span><br><span class="line">        LL x=prime[lower_bound(prime+<span class="number">1</span>,prime+nump+<span class="number">1</span>,<span class="number">1</span>+d)-prime];</span><br><span class="line">        LL y=prime[lower_bound(prime+<span class="number">1</span>,prime+nump+<span class="number">1</span>,x+d)-prime];</span><br><span class="line">        <span class="comment">// printf("%lld %lld\n",x,y);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,x*y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-array-destruction">C. Array Destruction</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">2</span>*n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        sort(a+<span class="number">1</span>,a+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">bool</span> tot=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">2</span>*n<span class="number">-1</span>)&#123;</span><br><span class="line">            ans.clear();</span><br><span class="line">            mp.clear();</span><br><span class="line">            rep(j,<span class="number">1</span>,<span class="number">2</span>*n)mp[a[j]]++;</span><br><span class="line">            mp[a[i]]--;</span><br><span class="line">            <span class="keyword">if</span>(mp[a[i]]==<span class="number">0</span>)mp.erase(a[i]);</span><br><span class="line">            mp[a[<span class="number">2</span>*n]]--;</span><br><span class="line">            <span class="keyword">if</span>(mp[a[<span class="number">2</span>*n]]==<span class="number">0</span>)mp.erase(a[<span class="number">2</span>*n]);</span><br><span class="line">            <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> x=a[<span class="number">2</span>*n];</span><br><span class="line">            per(j,<span class="number">2</span>*n<span class="number">-1</span>,<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp.count(a[j]))<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    mp[a[j]]--;</span><br><span class="line">                    <span class="keyword">if</span>(mp[a[j]]==<span class="number">0</span>)mp.erase(a[j]);</span><br><span class="line">                    <span class="keyword">if</span>(!mp.count(x-a[j]))&#123;</span><br><span class="line">                        flag=<span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        ans.push_back(make_pair(x-a[j],a[j]));</span><br><span class="line">                        mp[x-a[j]]--;</span><br><span class="line">                        <span class="keyword">if</span>(mp[x-a[j]]==<span class="number">0</span>)mp.erase(x-a[j]);</span><br><span class="line">                        x=a[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                tot=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[i]+a[<span class="number">2</span>*n]);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,a[i],a[<span class="number">2</span>*n]);</span><br><span class="line">                rep(j,<span class="number">0</span>,(<span class="keyword">int</span>)ans.size()<span class="number">-1</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans[j].first,ans[j].second);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!tot)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-cleaning">D. Cleaning</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn],rest[maxn],neg[<span class="number">2</span>][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        rest[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)rest[i]=a[i]-rest[i<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">// rep(i,1,n)printf("debugrest[%d]:%d\n",i,rest[i]);</span></span><br><span class="line">        <span class="keyword">int</span> tar=n+<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rest[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                tar=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tar==n+<span class="number">1</span>&amp;&amp;rest[n]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf("debug:%d\n",tar);</span></span><br><span class="line">        neg[n&amp;<span class="number">1</span>][n]=neg[n&amp;<span class="number">1</span>][n<span class="number">-1</span>]=rest[n];</span><br><span class="line">        neg[(n<span class="number">-1</span>)&amp;<span class="number">1</span>][n<span class="number">-1</span>]=rest[n<span class="number">-1</span>];</span><br><span class="line">        per(i,n<span class="number">-2</span>,<span class="number">1</span>)&#123;</span><br><span class="line">            neg[<span class="number">1</span>][i]=neg[<span class="number">1</span>][i+<span class="number">1</span>];</span><br><span class="line">            neg[<span class="number">0</span>][i]=neg[<span class="number">0</span>][i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>)neg[<span class="number">1</span>][i]=min(neg[<span class="number">1</span>][i],rest[i]);</span><br><span class="line">            <span class="keyword">else</span> neg[<span class="number">0</span>][i]=min(neg[<span class="number">0</span>][i],rest[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// rep(i,1,2)printf("debug:neg[%d]=%d %d\n",i,neg[0][i],neg[1][i]);</span></span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,min(tar,n<span class="number">-1</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(rest[i]-a[i]+a[i+<span class="number">1</span>]&gt;=<span class="number">0</span>&amp;&amp;neg[i&amp;<span class="number">1</span>][i+<span class="number">1</span>]<span class="number">-2</span>*a[i]+<span class="number">2</span>*a[i+<span class="number">1</span>]&gt;=<span class="number">0</span>&amp;&amp;neg[(i&amp;<span class="number">1</span>)^<span class="number">1</span>][i]<span class="number">-2</span>*a[i+<span class="number">1</span>]+<span class="number">2</span>*a[i]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>((n&amp;<span class="number">1</span>)==(i&amp;<span class="number">1</span>))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(rest[n]<span class="number">-2</span>*a[i]+<span class="number">2</span>*a[i+<span class="number">1</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                        flag=<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(rest[n]<span class="number">-2</span>*a[i+<span class="number">1</span>]+<span class="number">2</span>*a[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                        flag=<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Good Bye 2020</title>
    <url>/2021/01/20/Good-Bye-2020/</url>
    <content><![CDATA[<h2 id="a.-bovine-dilemma">A. Bovine Dilemma</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">double</span>,<span class="keyword">bool</span>&gt; vis;</span><br><span class="line"><span class="keyword">double</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        vis.clear();</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;a[i]);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            rep(j,i+<span class="number">1</span>,n)&#123;</span><br><span class="line">                <span class="keyword">if</span>(vis.count(a[j]-a[i]))<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span> vis[a[j]-a[i]]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,vis.size());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-last-minute-enhancements">B. Last minute enhancements</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)b[i]=a[i];</span><br><span class="line">        rep(i,<span class="number">2</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b[i]==a[i<span class="number">-1</span>]||b[i]==b[i<span class="number">-1</span>])b[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">2</span>,n)<span class="keyword">if</span>(b[i]!=b[i<span class="number">-1</span>])cnt++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-canine-poetry">C. Canine poetry</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="built_in">string</span> tmp=s;</span><br><span class="line">        <span class="keyword">int</span> n=s.length();</span><br><span class="line">        <span class="keyword">int</span> ans1=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp[i]==tmp[i+<span class="number">1</span>])ans1++,tmp[i+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;=<span class="number">1</span>&amp;&amp;tmp[i<span class="number">-1</span>]==tmp[i+<span class="number">1</span>])ans1++,tmp[i+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            <span class="comment">// printf("debug:%d\n",ans1);</span></span><br><span class="line">        &#125;</span><br><span class="line">        tmp=s;</span><br><span class="line">        <span class="keyword">int</span> ans2=<span class="number">0</span>;</span><br><span class="line">        per(i,n<span class="number">-1</span>,<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp[i]==tmp[i<span class="number">-1</span>])ans2++,tmp[i<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;=n<span class="number">-2</span>&amp;&amp;tmp[i<span class="number">-1</span>]==tmp[i+<span class="number">1</span>])ans2++,tmp[i<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min(ans1,ans2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-13th-labour-of-heracles">D. 13th Labour of Heracles</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;LL,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line">LL w[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">priority_queue&lt;pii&gt; pq;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())pq.pop();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        LL ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)d[i]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;w[i]),ans+=w[i];</span><br><span class="line">        rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            d[u]++;</span><br><span class="line">            d[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(d[i]<span class="number">-1</span>)pq.push(make_pair(w[i],d[i]<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line">        rep(i,<span class="number">2</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pq.empty())&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" %lld"</span>,ans);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pii tmp=pq.top();pq.pop();</span><br><span class="line">            ans+=tmp.first;</span><br><span class="line">            <span class="keyword">if</span>(tmp.second<span class="number">-1</span>)&#123;</span><br><span class="line">                tmp.second--;</span><br><span class="line">                pq.push(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" %lld"</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.-apollo-versus-pan">E. Apollo versus Pan</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">66</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">            rep(j,<span class="number">0</span>,<span class="number">59</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>((<span class="number">1L</span>L&lt;&lt;j)&amp;a[i])cnt[j]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        LL ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            LL res1=<span class="number">0</span>,res2=<span class="number">0</span>;</span><br><span class="line">            rep(j,<span class="number">0</span>,<span class="number">59</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>((<span class="number">1L</span>L&lt;&lt;j)&amp;a[i])&#123;</span><br><span class="line">                    res1+=(<span class="number">1L</span>L&lt;&lt;j)%MOD*cnt[j]%MOD;</span><br><span class="line">                    res1%=MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            rep(j,<span class="number">0</span>,<span class="number">59</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>((<span class="number">1L</span>L&lt;&lt;j)&amp;a[i])res2+=(<span class="number">1L</span>L&lt;&lt;j)%MOD*n%MOD;</span><br><span class="line">                <span class="keyword">else</span> res2+=(<span class="number">1L</span>L&lt;&lt;j)%MOD*cnt[j]%MOD;</span><br><span class="line">                res2%=MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// printf("debug:%lld %lld\n",res1,res2);</span></span><br><span class="line">            ans+=res1*res2%MOD;</span><br><span class="line">            ans%=MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #690 (Div. 3)</title>
    <url>/2020/12/16/Codeforces-Round-690-Div-3/</url>
    <content><![CDATA[<h2 id="a.-favorite-sequence">A. Favorite Sequence</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">305</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ans[i]);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        a[i]=ans[l++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        a[i]=ans[r--];</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-last-years-substring">B. Last Year's Substring</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">4</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[n<span class="number">-4</span>]==<span class="string">'2'</span>&amp;&amp;s[n<span class="number">-3</span>]==<span class="string">'0'</span>&amp;&amp;s[n<span class="number">-2</span>]==<span class="string">'2'</span>&amp;&amp;s[n<span class="number">-1</span>]==<span class="string">'0'</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'2'</span>&amp;&amp;s[n<span class="number">-3</span>]==<span class="string">'0'</span>&amp;&amp;s[n<span class="number">-2</span>]==<span class="string">'2'</span>&amp;&amp;s[n<span class="number">-1</span>]==<span class="string">'0'</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'2'</span>&amp;&amp;s[<span class="number">1</span>]==<span class="string">'0'</span>&amp;&amp;s[n<span class="number">-2</span>]==<span class="string">'2'</span>&amp;&amp;s[n<span class="number">-1</span>]==<span class="string">'0'</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'2'</span>&amp;&amp;s[<span class="number">1</span>]==<span class="string">'0'</span>&amp;&amp;s[<span class="number">2</span>]==<span class="string">'2'</span>&amp;&amp;s[n<span class="number">-1</span>]==<span class="string">'0'</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'2'</span>&amp;&amp;s[<span class="number">1</span>]==<span class="string">'0'</span>&amp;&amp;s[<span class="number">2</span>]==<span class="string">'2'</span>&amp;&amp;s[<span class="number">3</span>]==<span class="string">'0'</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-unique-number">C. Unique Number</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">        per(i,<span class="number">9</span>,<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;=i)&#123;</span><br><span class="line">                x-=i;</span><br><span class="line">                vec.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x)<span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">else</span> per(i,(<span class="keyword">int</span>)vec.size()<span class="number">-1</span>,<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">"%d"</span>,vec[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-add-to-neighbour-and-remove">D. Add to Neighbour and Remove</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">        <span class="keyword">int</span> ans=INF;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">int</span> res=i<span class="number">-1</span>,pre=i;</span><br><span class="line">            rep(j,i+<span class="number">1</span>,n)&#123;</span><br><span class="line">                <span class="keyword">if</span>(sum[j]-sum[pre]==sum[i])&#123;</span><br><span class="line">                    res+=j-pre<span class="number">-1</span>;</span><br><span class="line">                    pre=j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sum[j]-sum[pre]&gt;sum[i])&#123;</span><br><span class="line">                    res=<span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(res!=<span class="number">-1</span>&amp;&amp;pre==n)ans=min(ans,res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e1.-close-tuples-easy-version">E1. Close Tuples (easy version)</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line">LL cntl[maxn],cntr[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            rep(j,a[i]<span class="number">-2</span>,a[i]+<span class="number">2</span>)cntl[j]=cntr[j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)cntr[a[i]]++;</span><br><span class="line">        LL ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            cntr[a[i]]--;</span><br><span class="line">            ans+=cntl[a[i]<span class="number">-2</span>]*(cntr[a[i]<span class="number">-2</span>]+cntr[a[i]<span class="number">-1</span>]+cntr[a[i]]);</span><br><span class="line">            ans+=cntl[a[i]<span class="number">-1</span>]*(cntr[a[i]<span class="number">-2</span>]+cntr[a[i]<span class="number">-1</span>]+cntr[a[i]]+cntr[a[i]+<span class="number">1</span>]);</span><br><span class="line">            ans+=cntl[a[i]]*(cntr[a[i]<span class="number">-2</span>]+cntr[a[i]<span class="number">-1</span>]+cntr[a[i]]+cntr[a[i]+<span class="number">1</span>]+cntr[a[i]+<span class="number">2</span>]);</span><br><span class="line">            ans+=cntl[a[i]+<span class="number">1</span>]*(cntr[a[i]<span class="number">-1</span>]+cntr[a[i]]+cntr[a[i]+<span class="number">1</span>]+cntr[a[i]+<span class="number">2</span>]);</span><br><span class="line">            ans+=cntl[a[i]+<span class="number">2</span>]*(cntr[a[i]]+cntr[a[i]+<span class="number">1</span>]+cntr[a[i]+<span class="number">2</span>]);</span><br><span class="line">            cntl[a[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e2.-close-tuples-hard-version">E2. Close Tuples (hard version)</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">LL cnt[maxn],sum[maxn],fac[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Quick_Pow&#123;</span><br><span class="line">    <span class="function">LL <span class="title">do_main</span><span class="params">(LL a,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        LL r=<span class="number">1</span>,base=a;</span><br><span class="line">        <span class="keyword">while</span>(k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k&amp;<span class="number">1</span>)r=(r*base)%MOD;</span><br><span class="line">            base=(base*base)%MOD;</span><br><span class="line">            k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Quick_Pow;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(LL n,LL m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fac[n]*do_main(fac[n-m],MOD<span class="number">-2</span>)%MOD*do_main(fac[m],MOD<span class="number">-2</span>)%MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">        fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)fac[i]=fac[i<span class="number">-1</span>]*i%MOD;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)cnt[i]=<span class="number">0</span>,sum[i]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            cnt[a[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)sum[i]+=sum[i<span class="number">-1</span>]+cnt[i];</span><br><span class="line">        LL ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            rep(j,<span class="number">1</span>,min(m*<span class="number">1L</span>L,cnt[i]))&#123;</span><br><span class="line">                ans+=C(cnt[i],j)*C(sum[i<span class="number">-1</span>]-sum[max(i-k<span class="number">-1</span>,<span class="number">0</span>)],m-j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans%MOD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="f.-the-treasure-of-the-segments">F. The Treasure of The Segments</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">&#125;l[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ll[maxn],rr[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l[i].l,&amp;l[i].r),ll[i]=l[i].l,rr[i]=l[i].r;</span><br><span class="line">        sort(ll+<span class="number">1</span>,ll+n+<span class="number">1</span>);</span><br><span class="line">        sort(rr+<span class="number">1</span>,rr+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> ans=INF;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> tmp1=lower_bound(rr+<span class="number">1</span>,rr+n+<span class="number">1</span>,l[i].l)-rr;</span><br><span class="line">            res+=tmp1<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">int</span> tmp2=upper_bound(ll+<span class="number">1</span>,ll+n+<span class="number">1</span>,l[i].r)-ll;</span><br><span class="line">            <span class="keyword">if</span>(ll[tmp2]&gt;l[i].r)res+=n-tmp2+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> res+=<span class="number">0</span>;</span><br><span class="line">            ans=min(ans,res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 99 (Rated for Div. 2)</title>
    <url>/2020/12/01/Educational-Codeforces-Round-99-Rated-for-Div-2/</url>
    <content><![CDATA[<h2 id="a.-strange-functions">A. Strange Functions</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s.length()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-jumps">B. Jumps</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10005</span>;</span><br><span class="line"></span><br><span class="line">LL sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    rep(i,<span class="number">1</span>,<span class="number">10000</span>)sum[i]=sum[i<span class="number">-1</span>]+i;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        <span class="keyword">int</span> m=lower_bound(sum+<span class="number">1</span>,sum+<span class="number">10000</span>+<span class="number">1</span>,x)-sum;</span><br><span class="line">        <span class="keyword">if</span>(sum[m]==x)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,m);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sum[m]-x==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,m+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-ping-pong">C. Ping-pong</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,x<span class="number">-1</span>,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #687 (Div. 2, based on Technocup 2021 Elimination Round 2)</title>
    <url>/2020/12/01/Codeforces-Round-687-Div-2-based-on-Technocup-2021-Elimination-Round-2/</url>
    <content><![CDATA[<h2 id="a.-prison-break">A. Prison Break</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        ans=max(ans,n-x+m-y);</span><br><span class="line">        ans=max(ans,x<span class="number">-1</span>+m-y);</span><br><span class="line">        ans=max(ans,n-x+y<span class="number">-1</span>);</span><br><span class="line">        ans=max(ans,x<span class="number">-1</span>+y<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-repainting-street">B. Repainting Street</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[maxn],n,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> ans)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c[i]==ans)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            res++;</span><br><span class="line">            i+=k<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c[i]);</span><br><span class="line">        <span class="keyword">int</span> ans=INF;</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">200</span>)&#123;</span><br><span class="line">            ans=min(ans,check(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-bouncing-ball">C. Bouncing Ball</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,p,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;p,&amp;k);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">        per(i,n,p)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i+k&lt;=n)cnt[i]=cnt[i+k];</span><br><span class="line">            <span class="keyword">else</span> cnt[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'0'</span>)cnt[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=INF;</span><br><span class="line">        rep(i,p,n)&#123;</span><br><span class="line">            ans=min(ans,(i-p)*y+cnt[i]*x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-xor-gun">D. XOR-gun</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pre[maxn],neg[maxn],a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)pre[i]=pre[i<span class="number">-1</span>]^a[i];</span><br><span class="line">    per(i,n,<span class="number">1</span>)neg[i]=neg[i+<span class="number">1</span>]^a[i];</span><br><span class="line">    <span class="keyword">int</span> ans=INF;</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> R=min(i+<span class="number">30</span>,n),L=max(i<span class="number">-30</span>,<span class="number">1</span>);</span><br><span class="line">        rep(j,i+<span class="number">1</span>,R)&#123;</span><br><span class="line">            per(k,i,L)&#123;</span><br><span class="line">                <span class="keyword">if</span>((pre[i]^pre[k<span class="number">-1</span>])&gt;(neg[i+<span class="number">1</span>]^neg[j+<span class="number">1</span>]))&#123;</span><br><span class="line">                    <span class="comment">// printf("debug:%d %d i=%d j=%d k=%d\n",pre[i]^pre[k-1],neg[i+1]^neg[j+1],i,j,k);</span></span><br><span class="line">                    ans=min(ans,i-k+j-i<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans==INF)<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 98 (Rated for Div. 2)</title>
    <url>/2020/12/01/Educational-Codeforces-Round-98-Rated-for-Div-2/</url>
    <content><![CDATA[<h2 id="a.-robot-program">A. Robot Program</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">int</span> ans=min(x,y);</span><br><span class="line">        x-=ans,y-=ans;</span><br><span class="line">        ans*=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(x+y)ans+=(x+y)*<span class="number">2</span><span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="c.-two-brackets">C. Two Brackets</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> l1=<span class="number">0</span>,l2=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">int</span> n=s.length();</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'('</span>)l1++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'['</span>)l2++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(l1)ans++,l1--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">']'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(l2)ans++,l2--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-radio-towers">D. Radio Towers</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Quick_Pow&#123;</span><br><span class="line">    <span class="function">LL <span class="title">do_main</span><span class="params">(LL a,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        LL r=<span class="number">1</span>,base=a;</span><br><span class="line">        <span class="keyword">while</span>(k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k&amp;<span class="number">1</span>)r=(r*base)%MOD;</span><br><span class="line">            base=(base*base)%MOD;</span><br><span class="line">            k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Quick_Pow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    LL sum1=<span class="number">1</span>,sum2=<span class="number">0</span>,dp=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">2</span>,n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>)dp=sum2;</span><br><span class="line">        <span class="keyword">else</span> dp=sum1;</span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>)sum1+=dp;</span><br><span class="line">        <span class="keyword">else</span> sum2+=dp;</span><br><span class="line">        sum1%=MOD;</span><br><span class="line">        sum2%=MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf("debug:%lld\n",dp);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp*do_main(do_main(<span class="number">2</span>,n),MOD<span class="number">-2</span>)%MOD);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>[HDU1542] Atlantis</title>
    <url>/2020/11/16/HDU1542-Atlantis/</url>
    <content><![CDATA[<p>同【洛谷5490】</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> h,l,r;</span><br><span class="line">    <span class="keyword">int</span> tp;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Segment &amp;l)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h&lt;l.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;l[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> x[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,cnt;</span><br><span class="line">    <span class="keyword">double</span> sum;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].cnt)t[k].sum=x[t[k].r]-x[t[k].l];</span><br><span class="line">    <span class="keyword">else</span> t[k].sum=t[k&lt;&lt;<span class="number">1</span>].sum+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    t[k].cnt=t[k].sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(r-l==<span class="number">1</span>)&#123;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=Node&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> xx)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)&#123;</span><br><span class="line">        t[k].cnt+=xx;</span><br><span class="line">        update(k);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R,xx);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,xx);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,cas=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Test case #%d\n"</span>,++cas);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">double</span> x1,x2,y1,y2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">            l[i]=(Segment)&#123;y1,x1,x2,<span class="number">1</span>&#125;;</span><br><span class="line">            l[i+n]=(Segment)&#123;y2,x1,x2,<span class="number">-1</span>&#125;;</span><br><span class="line">            x[i]=x1;x[i+n]=x2;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(l+<span class="number">1</span>,l+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">        sort(x+<span class="number">1</span>,x+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> m=unique(x+<span class="number">1</span>,x+<span class="number">2</span>*n+<span class="number">1</span>)-x<span class="number">-1</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">2</span>*n)l[i].l=lower_bound(x+<span class="number">1</span>,x+m+<span class="number">1</span>,l[i].l)-x,l[i].r=lower_bound(x+<span class="number">1</span>,x+m+<span class="number">1</span>,l[i].r)-x;</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,m);</span><br><span class="line">        <span class="comment">// change(1,1,2*n,1);</span></span><br><span class="line">        <span class="comment">// printf("Carls:%lld %d %d  %d\n",t[1].sum,t[1].cnt,x[t[1].l],x[t[1].r]);</span></span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">2</span>*n)&#123;</span><br><span class="line">            ans+=(l[i].h-l[i<span class="number">-1</span>].h)*t[<span class="number">1</span>].sum;</span><br><span class="line">            <span class="comment">// printf("debug:%d %lld\n",l[i].h-l[i-1].h,t[1].sum);</span></span><br><span class="line">            change(<span class="number">1</span>,l[i].l,l[i].r,l[i].tp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Total explored area: %.2lf\n\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>扫描线</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[HDU1255] 覆盖的面积</title>
    <url>/2020/11/16/HDU1255-%E8%A6%86%E7%9B%96%E7%9A%84%E9%9D%A2%E7%A7%AF/</url>
    <content><![CDATA[<p>扫描线求矩形面积交模板题</p>
<p>cnt:当前结点所代表的区间被直接覆盖的次数</p>
<p>sum1:当前结点所代表的区间被覆盖1次及以上的长度</p>
<p>sum2:当前结点所代表的区间被覆盖1次及以上的长度</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> y,l,r;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;e)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y&lt;e.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> x[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,cnt;</span><br><span class="line">    <span class="keyword">double</span> sum1,sum2;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].cnt==<span class="number">0</span>)&#123;</span><br><span class="line">        t[k].sum1=t[k&lt;&lt;<span class="number">1</span>].sum1+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum1;</span><br><span class="line">        t[k].sum2=t[k&lt;&lt;<span class="number">1</span>].sum2+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(t[k].cnt==<span class="number">1</span>)&#123;</span><br><span class="line">        t[k].sum1=x[t[k].r]-x[t[k].l];</span><br><span class="line">        t[k].sum2=t[k&lt;&lt;<span class="number">1</span>].sum1+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> t[k].sum1=t[k].sum2=x[t[k].r]-x[t[k].l];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    t[k].cnt=t[k].sum1=t[k].sum2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r<span class="number">-1</span>)&#123;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].l=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l=t[k&lt;&lt;<span class="number">1</span>].r=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r=t[k&lt;&lt;<span class="number">1</span>].sum1=t[k&lt;&lt;<span class="number">1</span>].sum2=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum1=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)&#123;</span><br><span class="line">        t[k].cnt+=val;</span><br><span class="line">        update(k);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R,val);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,val);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">double</span> l,r,t,d;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;l,&amp;d,&amp;r,&amp;t);</span><br><span class="line">            e[i]=Edge&#123;d,l,r,<span class="number">1</span>&#125;;</span><br><span class="line">            e[i+n]=Edge&#123;t,l,r,<span class="number">-1</span>&#125;;</span><br><span class="line">            x[i]=l,x[i+n]=r;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(e+<span class="number">1</span>,e+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">        sort(x+<span class="number">1</span>,x+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> m=unique(x+<span class="number">1</span>,x+<span class="number">2</span>*n+<span class="number">1</span>)-x<span class="number">-1</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">2</span>*n)e[i].l=lower_bound(x+<span class="number">1</span>,x+m+<span class="number">1</span>,e[i].l)-x,e[i].r=lower_bound(x+<span class="number">1</span>,x+m+<span class="number">1</span>,e[i].r)-x;</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,m);</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">2</span>*n)&#123;</span><br><span class="line">            ans+=(e[i].y-e[i<span class="number">-1</span>].y)*t[<span class="number">1</span>].sum2;</span><br><span class="line">            change(<span class="number">1</span>,e[i].l,e[i].r,e[i].w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>扫描线</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[codeforces1446B] Catching Cheaters</title>
    <url>/2020/11/16/codeforces1446B-Catching-Cheaters/</url>
    <content><![CDATA[<p><span class="math inline">\(dp[i][j]\)</span>表示两串最后一个字符分别是<span class="math inline">\(a[i]\)</span>和<span class="math inline">\(b[j]\)</span>的最大答案，显然有</p>
<p><span class="math inline">\(a[i]=b[j]:dp[i][j]=max(dp[i][j],dp[i-1][j-1]+2)\)</span></p>
<p><span class="math inline">\(a[i] \neq b[j]:dp[i][j]=max(dp[i][j],dp[i-1][j]-1,dp[i][j-1]-1)\)</span></p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="built_in">string</span> a,b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">        rep(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i<span class="number">-1</span>]==b[j<span class="number">-1</span>])dp[i][j]=max(dp[i][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">else</span> dp[i][j]=max(dp[i][j],max(dp[i<span class="number">-1</span>][j]<span class="number">-1</span>,dp[i][j<span class="number">-1</span>]<span class="number">-1</span>));</span><br><span class="line">            ans=max(ans,dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>[codeforces1446A] Knapsack</title>
    <url>/2020/11/16/codeforces1446A-Knapsack/</url>
    <content><![CDATA[<p>把物品按重量分为三种：小于W/2，在W/2和W之间，大于W</p>
<p>大于W：直接忽略</p>
<p>在W/2和W之间：直接当答案输出</p>
<p>小于W/2：看所有这种物品的重量和够不够W/2，不够的话就无解，否则一定有解</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">    LL a;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Data &amp;d)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&lt;d.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    testcase:<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    LL W;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;n,&amp;W);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;d[i].a),d[i].id=i;</span><br><span class="line">    sort(d+<span class="number">1</span>,d+n+<span class="number">1</span>);</span><br><span class="line">    LL sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[i].a&lt;(W+<span class="number">1</span>)/<span class="number">2</span>)&#123;</span><br><span class="line">            sum+=d[i].a;</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;=(W+<span class="number">1</span>)/<span class="number">2</span>)&#123;cnt=i;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(d[i].a&lt;=W&amp;&amp;d[i].a&gt;=(W+<span class="number">1</span>)/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"1\n%d\n"</span>,d[i].id);</span><br><span class="line">            <span class="keyword">goto</span> testcase;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!cnt)<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">        rep(i,<span class="number">1</span>,cnt)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,d[i].id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>2020CSP-J普及组复赛（民间数据）</title>
    <url>/2020/11/07/2020CSP-J%E6%99%AE%E5%8F%8A%E7%BB%84%E5%A4%8D%E8%B5%9B%EF%BC%88%E6%B0%91%E9%97%B4%E6%95%B0%E6%8D%AE%EF%BC%89/</url>
    <content><![CDATA[<h2 id="a.-优秀的拆分power">A. 优秀的拆分（power）</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    per(i,<span class="number">30</span>,<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;=(<span class="number">1</span>&lt;&lt;i))ans.push_back(<span class="number">1</span>&lt;&lt;i),n-=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n)<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        rep(i,<span class="number">0</span>,(<span class="keyword">int</span>)ans.size()<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-直播获奖live">B. 直播获奖（live）</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Functional_Treap&#123;</span><br><span class="line">    <span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> l,r,key,val,size;</span><br><span class="line">    &#125;t[maxn];</span><br><span class="line">    <span class="keyword">int</span> root,num=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Rand</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	<span class="keyword">static</span> <span class="keyword">int</span> seed=<span class="number">703</span>;</span><br><span class="line">    	<span class="keyword">return</span> seed=<span class="keyword">int</span>(seed*<span class="number">48271L</span>L%<span class="number">2147483647</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        t[x].size=t[t[x].l].size+t[t[x].r].size+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> r1,<span class="keyword">int</span> r2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!r1||!r2)<span class="keyword">return</span> r1+r2;</span><br><span class="line">        <span class="keyword">if</span>(t[r1].key&lt;t[r2].key)&#123;</span><br><span class="line">            <span class="keyword">return</span> t[r1].r=merge(t[r1].r,r2),update(r1),r1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> t[r2].l=merge(r1,t[r2].l),update(r2),r2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pii <span class="title">split</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!k)<span class="keyword">return</span> mp(<span class="number">0</span>,rt);</span><br><span class="line">        <span class="keyword">int</span> l=t[rt].l,r=t[rt].r;</span><br><span class="line">        <span class="keyword">if</span>(k==t[l].size)<span class="keyword">return</span> t[rt].l=<span class="number">0</span>,update(rt),mp(l,rt);</span><br><span class="line">        <span class="keyword">if</span>(k==t[l].size+<span class="number">1</span>)<span class="keyword">return</span> t[rt].r=<span class="number">0</span>,update(rt),mp(rt,r);</span><br><span class="line">        <span class="keyword">if</span>(k&lt;t[l].size)&#123;</span><br><span class="line">            pii tmp=split(l,k);</span><br><span class="line">            <span class="keyword">return</span> t[rt].l=tmp.second,update(rt),mp(tmp.first,rt);</span><br><span class="line">        &#125;</span><br><span class="line">        pii tmp=split(r,k-t[l].size<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> t[rt].r=tmp.first,update(rt),mp(rt,tmp.second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>,tmp=INF;</span><br><span class="line">        <span class="keyword">while</span>(k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x==t[k].val)tmp=min(tmp,ans+t[t[k].l].size+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(x&lt;t[k].val)ans+=t[t[k].l].size+<span class="number">1</span>,k=t[k].r;</span><br><span class="line">            <span class="keyword">else</span> k=t[k].l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp==INF?ans:tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t[t[k].l].size==x<span class="number">-1</span>)<span class="keyword">return</span> t[k].val;</span><br><span class="line">            <span class="keyword">if</span>(t[t[k].l].size&gt;x<span class="number">-1</span>)k=t[k].l;</span><br><span class="line">            <span class="keyword">else</span> x=x-t[t[k].l].size<span class="number">-1</span>,k=t[k].r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k=rank(x,root);</span><br><span class="line">        pii tmp=split(root,k);</span><br><span class="line">        t[++num].val=x;</span><br><span class="line">        t[num].key=Rand();</span><br><span class="line">        t[num].size=<span class="number">1</span>;</span><br><span class="line">        root=merge(tmp.first,num);</span><br><span class="line">        root=merge(root,tmp.second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Functional_Treap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;w);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        insert(x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,find(max(<span class="number">1</span>,(<span class="keyword">int</span>)(i*w*<span class="number">0.01</span>)),root));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-方格取数number">D. 方格取数（number）</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL INF=<span class="number">1l</span>l&lt;&lt;<span class="number">60</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn][maxn],dp[maxn][maxn],sum[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    LL max,lazy;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    t[k].max=max(t[k&lt;&lt;<span class="number">1</span>].max,t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> c,<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    t[k].max=-INF;</span><br><span class="line">    t[k].lazy=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;t[k].max=dp[l][c<span class="number">-1</span>]+sum[l][c];<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(c,k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(c,k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>].lazy+=t[k].lazy;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy+=t[k].lazy;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>].max+=t[k].lazy;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max+=t[k].lazy;</span><br><span class="line">    t[k].lazy=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,LL x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)&#123;</span><br><span class="line">        t[k].lazy+=x;</span><br><span class="line">        t[k].max+=x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R,x);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,x);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span> -INF;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)<span class="keyword">return</span> t[k].max;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    <span class="keyword">return</span> max(query(k&lt;&lt;<span class="number">1</span>,L,R),query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)rep(j,<span class="number">1</span>,m)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i][j]);</span><br><span class="line">    rep(j,<span class="number">1</span>,m)rep(i,<span class="number">1</span>,n)sum[i][j]=sum[i<span class="number">-1</span>][j]+a[i][j];</span><br><span class="line">    rep(i,<span class="number">1</span>,n)dp[i][<span class="number">1</span>]=dp[i<span class="number">-1</span>][<span class="number">1</span>]+a[i][<span class="number">1</span>];</span><br><span class="line">    rep(j,<span class="number">2</span>,m)&#123;</span><br><span class="line">        build(j,<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            dp[i][j]=query(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">            change(<span class="number">1</span>,<span class="number">1</span>,i,a[i+<span class="number">1</span>][j]);</span><br><span class="line">            change(<span class="number">1</span>,i+<span class="number">1</span>,n,-a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[n][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>nowcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #681 (Div. 2, based on VK Cup 2019-2020 - Final)</title>
    <url>/2020/11/07/Codeforces-Round-681-Div-2-based-on-VK-Cup-2019-2020-Final/</url>
    <content><![CDATA[<h2 id="a.-kids-seating">A. Kids Seating</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>*n+<span class="number">2</span>;i&lt;=<span class="number">4</span>*n;i+=<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"%d "</span>,i);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-saving-the-city">B. Saving the City</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[maxn],seg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,tot=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">int</span> n=s.length(),l=<span class="number">-1</span>,r=<span class="number">-1</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)<span class="keyword">if</span>(s[i]==<span class="string">'1'</span>)&#123;l=i;<span class="keyword">break</span>;&#125;</span><br><span class="line">        per(i,n<span class="number">-1</span>,<span class="number">0</span>)<span class="keyword">if</span>(s[i]==<span class="string">'1'</span>)&#123;r=i;<span class="keyword">break</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(l==<span class="number">-1</span>)&#123;<span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        rep(i,l,r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'0'</span>)cnt++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'1'</span>&amp;&amp;i!=l&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">'0'</span>)&#123;</span><br><span class="line">                seg[++tot]=cnt;</span><br><span class="line">                cnt=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=(tot+<span class="number">1</span>)*a;</span><br><span class="line">        sort(seg+<span class="number">1</span>,seg+tot+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> res=ans;</span><br><span class="line">        rep(i,<span class="number">1</span>,tot)&#123;</span><br><span class="line">            res-=a;res+=seg[i]*b;</span><br><span class="line">            ans=min(ans,res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-the-delivery-dilemma">C. The Delivery Dilemma</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">    LL a,b;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Data&amp; d)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&lt;d.a;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;d[maxn];</span><br><span class="line"></span><br><span class="line">LL sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;d[i].a);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;d[i].b);</span><br><span class="line">        sort(d+<span class="number">1</span>,d+n+<span class="number">1</span>);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)sum[i]=sum[i<span class="number">-1</span>]+d[i].b;</span><br><span class="line">        LL ans=d[n].a;</span><br><span class="line">        rep(i,<span class="number">0</span>,n)ans=min(ans,max(sum[n]-sum[i],d[i].a));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-extreme-subtraction">D. Extreme Subtraction</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">30005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        b[<span class="number">1</span>]=a[<span class="number">1</span>];a[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">2</span>,n)&#123;</span><br><span class="line">           b[i]=min(b[i<span class="number">-1</span>],a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">           <span class="keyword">if</span>(b[i]&lt;<span class="number">0</span>)&#123;flag=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">           a[i]-=b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// rep(i,1,n)printf("%d ",a[i]);</span></span><br><span class="line">        <span class="comment">// putchar('\n');</span></span><br><span class="line">        per(i,n<span class="number">-1</span>,<span class="number">1</span>)<span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.-long-permutation">E. Long Permutation</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn],sum[maxn],fac[maxn];</span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> sub[maxn],num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(LL k)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,num)vis[i]=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,num)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=k/fac[num-i];</span><br><span class="line">        k%=fac[num-i];</span><br><span class="line">        rep(j,<span class="number">1</span>,num)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp==<span class="number">0</span>&amp;&amp;!vis[j])&#123;</span><br><span class="line">                a[n-num+i]=sub[j];</span><br><span class="line">                vis[j]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!vis[j])tmp--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,LL k)</span></span>&#123;</span><br><span class="line">    solve(k);</span><br><span class="line">    LL res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;n-num+<span class="number">1</span>&amp;&amp;r&lt;n-num+<span class="number">1</span>)<span class="keyword">return</span> sum[r]-sum[l<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&lt;n-num+<span class="number">1</span>)&#123;</span><br><span class="line">        res+=sum[n-num]-sum[l<span class="number">-1</span>];l=n-num+<span class="number">1</span>;</span><br><span class="line">        rep(i,l,r)res+=a[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        rep(i,l,r)res+=a[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL tot=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;q);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)a[i]=i,sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">    num=min(n,<span class="number">14</span>);</span><br><span class="line">    rep(i,n-num+<span class="number">1</span>,n)sub[i-(n-num+<span class="number">1</span>)+<span class="number">1</span>]=a[i];</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,<span class="number">14</span>)fac[i]=fac[i<span class="number">-1</span>]*i;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="keyword">int</span> op,l,r,x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;op);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(l,r,tot));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            tot+=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="f.-identify-the-operations">F. Identify the Operations</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],pos[maxn];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,k;</span><br><span class="line">        LL ans=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]),pos[a[i]]=i;</span><br><span class="line">        rep(i,<span class="number">1</span>,k)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]),s.insert(b[i]);</span><br><span class="line">        rep(i,<span class="number">1</span>,k)&#123;</span><br><span class="line">            s.erase(b[i]);</span><br><span class="line">            <span class="keyword">int</span> mul=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(pos[b[i]]&gt;<span class="number">1</span>&amp;&amp;!s.count(a[pos[b[i]]<span class="number">-1</span>]))mul++;</span><br><span class="line">            <span class="keyword">if</span>(pos[b[i]]&lt;n&amp;&amp;!s.count(a[pos[b[i]]+<span class="number">1</span>]))mul++;</span><br><span class="line">            ans=(ans*mul)%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>[洛谷2572] [SCOI2010]序列操作</title>
    <url>/2020/10/29/%E6%B4%9B%E8%B0%B72572-SCOI2010-%E5%BA%8F%E5%88%97%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>裸的多操作线段树。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Len(k) (t[k].r-t[k].l+1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,sum,ll[<span class="number">2</span>],rr[<span class="number">2</span>],maxlen[<span class="number">2</span>],opp,lazy;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    t[k].sum=t[k&lt;&lt;<span class="number">1</span>].sum+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">    <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>].ll[<span class="number">1</span>]==Len(k&lt;&lt;<span class="number">1</span>))t[k].ll[<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>].ll[<span class="number">1</span>]+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ll[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">else</span> t[k].ll[<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>].ll[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rr[<span class="number">1</span>]==Len(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>))t[k].rr[<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rr[<span class="number">1</span>]+t[k&lt;&lt;<span class="number">1</span>].rr[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">else</span> t[k].rr[<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rr[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>].ll[<span class="number">0</span>]==Len(k&lt;&lt;<span class="number">1</span>))t[k].ll[<span class="number">0</span>]=t[k&lt;&lt;<span class="number">1</span>].ll[<span class="number">0</span>]+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ll[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span> t[k].ll[<span class="number">0</span>]=t[k&lt;&lt;<span class="number">1</span>].ll[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rr[<span class="number">0</span>]==Len(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>))t[k].rr[<span class="number">0</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rr[<span class="number">0</span>]+t[k&lt;&lt;<span class="number">1</span>].rr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span> t[k].rr[<span class="number">0</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rr[<span class="number">0</span>];</span><br><span class="line">    t[k].maxlen[<span class="number">1</span>]=max(max(t[k&lt;&lt;<span class="number">1</span>].maxlen[<span class="number">1</span>],t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].maxlen[<span class="number">1</span>]),t[k&lt;&lt;<span class="number">1</span>].rr[<span class="number">1</span>]+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ll[<span class="number">1</span>]);</span><br><span class="line">    t[k].maxlen[<span class="number">0</span>]=max(max(t[k&lt;&lt;<span class="number">1</span>].maxlen[<span class="number">0</span>],t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].maxlen[<span class="number">0</span>]),t[k&lt;&lt;<span class="number">1</span>].rr[<span class="number">0</span>]+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ll[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    t[k].lazy=<span class="number">-1</span>;t[k].opp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        t[k].sum=t[k].ll[<span class="number">1</span>]=t[k].rr[<span class="number">1</span>]=t[k].maxlen[<span class="number">1</span>]=a[l];</span><br><span class="line">        t[k].ll[<span class="number">0</span>]=t[k].rr[<span class="number">0</span>]=t[k].maxlen[<span class="number">0</span>]=!a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add1</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    t[k].sum=t[k].ll[<span class="number">1</span>]=t[k].rr[<span class="number">1</span>]=t[k].maxlen[<span class="number">1</span>]=x*Len(k);</span><br><span class="line">    t[k].ll[<span class="number">0</span>]=t[k].rr[<span class="number">0</span>]=t[k].maxlen[<span class="number">0</span>]=(!x)*Len(k);</span><br><span class="line">    t[k].lazy=x;</span><br><span class="line">    t[k].opp=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    t[k].sum=Len(k)-t[k].sum;</span><br><span class="line">    <span class="keyword">int</span> tmp1=t[k].ll[<span class="number">0</span>],tmp2=t[k].rr[<span class="number">0</span>];</span><br><span class="line">    t[k].ll[<span class="number">0</span>]=t[k].ll[<span class="number">1</span>];t[k].rr[<span class="number">0</span>]=t[k].rr[<span class="number">1</span>];</span><br><span class="line">    t[k].ll[<span class="number">1</span>]=tmp1;t[k].rr[<span class="number">1</span>]=tmp2;</span><br><span class="line">    t[k].opp^=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp=t[k].maxlen[<span class="number">0</span>];</span><br><span class="line">    t[k].maxlen[<span class="number">0</span>]=t[k].maxlen[<span class="number">1</span>];</span><br><span class="line">    t[k].maxlen[<span class="number">1</span>]=tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].lazy!=<span class="number">-1</span>)add1(k&lt;&lt;<span class="number">1</span>,t[k].lazy),add1(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t[k].lazy);</span><br><span class="line">    <span class="keyword">if</span>(t[k].opp)add2(k&lt;&lt;<span class="number">1</span>),add2(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    t[k].lazy=<span class="number">-1</span>;t[k].opp=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)&#123;</span><br><span class="line">        t[k].sum=t[k].ll[<span class="number">1</span>]=t[k].rr[<span class="number">1</span>]=t[k].maxlen[<span class="number">1</span>]=x*Len(k);</span><br><span class="line">        t[k].ll[<span class="number">0</span>]=t[k].rr[<span class="number">0</span>]=t[k].maxlen[<span class="number">0</span>]=(!x)*Len(k);</span><br><span class="line">        t[k].lazy=x;</span><br><span class="line">        t[k].opp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R,x);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,x);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">opposite</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)&#123;</span><br><span class="line">        t[k].sum=Len(k)-t[k].sum;</span><br><span class="line">        <span class="keyword">int</span> tmp1=t[k].ll[<span class="number">0</span>],tmp2=t[k].rr[<span class="number">0</span>];</span><br><span class="line">        t[k].ll[<span class="number">0</span>]=t[k].ll[<span class="number">1</span>];t[k].rr[<span class="number">0</span>]=t[k].rr[<span class="number">1</span>];</span><br><span class="line">        t[k].ll[<span class="number">1</span>]=tmp1;t[k].rr[<span class="number">1</span>]=tmp2;</span><br><span class="line">        t[k].opp^=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp=t[k].maxlen[<span class="number">0</span>];</span><br><span class="line">        t[k].maxlen[<span class="number">0</span>]=t[k].maxlen[<span class="number">1</span>];</span><br><span class="line">        t[k].maxlen[<span class="number">1</span>]=tmp;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    opposite(k&lt;&lt;<span class="number">1</span>,L,R);</span><br><span class="line">    opposite(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query1</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)<span class="keyword">return</span> t[k].sum;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    <span class="keyword">return</span> query1(k&lt;&lt;<span class="number">1</span>,L,R)+query1(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query2</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)<span class="keyword">return</span> t[k].maxlen[<span class="number">1</span>];</span><br><span class="line">    pushdown(k);</span><br><span class="line">    <span class="keyword">return</span> max(max(query2(k&lt;&lt;<span class="number">1</span>,L,R),query2(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R)),min((t[k&lt;&lt;<span class="number">1</span>].r-L+<span class="number">1</span>),t[k&lt;&lt;<span class="number">1</span>].rr[<span class="number">1</span>])+min(R-t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>,t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ll[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    rep(i,<span class="number">0</span>,n<span class="number">-1</span>)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> tp,l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;tp,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">if</span>(tp==<span class="number">0</span>||tp==<span class="number">1</span>)change(<span class="number">1</span>,l,r,tp);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tp==<span class="number">2</span>)opposite(<span class="number">1</span>,l,r);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tp==<span class="number">3</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query1(<span class="number">1</span>,l,r));</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query2(<span class="number">1</span>,l,r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 97 (Rated for Div. 2)</title>
    <url>/2020/10/29/Educational-Codeforces-Round-97-Rated-for-Div-2/</url>
    <content><![CDATA[<h2 id="a.-marketing-scheme">A. Marketing Scheme</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">int</span> a=r+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l%a&gt;=a/<span class="number">2.0</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-reverse-binary-strings">B. Reverse Binary Strings</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        s=s+s;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==s[i<span class="number">-1</span>])ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-chef-monocarp">C. Chef Monocarp</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t[maxn],dp[maxn][maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t[i]);</span><br><span class="line">        sort(t+<span class="number">1</span>,t+n+<span class="number">1</span>);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)rep(j,<span class="number">1</span>,<span class="number">2</span>*n)dp[i][j]=INF;</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">2</span>*n)dp[<span class="number">1</span>][i]=<span class="built_in">abs</span>(i-t[<span class="number">1</span>]);</span><br><span class="line">        rep(i,<span class="number">2</span>,n)</span><br><span class="line">            rep(j,<span class="number">1</span>,<span class="number">2</span>*n)</span><br><span class="line">                rep(k,<span class="number">1</span>,j<span class="number">-1</span>)&#123;</span><br><span class="line">                    dp[i][j]=min(dp[i][j],dp[i<span class="number">-1</span>][k]+<span class="built_in">abs</span>(j-t[i]));</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=INF;</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">2</span>*n)ans=min(ans,dp[n][i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-minimal-height-tree">D. Minimal Height Tree</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        b[++num]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sz=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">3</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[i<span class="number">-1</span>])sz++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                b[++num]=sz;</span><br><span class="line">                sz=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        b[++num]=sz;</span><br><span class="line">        <span class="keyword">int</span> dep,pos=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(dep=<span class="number">0</span>;;dep++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dep==<span class="number">0</span>)&#123;c[dep]=<span class="number">1</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">            c[dep]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(pos&lt;=num&amp;&amp;cnt&lt;c[dep<span class="number">-1</span>])c[dep]+=b[pos],pos++,cnt++;</span><br><span class="line">            <span class="keyword">if</span>(pos&gt;num)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dep);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>[POJ1177] Picture</title>
    <url>/2020/10/22/POJ1177-Picture/</url>
    <content><![CDATA[<p>将周长分为横线和竖线。</p>
<p>横线的长度 = abs(更新后总区间被覆盖的长度-更新前总区间被覆盖长度)</p>
<p>竖线的长度 = (现在扫到的横线的高度-之前扫到的横线高度)*2* 更新前有多少条不连续线段覆盖根节点所代表的区间</p>
<p>num:此区间被多少条不连续的线段覆盖。 ll/rr:此区间左/右端点是否被覆盖。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> h,l,r,tp;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Segment &amp;l)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h&lt;l.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;l[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,cnt,num;</span><br><span class="line">    LL sum;</span><br><span class="line">    <span class="keyword">bool</span> ll,rr;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].cnt)&#123;</span><br><span class="line">        t[k].sum=x[t[k].r]-x[t[k].l];</span><br><span class="line">        t[k].num=<span class="number">1</span>;</span><br><span class="line">        t[k].ll=t[k].rr=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        t[k].sum=t[k&lt;&lt;<span class="number">1</span>].sum+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">        t[k].num=t[k&lt;&lt;<span class="number">1</span>].num+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].num-(t[k&lt;&lt;<span class="number">1</span>].rr&amp;&amp;t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ll);</span><br><span class="line">        t[k].ll=t[k&lt;&lt;<span class="number">1</span>].ll;</span><br><span class="line">        t[k].rr=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    t[k].cnt=t[k].sum=t[k].ll=t[k].rr=t[k].num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(r-l==<span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)&#123;</span><br><span class="line">        t[k].cnt+=x;</span><br><span class="line">        update(k);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R,x);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,x);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">int</span> x1,x2,y1,y2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">        l[i]=(Segment)&#123;y1,x1,x2,<span class="number">1</span>&#125;;</span><br><span class="line">        l[i+n]=(Segment)&#123;y2,x1,x2,<span class="number">-1</span>&#125;;</span><br><span class="line">        x[i]=x1;x[i+n]=x2;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(l+<span class="number">1</span>,l+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">    sort(x+<span class="number">1</span>,x+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> m=unique(x+<span class="number">1</span>,x+<span class="number">2</span>*n+<span class="number">1</span>)-x<span class="number">-1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,<span class="number">2</span>*n)l[i].l=lower_bound(x+<span class="number">1</span>,x+m+<span class="number">1</span>,l[i].l)-x,l[i].r=lower_bound(x+<span class="number">1</span>,x+m+<span class="number">1</span>,l[i].r)-x;</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,m);</span><br><span class="line">    LL ans=<span class="number">0</span>,pre=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,<span class="number">2</span>*n)&#123;</span><br><span class="line">        ans+=t[<span class="number">1</span>].num*<span class="number">2</span>*(l[i].h-l[i<span class="number">-1</span>].h);</span><br><span class="line">        change(<span class="number">1</span>,l[i].l,l[i].r,l[i].tp);</span><br><span class="line">        ans+=(t[<span class="number">1</span>].sum-pre)&gt;<span class="number">0</span>?(t[<span class="number">1</span>].sum-pre):-(t[<span class="number">1</span>].sum-pre);</span><br><span class="line">        pre=t[<span class="number">1</span>].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>扫描线</tag>
        <tag>线段树</tag>
        <tag>离散化</tag>
      </tags>
  </entry>
  <entry>
    <title>[洛谷5490] 【模板】扫描线</title>
    <url>/2020/10/21/%E6%B4%9B%E8%B0%B75490-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%89%AB%E6%8F%8F%E7%BA%BF/</url>
    <content><![CDATA[<p>用一条垂直于y轴无限长的扫描线从下往上扫。每个矩形的下边界被定义为入边，上边界被定义为出边。建立一个映射在x轴上的线段树，每次扫描到入边将对应区间的覆盖次数+1，出边将对应区间的覆盖次数-1，在进行区间加减操作前，要先将当前纵坐标和之前扫描到的纵坐标之间的面积统计到答案中。可以理解为：在扫描线移动的过程中，那些当前线段树中非0的线段都在向上随扫描线扩充面积。</p>
<p>sum:当前区间被覆盖的长度。</p>
<p>cnt:当前整个区间“直接”被覆盖到的次数。注意此问题的特殊性，由于只会查询根节点，只需保证每次修改的点到根路径上的所有sum信息是正确的即可，因此每个cnt只记录当前区间“直接”被覆盖到的次数，不需要下放和向上更新cnt标记。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> h,l,r,tp;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Segment &amp;l)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h&lt;l.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;l[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,cnt;</span><br><span class="line">    LL sum;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].cnt)t[k].sum=x[t[k].r]-x[t[k].l];</span><br><span class="line">    <span class="keyword">else</span> t[k].sum=t[k&lt;&lt;<span class="number">1</span>].sum+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    t[k].cnt=t[k].sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(r-l==<span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)&#123;</span><br><span class="line">        t[k].cnt+=x;</span><br><span class="line">        update(k);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R,x);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,x);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">int</span> x1,x2,y1,y2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">        l[i]=(Segment)&#123;y1,x1,x2,<span class="number">1</span>&#125;;</span><br><span class="line">        l[i+n]=(Segment)&#123;y2,x1,x2,<span class="number">-1</span>&#125;;</span><br><span class="line">        x[i]=x1;x[i+n]=x2;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(l+<span class="number">1</span>,l+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">    sort(x+<span class="number">1</span>,x+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> m=unique(x+<span class="number">1</span>,x+<span class="number">2</span>*n+<span class="number">1</span>)-x<span class="number">-1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,<span class="number">2</span>*n)l[i].l=lower_bound(x+<span class="number">1</span>,x+m+<span class="number">1</span>,l[i].l)-x,l[i].r=lower_bound(x+<span class="number">1</span>,x+m+<span class="number">1</span>,l[i].r)-x;</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,m);</span><br><span class="line">    <span class="comment">// change(1,1,2*n,1);</span></span><br><span class="line">    <span class="comment">// printf("Carls:%lld %d %d  %d\n",t[1].sum,t[1].cnt,x[t[1].l],x[t[1].r]);</span></span><br><span class="line">    LL ans=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,<span class="number">2</span>*n)&#123;</span><br><span class="line">        ans+=(l[i].h-l[i<span class="number">-1</span>].h)*t[<span class="number">1</span>].sum;</span><br><span class="line">        <span class="comment">// printf("debug:%d %lld\n",l[i].h-l[i-1].h,t[1].sum);</span></span><br><span class="line">        change(<span class="number">1</span>,l[i].l,l[i].r,l[i].tp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>扫描线</tag>
        <tag>线段树</tag>
        <tag>离散化</tag>
      </tags>
  </entry>
  <entry>
    <title>[POJ3579] Median</title>
    <url>/2020/10/13/POJ3579-Median/</url>
    <content><![CDATA[<p>相似问题：POJ3685。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">LL p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    LL cnt=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">int</span> l=i,r=n;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid]-a[i]&lt;=x)l=mid;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt+=l-i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt&gt;=p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)==<span class="number">1</span>)&#123;</span><br><span class="line">        p=(n*<span class="number">1L</span>L*(n<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=INF;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid))r=mid;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>二分查找</tag>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title>[POIJ3104] Drying</title>
    <url>/2020/10/13/POIJ3104-Drying/</url>
    <content><![CDATA[<p>二分答案，注意K=1的情况不要除0。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn],tmp[maxn];</span><br><span class="line">LL k;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)tmp[i]=a[i];</span><br><span class="line">    rep(i,<span class="number">1</span>,n)tmp[i]=max(<span class="number">0L</span>L,tmp[i]-x);</span><br><span class="line">    LL cnt=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp[i])&#123;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> cnt+=<span class="built_in">ceil</span>((<span class="keyword">double</span>)tmp[i]/(k<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf("debug:x=%lld cnt=%lld\n",x,cnt);</span></span><br><span class="line">    <span class="keyword">return</span> cnt&lt;=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;k);</span><br><span class="line">    LL l=<span class="number">0</span>,r=INF;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        LL mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid))r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title>[POJ3685] Matrix</title>
    <url>/2020/10/13/POJ3685-Matrix/</url>
    <content><![CDATA[<p>第一层二分：二分答案的值为多少，check矩阵中是否有至少m个数小于等于他。 第二层二分：观察发现，此矩阵随i递增，枚举j，二分i，就可计算出矩阵中有多少个数小于等于某一个数。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(LL i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(LL i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL INF=<span class="number">1L</span>L&lt;&lt;<span class="number">62</span>;</span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">f</span><span class="params">(LL i,LL j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">0</span>)<span class="keyword">return</span> -INF;</span><br><span class="line">    <span class="keyword">return</span> i*i+<span class="number">100000</span>*i+j*j<span class="number">-100000</span>*j+i*j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(LL ans)</span></span>&#123;</span><br><span class="line">    LL cnt=<span class="number">0</span>;</span><br><span class="line">    rep(j,<span class="number">1</span>,n)&#123;</span><br><span class="line">        LL l=<span class="number">0</span>,r=n;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            LL mid=(l+r&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(f(mid,j)&gt;ans)r=mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> l=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt+=l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt&gt;=m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line">        LL ansl=-INF,ansr=INF;</span><br><span class="line">        <span class="keyword">while</span>(ansl&lt;ansr)&#123;</span><br><span class="line">            LL mid=ansl+ansr&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!check(mid))ansl=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> ansr=mid;</span><br><span class="line">            <span class="comment">// printf("%lld\n",mid);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ansl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>二分查找</tag>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title>[codeforces371C] Hamburgers</title>
    <url>/2020/10/13/codeforces371C-Hamburgers/</url>
    <content><![CDATA[<p>二分答案，注意longlong。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> ss;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ss;</span><br><span class="line">    <span class="keyword">int</span> cntc=<span class="number">0</span>,cntb=<span class="number">0</span>,cnts=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n=ss.length();</span><br><span class="line">    rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ss[i]==<span class="string">'C'</span>)cntc++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ss[i]==<span class="string">'B'</span>)cntb++;</span><br><span class="line">        <span class="keyword">else</span> cnts++;</span><br><span class="line">    &#125;</span><br><span class="line">    LL c,b,s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;b,&amp;s,&amp;c);</span><br><span class="line">    LL q,w,e;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;w,&amp;e,&amp;q);</span><br><span class="line">    LL tot;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;tot);</span><br><span class="line">    LL l=<span class="number">0</span>,r=<span class="number">1e15</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        LL mid=(l+r&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(max(cntc*mid-c,<span class="number">0L</span>L)*q+max(cntb*mid-b,<span class="number">0L</span>L)*w+max(cnts*mid-s,<span class="number">0L</span>L)*e&lt;=tot)l=mid;</span><br><span class="line">        <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title>[HDU4553] 约会安排</title>
    <url>/2020/10/10/HDU4553-%E7%BA%A6%E4%BC%9A%E5%AE%89%E6%8E%92/</url>
    <content><![CDATA[<p>[POJ3667]的加强版，创建两个线段树，一个记录DS和女神共同占用的时间，另一个记录女神占用的时间，DS只可以在公用线段树中找时间，NS则两个都可以用（优先使用公用的）。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Len(k,p) (t[p][k].r-t[p][k].l+1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,lsum,rsum,sum,lazy;</span><br><span class="line">&#125;t[<span class="number">3</span>][maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    t[p][k].lsum=(t[p][k&lt;&lt;<span class="number">1</span>].lsum==Len(k&lt;&lt;<span class="number">1</span>,p)?Len(k&lt;&lt;<span class="number">1</span>,p)+t[p][k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lsum:t[p][k&lt;&lt;<span class="number">1</span>].lsum);</span><br><span class="line">    t[p][k].rsum=(t[p][k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rsum==Len(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,p)?Len(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,p)+t[p][k&lt;&lt;<span class="number">1</span>].rsum:t[p][k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rsum);</span><br><span class="line">    t[p][k].sum=max(max(t[p][k&lt;&lt;<span class="number">1</span>].sum,t[p][k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum),t[p][k&lt;&lt;<span class="number">1</span>].rsum+t[p][k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lsum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    t[p][k].l=l;t[p][k].r=r;</span><br><span class="line">    t[p][k].lsum=t[p][k].rsum=t[p][k].sum=Len(k,p);</span><br><span class="line">    t[p][k].lazy=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid,p);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[p][k].lazy==<span class="number">-1</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> c=t[p][k].lazy;</span><br><span class="line">    t[p][k&lt;&lt;<span class="number">1</span>].lazy=c;</span><br><span class="line">    t[p][k&lt;&lt;<span class="number">1</span>].lsum=t[p][k&lt;&lt;<span class="number">1</span>].rsum=t[p][k&lt;&lt;<span class="number">1</span>].sum=c*Len(k&lt;&lt;<span class="number">1</span>,p);</span><br><span class="line">    t[p][k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy=c;</span><br><span class="line">    t[p][k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lsum=t[p][k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rsum=t[p][k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum=c*Len(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,p);</span><br><span class="line">    t[p][k].lazy=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> c,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[p][k].l&gt;R||t[p][k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[p][k].l&gt;=L&amp;&amp;t[p][k].r&lt;=R)&#123;</span><br><span class="line">        t[p][k].lazy=c;</span><br><span class="line">        t[p][k].lsum=t[p][k].rsum=t[p][k].sum=c*Len(k,p);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(k,p);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R,c,p);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,c,p);</span><br><span class="line">    update(k,p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> num,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    pushdown(k,p);</span><br><span class="line">    <span class="comment">// printf("[%d,%d]\n",t[p][k].l,t[p][k].r);</span></span><br><span class="line">    <span class="keyword">if</span>(t[p][k&lt;&lt;<span class="number">1</span>].sum&gt;=num)<span class="keyword">return</span> query(k&lt;&lt;<span class="number">1</span>,num,p);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(t[p][k&lt;&lt;<span class="number">1</span>].rsum+t[p][k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lsum&gt;=num)<span class="keyword">return</span> t[p][k&lt;&lt;<span class="number">1</span>].r-t[p][k&lt;&lt;<span class="number">1</span>].rsum+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(t[p][k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum&gt;=num)<span class="keyword">return</span> query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,num,p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> CASE;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;CASE);</span><br><span class="line">    rep(cas,<span class="number">1</span>,CASE)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,cas);</span><br><span class="line">        <span class="keyword">int</span> n,t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;t,&amp;n);</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,t,<span class="number">0</span>);</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,t,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">            <span class="keyword">if</span>(s==<span class="string">"NS"</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> x;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">                <span class="keyword">int</span> pos=query(<span class="number">1</span>,x,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(pos)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d,don't put my gezi\n"</span>,pos);</span><br><span class="line">                    change(<span class="number">1</span>,pos,pos+x<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">                    change(<span class="number">1</span>,pos,pos+x<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    pos=query(<span class="number">1</span>,x,<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(!pos)<span class="built_in">printf</span>(<span class="string">"wait for me\n"</span>);</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%d,don't put my gezi\n"</span>,pos);</span><br><span class="line">                        change(<span class="number">1</span>,pos,pos+x<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">                        change(<span class="number">1</span>,pos,pos+x<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>);        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">"DS"</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> x;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">                <span class="keyword">int</span> pos=query(<span class="number">1</span>,x,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(pos)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d,let's fly\n"</span>,pos);</span><br><span class="line">                    change(<span class="number">1</span>,pos,pos+x<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"fly with yourself\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"I am the hope of chinese chengxuyuan!!\n"</span>);</span><br><span class="line">                <span class="keyword">int</span> l,r;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">                change(<span class="number">1</span>,l,r,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">                change(<span class="number">1</span>,l,r,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[POJ3667] Hotel</title>
    <url>/2020/10/10/POJ3667-Hotel/</url>
    <content><![CDATA[<p>t[k].sum表示[t[k].l,t[k].r]区间内最长空闲长度 t[k].lsum表示[t[k].l,t[k].r]区间内左端点最多向右延长的空闲长度 t[k].rsum表示[t[k].l,t[k].r]区间内右端点最多向左延长的空闲长度</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Len(k) (t[k].r-t[k].l+1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,sum,lsum,rsum,lazy;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    t[k].lsum=(t[k&lt;&lt;<span class="number">1</span>].lsum==Len(k&lt;&lt;<span class="number">1</span>)?Len(k&lt;&lt;<span class="number">1</span>)+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lsum:t[k&lt;&lt;<span class="number">1</span>].lsum);</span><br><span class="line">    t[k].rsum=(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rsum==Len(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)?Len(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)+t[k&lt;&lt;<span class="number">1</span>].rsum:t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rsum);</span><br><span class="line">    t[k].sum=max(max(t[k&lt;&lt;<span class="number">1</span>].sum,t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum),t[k&lt;&lt;<span class="number">1</span>].rsum+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lsum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    t[k].lsum=t[k].rsum=t[k].sum=Len(k);</span><br><span class="line">    t[k].lazy=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].lazy==<span class="number">-1</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> c=t[k].lazy;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>].lazy=c;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>].lsum=t[k&lt;&lt;<span class="number">1</span>].rsum=t[k&lt;&lt;<span class="number">1</span>].sum=c*Len(k&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy=c;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lsum=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rsum=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum=c*Len(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    t[k].lazy=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)&#123;</span><br><span class="line">        t[k].lazy=c;</span><br><span class="line">        t[k].lsum=t[k].rsum=t[k].sum=c*Len(k);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R,c);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,c);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    <span class="comment">// printf("[%d,%d]\n",t[k].l,t[k].r);</span></span><br><span class="line">    <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>].sum&gt;=num)<span class="keyword">return</span> query(k&lt;&lt;<span class="number">1</span>,num);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>].rsum+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lsum&gt;=num)<span class="keyword">return</span> t[k&lt;&lt;<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>].rsum+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum&gt;=num)<span class="keyword">return</span> query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> op;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;op);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">            <span class="keyword">int</span> pos=query(<span class="number">1</span>,k);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,pos);</span><br><span class="line">            <span class="keyword">if</span>(!pos)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> change(<span class="number">1</span>,pos,pos+k<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> l,r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">            change(<span class="number">1</span>,l,l+r<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客练习赛71</title>
    <url>/2020/10/09/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B71/</url>
    <content><![CDATA[<h2 id="a.-回文数">A. 回文数</h2>
<p>从前向后，每次找最小的能放进去的数放进去，如果最终串的长度不等与数的总数就无解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">0</span>,<span class="number">9</span>)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        sum+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> ans=<span class="string">""</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,sum/<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">            rep(j,<span class="number">1</span>,<span class="number">9</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j]&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">                    ans=ans+(<span class="keyword">char</span>)(j+<span class="string">'0'</span>);</span><br><span class="line">                    a[j]-=<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            rep(j,<span class="number">0</span>,<span class="number">9</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j]&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">                    ans=ans+(<span class="keyword">char</span>)(j+<span class="string">'0'</span>);</span><br><span class="line">                    a[j]-=<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> ans2=<span class="string">""</span>;</span><br><span class="line">    per(i,(LL)ans.length()<span class="number">-1</span>,<span class="number">0</span>)ans2=ans2+ans[i];</span><br><span class="line">    <span class="keyword">if</span>(sum%<span class="number">2</span>)&#123;</span><br><span class="line">        rep(i,<span class="number">0</span>,<span class="number">9</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i])&#123;</span><br><span class="line">                a[i]--;</span><br><span class="line">                ans=ans+(<span class="keyword">char</span>)(i+<span class="string">'0'</span>)+ans2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> ans=ans+ans2;</span><br><span class="line">    <span class="keyword">if</span>(ans.length()==sum)<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-烙印">B. 烙印</h2>
<p>三个边：合法，1；不合法，0。 三个角：合法，∞；不合法，0。 两个角一个边：合法，1；不合法，0。 两个边一个角：边角边，1；角大于等于90°且对着小/等边，0；角对着大/等边，1；角小于90°对着小边，比较小边与大边*sin(角)的关系。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ld pi=<span class="number">3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-6</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,c,A,B,C;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>,&amp;a,&amp;b,&amp;c,&amp;A,&amp;B,&amp;C);</span><br><span class="line">        <span class="keyword">int</span> cnt1=<span class="number">0</span>,cnt2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(a!=<span class="number">-1</span>)cnt1++;<span class="keyword">if</span>(b!=<span class="number">-1</span>)cnt1++;<span class="keyword">if</span>(c!=<span class="number">-1</span>)cnt1++;</span><br><span class="line">        <span class="keyword">if</span>(A!=<span class="number">-1</span>)cnt2++;<span class="keyword">if</span>(B!=<span class="number">-1</span>)cnt2++;<span class="keyword">if</span>(C!=<span class="number">-1</span>)cnt2++;</span><br><span class="line">        <span class="keyword">if</span>(cnt1==<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a+b&gt;c&amp;&amp;b+c&gt;a&amp;&amp;a+c&gt;b)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt2==<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A+B+C==<span class="number">180</span>)<span class="built_in">puts</span>(<span class="string">"syksykCCC"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt1==<span class="number">1</span>&amp;&amp;cnt2==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A!=<span class="number">-1</span>&amp;&amp;B!=<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(A+B&lt;<span class="number">180</span>)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(A!=<span class="number">-1</span>&amp;&amp;C!=<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(A+C&lt;<span class="number">180</span>)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(B!=<span class="number">-1</span>&amp;&amp;C!=<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(B+C&lt;<span class="number">180</span>)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt1==<span class="number">2</span>&amp;&amp;cnt2==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a!=<span class="number">-1</span>&amp;&amp;b!=<span class="number">-1</span>&amp;&amp;C!=<span class="number">-1</span>)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a!=<span class="number">-1</span>&amp;&amp;c!=<span class="number">-1</span>&amp;&amp;B!=<span class="number">-1</span>)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(b!=<span class="number">-1</span>&amp;&amp;c!=<span class="number">-1</span>&amp;&amp;A!=<span class="number">-1</span>)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a!=<span class="number">-1</span>&amp;&amp;b!=<span class="number">-1</span>&amp;&amp;A!=<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(A&gt;=<span class="number">90</span>&amp;&amp;a&lt;=b)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(a&gt;=b||(a&lt;b&amp;&amp;<span class="built_in">fabs</span>(a-b*<span class="built_in">sin</span>(A/<span class="number">180.0</span>*pi))&lt;eps))<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(a&lt;b&amp;&amp;a-b*<span class="built_in">sin</span>(A/<span class="number">180.0</span>*pi)&lt;-eps)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"2"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a!=<span class="number">-1</span>&amp;&amp;b!=<span class="number">-1</span>&amp;&amp;B!=<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(B&gt;=<span class="number">90</span>&amp;&amp;b&lt;=a)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(b&gt;=a||(b&lt;a&amp;&amp;<span class="built_in">fabs</span>(b-a*<span class="built_in">sin</span>(B/<span class="number">180.0</span>*pi))&lt;eps))<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(b&lt;a&amp;&amp;b-a*<span class="built_in">sin</span>(B/<span class="number">180.0</span>*pi)&lt;-eps)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"2"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a!=<span class="number">-1</span>&amp;&amp;c!=<span class="number">-1</span>&amp;&amp;A!=<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(A&gt;=<span class="number">90</span>&amp;&amp;a&lt;=c)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(a&gt;=c||(a&lt;c&amp;&amp;<span class="built_in">fabs</span>(a-c*<span class="built_in">sin</span>(A/<span class="number">180.0</span>*pi))&lt;eps))<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(a&lt;c&amp;&amp;a-c*<span class="built_in">sin</span>(A/<span class="number">180.0</span>*pi)&lt;-eps)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"2"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a!=<span class="number">-1</span>&amp;&amp;c!=<span class="number">-1</span>&amp;&amp;C!=<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(C&gt;=<span class="number">90</span>&amp;&amp;c&lt;=a)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(c&gt;=a||(c&lt;a&amp;&amp;<span class="built_in">fabs</span>(c-a*<span class="built_in">sin</span>(C/<span class="number">180.0</span>*pi))&lt;eps))<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(c&lt;a&amp;&amp;c-a*<span class="built_in">sin</span>(C/<span class="number">180.0</span>*pi)&lt;-eps)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"2"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(b!=<span class="number">-1</span>&amp;&amp;c!=<span class="number">-1</span>&amp;&amp;B!=<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(B&gt;=<span class="number">90</span>&amp;&amp;b&lt;=c)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(b&gt;=c||(b&lt;c&amp;&amp;<span class="built_in">fabs</span>(b-c*<span class="built_in">sin</span>(B/<span class="number">180.0</span>*pi))&lt;eps))<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(b&lt;c&amp;&amp;b-c*<span class="built_in">sin</span>(B/<span class="number">180.0</span>*pi)&lt;-eps)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"2"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(b!=<span class="number">-1</span>&amp;&amp;c!=<span class="number">-1</span>&amp;&amp;C!=<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(C&gt;=<span class="number">90</span>&amp;&amp;c&lt;=b)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(c&gt;=b||(c&lt;b&amp;&amp;<span class="built_in">fabs</span>(c-b*<span class="built_in">sin</span>(C/<span class="number">180.0</span>*pi))&lt;eps))<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(c&lt;b&amp;&amp;c-b*<span class="built_in">sin</span>(C/<span class="number">180.0</span>*pi)&lt;-eps)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"2"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-数学考试">C. 数学考试</h2>
<p>dp[i][j]表示到前i位，排列中最大数为j的合法方案数。</p>
<p><span class="math inline">\(dp[i][j]=(sum[i\&amp;1\wedge1][j-1]+dp[i-1][j]*(j-i+1))\)</span></p>
<p>其中<span class="math inline">\(sum[0][j]=\sum_{k=i-1}^{j}dp[i-1][k]\)</span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">20000311</span>;</span><br><span class="line"></span><br><span class="line">LL dp[maxn][maxn],p[maxn],sum[<span class="number">2</span>][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    rep(i,<span class="number">1</span>,m)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;p[i]);</span><br><span class="line">    sort(p+<span class="number">1</span>,p+m+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> tmp=<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        dp[<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>&amp;&amp;tmp&lt;=m&amp;&amp;p[<span class="number">1</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">            tmp++;</span><br><span class="line">            dp[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum[<span class="number">1</span>][i]=sum[<span class="number">1</span>][i<span class="number">-1</span>]+dp[<span class="number">1</span>][i];</span><br><span class="line">        <span class="comment">// printf("debug:dp[%d][%d]=%lld\n",1,i,dp[1][i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">2</span>,n)&#123;</span><br><span class="line">        sum[i&amp;<span class="number">1</span>][i<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">        rep(j,i,n)&#123;</span><br><span class="line">            dp[i][j]=(sum[i&amp;<span class="number">1</span>^<span class="number">1</span>][j<span class="number">-1</span>]+dp[i<span class="number">-1</span>][j]*(j-i+<span class="number">1</span>))%MOD;</span><br><span class="line">            <span class="keyword">if</span>(tmp&lt;=m&amp;&amp;p[tmp]==i&amp;&amp;j==i)&#123;</span><br><span class="line">                dp[i][j]=<span class="number">0</span>;tmp++;</span><br><span class="line">            &#125;</span><br><span class="line">            sum[i&amp;<span class="number">1</span>][j]=(sum[i&amp;<span class="number">1</span>][j<span class="number">-1</span>]+dp[i][j])%MOD;</span><br><span class="line">            <span class="comment">// printf("debug:dp[%d][%d]=%lld\n",i,j,dp[i][j]);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[n][n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>nowcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>[HDU4614] Vases and Flowers</title>
    <url>/2020/10/08/HDU4614-Vases-and-Flowers/</url>
    <content><![CDATA[<p>二分右边第一个区间和不等于区间长度的点和第一个区间长度减区间和等于f的点，如果不能将所有花都放进去，就二分第一个区间长度减区间和等于能放的最大数的点。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,sum,lazy;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    t[k].sum=t[k&lt;&lt;<span class="number">1</span>].sum+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    t[k].lazy=<span class="number">-1</span>;t[k].sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].lazy==<span class="number">-1</span>)<span class="keyword">return</span>;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>].sum=t[k].lazy*(t[k&lt;&lt;<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>].lazy=t[k].lazy;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum=t[k].lazy*(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy=t[k].lazy;</span><br><span class="line">    t[k].lazy=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)&#123;</span><br><span class="line">        t[k].sum=c*(t[k].r-t[k].l+<span class="number">1</span>);</span><br><span class="line">        t[k].lazy=c;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R,c);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,c);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)<span class="keyword">return</span> t[k].sum;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    <span class="keyword">return</span> query(k&lt;&lt;<span class="number">1</span>,L,R)+query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">        rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">            <span class="keyword">int</span> k,a,b;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;k,&amp;a,&amp;b);</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(n<span class="number">-1</span>-a+<span class="number">1</span>-query(<span class="number">1</span>,a,n<span class="number">-1</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">"Can not put any one."</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> l=a,r=n<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(mid-a+<span class="number">1</span>-query(<span class="number">1</span>,a,mid))r=mid;</span><br><span class="line">                    <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> ll=l;</span><br><span class="line">                l=a,r=n<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(mid-a+<span class="number">1</span>-query(<span class="number">1</span>,a,mid)&gt;=b)r=mid;</span><br><span class="line">                    <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> rr=l;</span><br><span class="line">                <span class="keyword">if</span>(l-a+<span class="number">1</span>-query(<span class="number">1</span>,a,l)&lt;b)&#123;</span><br><span class="line">                    <span class="keyword">int</span> tmp=l-a+<span class="number">1</span>-query(<span class="number">1</span>,a,l);</span><br><span class="line">                    l=a,r=n<span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span>(mid-a+<span class="number">1</span>-query(<span class="number">1</span>,a,mid)&gt;=tmp)r=mid;</span><br><span class="line">                        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    rr=l;</span><br><span class="line">                &#125;</span><br><span class="line">                change(<span class="number">1</span>,ll,rr,<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ll,rr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(<span class="number">1</span>,a,b));</span><br><span class="line">                change(<span class="number">1</span>,a,b,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>[HDU4578] Transformation</title>
    <url>/2020/10/08/HDU4578-Transformation/</url>
    <content><![CDATA[<p>有三种操作：(1)区间加、(2)区间乘和(3)区间赋值。考虑懒标记下放顺序3-2-1：区间赋值操作可以将之前的区间加和区间乘操作都删除；区间乘操作可以通过将之前所有的区间加操作的值都乘当前乘数来等效交换了当前乘法操作和之前的所有加法操作。所以这种顺序是合理的。至于求p次方，只需要在更新时同时更新各次方的和即可，区间加操作更新时要推一下平方差和立方差公式。</p>
<p>由于我change时找到了节点要下放懒标记，所以空间要开8倍而不是一般的4倍。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">10007</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    LL sum[<span class="number">4</span>],lazy[<span class="number">4</span>];</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,<span class="number">3</span>)t[k].sum[i]=(t[k&lt;&lt;<span class="number">1</span>].sum[i]+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[i])%MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    rep(i,<span class="number">1</span>,<span class="number">3</span>)&#123;</span><br><span class="line">        t[k].lazy[i]=<span class="number">-1</span>;</span><br><span class="line">        t[k].sum[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].lazy[<span class="number">3</span>]!=<span class="number">-1</span>)&#123;</span><br><span class="line">        LL c=t[k].lazy[<span class="number">3</span>];</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">1</span>]=c*(t[k&lt;&lt;<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>)%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">2</span>]=c*c%MOD*(t[k&lt;&lt;<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>)%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">3</span>]=c*c%MOD*c%MOD*(t[k&lt;&lt;<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>)%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">3</span>]=c;t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">2</span>]=<span class="number">-1</span>;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">1</span>]=c*(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>)%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">2</span>]=c*c%MOD*(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>)%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">3</span>]=c*c%MOD*c%MOD*(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>)%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">3</span>]=c;t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">2</span>]=<span class="number">-1</span>;</span><br><span class="line">        t[k].lazy[<span class="number">3</span>]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t[k].lazy[<span class="number">2</span>]!=<span class="number">-1</span>)&#123;</span><br><span class="line">        LL c=t[k].lazy[<span class="number">2</span>];</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">1</span>]*c%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">2</span>]=t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">2</span>]*c%MOD*c%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">3</span>]=t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">3</span>]*c%MOD*c%MOD*c%MOD;</span><br><span class="line">        <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">2</span>]!=<span class="number">-1</span>)t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">2</span>]=t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">2</span>]*c%MOD;</span><br><span class="line">        <span class="keyword">else</span> t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">2</span>]=c;</span><br><span class="line">        <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">1</span>]!=<span class="number">-1</span>)t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">1</span>]*c%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">1</span>]*c%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">2</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">2</span>]*c%MOD*c%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">3</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">3</span>]*c%MOD*c%MOD*c%MOD;</span><br><span class="line">        <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">2</span>]!=<span class="number">-1</span>)t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">2</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">2</span>]*c%MOD;</span><br><span class="line">        <span class="keyword">else</span> t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">2</span>]=c;</span><br><span class="line">        <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">1</span>]!=<span class="number">-1</span>)t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">1</span>]*c%MOD;</span><br><span class="line">        t[k].lazy[<span class="number">2</span>]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t[k].lazy[<span class="number">1</span>]!=<span class="number">-1</span>)&#123;</span><br><span class="line">        LL c=t[k].lazy[<span class="number">1</span>];</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">3</span>]+=((t[k&lt;&lt;<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>)*c%MOD*c%MOD*c%MOD+<span class="number">3</span>*c%MOD*(t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">2</span>]+t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">1</span>]*c%MOD))%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">2</span>]+=((t[k&lt;&lt;<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>)*c%MOD*c%MOD+<span class="number">2</span>*t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">1</span>]%MOD*c%MOD)%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">1</span>]+=(c*(t[k&lt;&lt;<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>))%MOD;</span><br><span class="line">        <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">1</span>]!=<span class="number">-1</span>)t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">1</span>]+=c;</span><br><span class="line">        <span class="keyword">else</span> t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">1</span>]=c;</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">3</span>)t[k&lt;&lt;<span class="number">1</span>].sum[i]%=MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">1</span>]%=MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">3</span>]+=(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>)*c%MOD*c%MOD*c%MOD+<span class="number">3</span>*c%MOD*(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">2</span>]+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">1</span>]*c%MOD)%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">2</span>]+=(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>)*c%MOD*c%MOD+<span class="number">2</span>*t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">1</span>]%MOD*c%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">1</span>]+=c*(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>)%MOD;</span><br><span class="line">        <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">1</span>]!=<span class="number">-1</span>)t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">1</span>]+=c;</span><br><span class="line">        <span class="keyword">else</span> t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">1</span>]=c;</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">3</span>)t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[i]%=MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">1</span>]%=MOD;</span><br><span class="line">        t[k].lazy[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> tp,LL c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)&#123;</span><br><span class="line">        pushdown(k);</span><br><span class="line">        t[k].lazy[tp]=c;</span><br><span class="line">        <span class="keyword">if</span>(tp==<span class="number">1</span>)&#123;</span><br><span class="line">            t[k].sum[<span class="number">3</span>]+=(t[k].r-t[k].l+<span class="number">1</span>)*c%MOD*c%MOD*c%MOD+<span class="number">3</span>*c%MOD*(t[k].sum[<span class="number">2</span>]+t[k].sum[<span class="number">1</span>]*c%MOD)%MOD;</span><br><span class="line">            t[k].sum[<span class="number">2</span>]+=(t[k].r-t[k].l+<span class="number">1</span>)*c%MOD*c%MOD+<span class="number">2</span>*t[k].sum[<span class="number">1</span>]*c;</span><br><span class="line">            t[k].sum[<span class="number">1</span>]+=c*(t[k].r-t[k].l+<span class="number">1</span>)%MOD;</span><br><span class="line">            rep(i,<span class="number">1</span>,<span class="number">3</span>)t[k].sum[i]%=MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tp==<span class="number">2</span>)&#123;</span><br><span class="line">            t[k].sum[<span class="number">1</span>]*=c;</span><br><span class="line">            t[k].sum[<span class="number">2</span>]*=c*c%MOD;</span><br><span class="line">            t[k].sum[<span class="number">3</span>]*=c*c%MOD*c%MOD;</span><br><span class="line">            rep(i,<span class="number">1</span>,<span class="number">3</span>)t[k].sum[i]%=MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            t[k].sum[<span class="number">1</span>]=c*(t[k].r-t[k].l+<span class="number">1</span>)%MOD;</span><br><span class="line">            t[k].sum[<span class="number">2</span>]=c*c%MOD*(t[k].r-t[k].l+<span class="number">1</span>)%MOD;</span><br><span class="line">            t[k].sum[<span class="number">3</span>]=c*c%MOD*c%MOD*(t[k].r-t[k].l+<span class="number">1</span>)%MOD;</span><br><span class="line">            rep(i,<span class="number">1</span>,<span class="number">3</span>)t[k].sum[i]%=MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R,tp,c);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,tp,c);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)<span class="keyword">return</span> t[k].sum[p];</span><br><span class="line">    pushdown(k);</span><br><span class="line">    <span class="keyword">return</span> (query(k&lt;&lt;<span class="number">1</span>,L,R,p)+query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,p))%MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("4578.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("4578.out","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">            <span class="keyword">int</span> op,x,y;</span><br><span class="line">            LL c;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%lld"</span>,&amp;op,&amp;x,&amp;y,&amp;c);</span><br><span class="line">            <span class="keyword">if</span>(op!=<span class="number">4</span>)change(<span class="number">1</span>,x,y,op,c);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(<span class="number">1</span>,x,y,c));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[洛谷3373] 【模板】线段树 2</title>
    <url>/2020/10/08/%E6%B4%9B%E8%B0%B73373-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91-2/</url>
    <content><![CDATA[<p>将[HDU4578]的代码改了改交了。</p>
<p>注意94行change那里找到一个节点后还会pushdown下去，所以空间要开8*maxn。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> MOD=<span class="number">10007</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    LL sum[<span class="number">4</span>],lazy[<span class="number">4</span>];</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,<span class="number">3</span>)t[k].sum[i]=(t[k&lt;&lt;<span class="number">1</span>].sum[i]+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[i])%MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    rep(i,<span class="number">1</span>,<span class="number">3</span>)&#123;</span><br><span class="line">        t[k].lazy[i]=<span class="number">-1</span>;</span><br><span class="line">        t[k].sum[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        t[k].sum[<span class="number">1</span>]=a[l];</span><br><span class="line">        t[k].sum[<span class="number">2</span>]=a[l]*a[l]%MOD;</span><br><span class="line">        t[k].sum[<span class="number">3</span>]=a[l]*a[l]%MOD*a[l]%MOD;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].lazy[<span class="number">3</span>]!=<span class="number">-1</span>)&#123;</span><br><span class="line">        LL c=t[k].lazy[<span class="number">3</span>];</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">1</span>]=c*(t[k&lt;&lt;<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>)%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">2</span>]=c*c*(t[k&lt;&lt;<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>)%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">3</span>]=c*c*c*(t[k&lt;&lt;<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>)%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">3</span>]=c;t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">2</span>]=<span class="number">-1</span>;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">1</span>]=c*(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>)%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">2</span>]=c*c*(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>)%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">3</span>]=c*c*c*(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>)%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">3</span>]=c;t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">2</span>]=<span class="number">-1</span>;</span><br><span class="line">        t[k].lazy[<span class="number">3</span>]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t[k].lazy[<span class="number">2</span>]!=<span class="number">-1</span>)&#123;</span><br><span class="line">        LL c=t[k].lazy[<span class="number">2</span>];</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">1</span>]*c%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">2</span>]=t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">2</span>]*c*c%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">3</span>]=t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">3</span>]*c*c*c%MOD;</span><br><span class="line">        <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">2</span>]!=<span class="number">-1</span>)t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">2</span>]=t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">2</span>]*c%MOD;</span><br><span class="line">        <span class="keyword">else</span> t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">2</span>]=c;</span><br><span class="line">        <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">1</span>]!=<span class="number">-1</span>)t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">1</span>]*c%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">1</span>]*c%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">2</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">2</span>]*c*c%MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">3</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">3</span>]*c*c*c%MOD;</span><br><span class="line">        <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">2</span>]!=<span class="number">-1</span>)t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">2</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">2</span>]*c%MOD;</span><br><span class="line">        <span class="keyword">else</span> t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">2</span>]=c;</span><br><span class="line">        <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">1</span>]!=<span class="number">-1</span>)t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">1</span>]=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">1</span>]*c%MOD;</span><br><span class="line">        t[k].lazy[<span class="number">2</span>]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t[k].lazy[<span class="number">1</span>]!=<span class="number">-1</span>)&#123;</span><br><span class="line">        LL c=t[k].lazy[<span class="number">1</span>];</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">3</span>]+=((t[k&lt;&lt;<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>)*c*c*c+<span class="number">3</span>*c*(t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">2</span>]+t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">1</span>]*c));</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">2</span>]+=((t[k&lt;&lt;<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>)*c*c+<span class="number">2</span>*t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">1</span>]*c);</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].sum[<span class="number">1</span>]+=(c*(t[k&lt;&lt;<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">1</span>]!=<span class="number">-1</span>)t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">1</span>]+=c;</span><br><span class="line">        <span class="keyword">else</span> t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">1</span>]=c;</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">3</span>)t[k&lt;&lt;<span class="number">1</span>].sum[i]%=MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>].lazy[<span class="number">1</span>]%=MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">3</span>]+=(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>)*c*c*c+<span class="number">3</span>*c*(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">2</span>]+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">1</span>]*c);</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">2</span>]+=(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>)*c*c+<span class="number">2</span>*t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">1</span>]*c;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[<span class="number">1</span>]+=c*(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">1</span>]!=<span class="number">-1</span>)t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">1</span>]+=c;</span><br><span class="line">        <span class="keyword">else</span> t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">1</span>]=c;</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">3</span>)t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum[i]%=MOD;</span><br><span class="line">        t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy[<span class="number">1</span>]%=MOD;</span><br><span class="line">        t[k].lazy[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> tp,LL c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)&#123;</span><br><span class="line">        pushdown(k);</span><br><span class="line">        t[k].lazy[tp]=c;</span><br><span class="line">        <span class="keyword">if</span>(tp==<span class="number">1</span>)&#123;</span><br><span class="line">            t[k].sum[<span class="number">3</span>]+=(t[k].r-t[k].l+<span class="number">1</span>)*c*c*c+<span class="number">3</span>*c*(t[k].sum[<span class="number">2</span>]+t[k].sum[<span class="number">1</span>]*c);</span><br><span class="line">            t[k].sum[<span class="number">2</span>]+=(t[k].r-t[k].l+<span class="number">1</span>)*c*c+<span class="number">2</span>*t[k].sum[<span class="number">1</span>]*c;</span><br><span class="line">            t[k].sum[<span class="number">1</span>]+=c*(t[k].r-t[k].l+<span class="number">1</span>);</span><br><span class="line">            rep(i,<span class="number">1</span>,<span class="number">3</span>)t[k].sum[i]%=MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tp==<span class="number">2</span>)&#123;</span><br><span class="line">            t[k].sum[<span class="number">1</span>]*=c;</span><br><span class="line">            t[k].sum[<span class="number">2</span>]*=c*c;</span><br><span class="line">            t[k].sum[<span class="number">3</span>]*=c*c*c;</span><br><span class="line">            rep(i,<span class="number">1</span>,<span class="number">3</span>)t[k].sum[i]%=MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            t[k].sum[<span class="number">1</span>]=c*(t[k].r-t[k].l+<span class="number">1</span>);</span><br><span class="line">            t[k].sum[<span class="number">2</span>]=c*c*(t[k].r-t[k].l+<span class="number">1</span>);</span><br><span class="line">            t[k].sum[<span class="number">3</span>]=c*c*c*(t[k].r-t[k].l+<span class="number">1</span>);</span><br><span class="line">            rep(i,<span class="number">1</span>,<span class="number">3</span>)t[k].sum[i]%=MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R,tp,c);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,tp,c);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)<span class="keyword">return</span> t[k].sum[p];</span><br><span class="line">    pushdown(k);</span><br><span class="line">    <span class="keyword">return</span> (query(k&lt;&lt;<span class="number">1</span>,L,R,p)+query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,p))%MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("P3373_2.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("P3373_2.out","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;MOD)==<span class="number">3</span>)&#123;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">            <span class="keyword">int</span> op,x,y;</span><br><span class="line">            LL c;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;op,&amp;x,&amp;y);</span><br><span class="line">            <span class="keyword">if</span>(op!=<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;c);</span><br><span class="line">                change(<span class="number">1</span>,x,y,op==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>,c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(<span class="number">1</span>,x,y,<span class="number">1</span>)%MOD);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[HDU3974] Assign the task</title>
    <url>/2020/10/07/HDU3974-Assign-the-task/</url>
    <content><![CDATA[<p>每个子树对应个dfs序上的一段区间，在dfs序列上进行线段树修改操作即可。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,lazy,c;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    t[k].lazy=<span class="number">-1</span>;t[k].c=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].lazy==<span class="number">-1</span>)<span class="keyword">return</span>;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>].c=t[k&lt;&lt;<span class="number">1</span>].lazy=t[k].lazy;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].c=t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy=t[k].lazy;</span><br><span class="line">    t[k].lazy=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)&#123;</span><br><span class="line">        t[k].c=c;</span><br><span class="line">        t[k].lazy=c;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R,c);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;x||t[k].r&lt;x)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l==t[k].r)<span class="keyword">return</span> t[k].c;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    <span class="keyword">return</span> query(k&lt;&lt;<span class="number">1</span>,x)^query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w,nxt;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nume=<span class="number">0</span>,last[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    e[++nume]=(Edge)&#123;u,v,w,last[u]&#125;;</span><br><span class="line">    last[u]=nume;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> du[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn],cnt=<span class="number">0</span>,pos[maxn],l[maxn],r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    d[++cnt]=u;pos[u]=cnt;</span><br><span class="line">    l[u]=cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        dfs(v);</span><br><span class="line">    &#125;</span><br><span class="line">    r[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T,cas=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>,++cas);</span><br><span class="line">        cnt=nume=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)du[i]=<span class="number">0</span>,last[i]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            add_edge(v,u,<span class="number">1</span>);</span><br><span class="line">            du[u]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> root=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!du[i])&#123;</span><br><span class="line">                root=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root);</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">            <span class="keyword">char</span> opt;</span><br><span class="line">            <span class="keyword">int</span> x,y;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;opt;</span><br><span class="line">            <span class="keyword">if</span>(opt==<span class="string">'C'</span>)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(<span class="number">1</span>,pos[x]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">                change(<span class="number">1</span>,l[x],r[x],y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[HDU1540] Tunnel Warfare</title>
    <url>/2020/10/06/HDU1540-Tunnel-Warfare/</url>
    <content><![CDATA[<p>树状数组维护前缀和，二分查找x两边最后一个区间和等于区间长度的位置。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Binary_Indexed_Tree&#123;</span><br><span class="line">    <span class="keyword">int</span> c[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(;x&lt;=n;x+=x&amp;-x)c[x]+=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;x;x-=x&amp;-x)res+=c[x];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Binary_Indexed_Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)==<span class="number">2</span>)&#123;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)c[i]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)Change(i,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">            <span class="keyword">char</span> c;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'D'</span>)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">                last=x;</span><br><span class="line">                <span class="keyword">if</span>(Query(x)-Query(x<span class="number">-1</span>)==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                Change(x,<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'Q'</span>)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">                <span class="keyword">if</span>(Query(x)-Query(x<span class="number">-1</span>)==<span class="number">0</span>)&#123;<span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="keyword">int</span> l=<span class="number">1</span>,r=x,ll=x,rr=x;</span><br><span class="line">                <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(Query(x)-Query(mid<span class="number">-1</span>)==x-mid+<span class="number">1</span>)r=mid;</span><br><span class="line">                    <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ll=l;</span><br><span class="line">                l=x,r=n;</span><br><span class="line">                <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                    <span class="keyword">int</span> mid=(l+r&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(Query(mid)-Query(x<span class="number">-1</span>)==mid-x+<span class="number">1</span>)l=mid;</span><br><span class="line">                    <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                rr=l;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,rr-ll+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(last)Change(last,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>[HDU4027] Can you answer these queries?</title>
    <url>/2020/09/29/HDU4027-Can-you-answer-these-queries/</url>
    <content><![CDATA[<p>区间开根号查询区间和。每个区间开很少次数的根号就会全变成1，对于没变成1的暴力对每个点开根号，区间内所有数都是1（区间长等于区间和）的就不对他的子树进行任何操作。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    LL sum;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    t[k].sum=t[k&lt;&lt;<span class="number">1</span>].sum+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        t[k].sum=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R&amp;&amp;t[k].r-t[k].l+<span class="number">1</span>==t[k].sum)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l==t[k].r)&#123;t[k].sum=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(t[k].sum);<span class="keyword">return</span>;&#125;</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)<span class="keyword">return</span> t[k].sum;</span><br><span class="line">    <span class="keyword">return</span> query(k&lt;&lt;<span class="number">1</span>,L,R)+query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,cas=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>,++cas);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">            <span class="keyword">int</span> t,l,r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;t,&amp;l,&amp;r);</span><br><span class="line">            <span class="keyword">if</span>(l&gt;r)swap(l,r);</span><br><span class="line">            <span class="keyword">if</span>(t==<span class="number">0</span>)change(<span class="number">1</span>,l,r);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(<span class="number">1</span>,l,r));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[POJ3264] Balanced Lineup</title>
    <url>/2020/09/29/POJ3264-Balanced-Lineup/</url>
    <content><![CDATA[<p>无修改操作求区间最值。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> st_min[maxn][<span class="number">20</span>],st_max[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> h[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)st_min[i][<span class="number">0</span>]=st_max[i][<span class="number">0</span>]=h[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">            st_max[i][j]=max(st_max[i][j<span class="number">-1</span>],st_max[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">            st_min[i][j]=min(st_min[i][j<span class="number">-1</span>],st_min[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_max</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=log2(r-l+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> max(st_max[l][k],st_max[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_min</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=log2(r-l+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> min(st_min[l][k],st_min[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,Q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;Q);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;h[i]);</span><br><span class="line">    Init(n);</span><br><span class="line">    rep(i,<span class="number">1</span>,Q)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query_max(l,r)-query_min(l,r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>ST表</tag>
      </tags>
  </entry>
  <entry>
    <title>[ZOJ1610] Count the Colors</title>
    <url>/2020/09/29/ZOJ1610-Count-the-Colors/</url>
    <content><![CDATA[<p>区间修改，最后统计每个坐标的颜色。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">8005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,c,lazy;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    t[k].lazy=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        t[k].c=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!t[k].lazy)<span class="keyword">return</span>;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>].c=t[k].lazy;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>].lazy=t[k].lazy;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].c=t[k].lazy;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy=t[k].lazy;</span><br><span class="line">    t[k].lazy=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)&#123;</span><br><span class="line">        t[k].lazy=val;</span><br><span class="line">        t[k].c=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R,val);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;pos||t[k].r&lt;pos)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l==t[k].r)<span class="keyword">return</span> t[k].c;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    <span class="keyword">return</span> query(k&lt;&lt;<span class="number">1</span>,pos)|query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> MAXr=<span class="number">0</span>,MAXc=<span class="number">0</span>;</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">0</span>,<span class="number">8001</span>);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">int</span> l,r,c;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;c);</span><br><span class="line">            change(<span class="number">1</span>,l+<span class="number">1</span>,r,c+<span class="number">1</span>);</span><br><span class="line">            MAXr=max(MAXr,r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> pre=<span class="number">-1</span>,cnt=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,MAXr+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> c=query(<span class="number">1</span>,i);</span><br><span class="line">            MAXc=max(MAXc,c);</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt)&#123;</span><br><span class="line">                    ans[pre]++;</span><br><span class="line">                    pre=c;</span><br><span class="line">                    cnt=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c==pre)cnt++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ans[pre]++;</span><br><span class="line">                pre=c;</span><br><span class="line">                cnt=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,MAXc)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans[i])&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,i<span class="number">-1</span>,ans[i]);</span><br><span class="line">                ans[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[HDU1698] Just a Hook</title>
    <url>/2020/09/28/HDU1698-Just-a-Hook/</url>
    <content><![CDATA[<p>区间修改线段树。答案输出根节点的sum。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,sum,lazy;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    t[k].sum=t[k&lt;&lt;<span class="number">1</span>].sum+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    t[k].lazy=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        t[k].sum=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!t[k].lazy)<span class="keyword">return</span>;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>].lazy=t[k].lazy;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>].sum=(t[k&lt;&lt;<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>)*t[k].lazy;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy=t[k].lazy;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum=(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>)*t[k].lazy;</span><br><span class="line">    t[k].lazy=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)&#123;</span><br><span class="line">        t[k].sum=val*(t[k].r-t[k].l+<span class="number">1</span>);</span><br><span class="line">        t[k].lazy=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R,val);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,val);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T,cas=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">            <span class="keyword">int</span> x,y,z;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">            change(<span class="number">1</span>,x,y,z);</span><br><span class="line">            <span class="comment">// printf("debug:%d\n",t[1].sum);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: The total value of the hook is %d.\n"</span>,++cas,t[<span class="number">1</span>].sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[POJ2528] Mayor&#39;s posters</title>
    <url>/2020/09/28/POJ2528-Mayor-s-posters/</url>
    <content><![CDATA[<p>离散化坐标范围，每次区间修改区间内最晚一次的海报编号，由于答案只需要底层节点所以不用写update，最后单点查询每一个坐标都放了什么海报，统计数量即可。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,c,lazy;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>].lazy=max(t[k&lt;&lt;<span class="number">1</span>].lazy,t[k].lazy);</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>].c=max(t[k&lt;&lt;<span class="number">1</span>].c,t[k].lazy);</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy=max(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy,t[k].lazy);</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].c=max(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].c,t[k].lazy);</span><br><span class="line">    t[k].lazy=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    t[k].lazy=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        t[k].c=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)&#123;</span><br><span class="line">        t[k].c=val;</span><br><span class="line">        t[k].lazy=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R,val);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;pos||t[k].r&lt;pos)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l==t[k].r)<span class="keyword">return</span> t[k].c;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    <span class="keyword">return</span> max(query(k&lt;&lt;<span class="number">1</span>,pos),query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l[maxn],r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T[maxn&lt;&lt;<span class="number">1</span>],n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lisan</span><span class="params">()</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)T[i]=l[i],T[i+n]=r[i];</span><br><span class="line">    sort(T+<span class="number">1</span>,T+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">    m=unique(T+<span class="number">1</span>,T+<span class="number">2</span>*n+<span class="number">1</span>)-T<span class="number">-1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)l[i]=lower_bound(T+<span class="number">1</span>,T+m+<span class="number">1</span>,l[i])-T,r[i]=lower_bound(T+<span class="number">1</span>,T+m+<span class="number">1</span>,r[i])-T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)vis[i]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l[i],&amp;r[i]);</span><br><span class="line">        lisan();</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,m);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)change(<span class="number">1</span>,l[i],r[i],i);</span><br><span class="line">        rep(i,<span class="number">1</span>,m)vis[query(<span class="number">1</span>,i)]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="keyword">if</span>(vis[i])ans++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[POJ3468] A Simple Problem with Integers</title>
    <url>/2020/09/28/POJ3468-A-Simple-Problem-with-Integers/</url>
    <content><![CDATA[<p>区间修改区间求和。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    LL sum,lazy;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    t[k].sum=t[k&lt;&lt;<span class="number">1</span>].sum+t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    t[k].lazy=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        t[k].sum=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>].lazy+=t[k].lazy;    </span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>].sum+=t[k].lazy*(t[k&lt;&lt;<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy+=t[k].lazy;    </span><br><span class="line">    t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum+=t[k].lazy*(t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">    t[k].lazy=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)&#123;</span><br><span class="line">        t[k].lazy+=val;</span><br><span class="line">        t[k].sum+=(t[k].r-t[k].l+<span class="number">1</span>)*val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,L,R,val);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,val);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)<span class="keyword">return</span> t[k].sum;</span><br><span class="line">    pushdown(k);</span><br><span class="line">    <span class="keyword">return</span> query(k&lt;&lt;<span class="number">1</span>,L,R)+query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,Q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;Q);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    rep(i,<span class="number">1</span>,Q)&#123;</span><br><span class="line">        <span class="keyword">char</span> opt;</span><br><span class="line">        <span class="keyword">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;opt;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="string">'Q'</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(<span class="number">1</span>,x,y));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">            change(<span class="number">1</span>,x,y,z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[HDU1754] I Hate It</title>
    <url>/2020/09/28/HDU1754-I-Hate-It/</url>
    <content><![CDATA[<p>单点修改求区间最值。线段树不要忘了开四倍空间。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,max;</span><br><span class="line">&#125;t[maxn*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    t[k].max=max(t[k&lt;&lt;<span class="number">1</span>].max,t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[k].l=l;t[k].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        t[k].max=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos&gt;t[k].r||pos&lt;t[k].l)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l==t[k].r)&#123;</span><br><span class="line">        t[k].max=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>,pos,val);</span><br><span class="line">    change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos,val);</span><br><span class="line">    update(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;R||t[k].r&lt;L)<span class="keyword">return</span> -INF;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)<span class="keyword">return</span> t[k].max;</span><br><span class="line">    <span class="keyword">return</span> max(query(k&lt;&lt;<span class="number">1</span>,L,R),query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)==<span class="number">2</span>)&#123;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="keyword">char</span> opt;</span><br><span class="line">            <span class="keyword">int</span> x,y;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;opt&gt;&gt;x&gt;&gt;y;</span><br><span class="line">            <span class="keyword">if</span>(opt==<span class="string">'Q'</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(<span class="number">1</span>,x,y));</span><br><span class="line">            <span class="keyword">else</span> change(<span class="number">1</span>,x,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[HDU1166] 敌兵布阵</title>
    <url>/2020/09/28/HDU1166-%E6%95%8C%E5%85%B5%E5%B8%83%E9%98%B5/</url>
    <content><![CDATA[<p>单点修改区间求和模板题。用线段树忘记开四倍空间冲了两发都T了，枯了。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Fast_IO&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">int</span> flag=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">        <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">-1</span>;<span class="keyword">if</span>(ch==EOF)<span class="keyword">return</span> <span class="number">0</span>;ch=getchar();&#125;</span><br><span class="line">        <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">        <span class="keyword">return</span> x*=flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Fast_IO;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">namespace Segment_Tree&#123;</span></span><br><span class="line"><span class="comment">    struct Node&#123;</span></span><br><span class="line"><span class="comment">        int l,r,sum;</span></span><br><span class="line"><span class="comment">    &#125;t[maxn];</span></span><br><span class="line"><span class="comment">    inline void update(int k)&#123;</span></span><br><span class="line"><span class="comment">        t[k].sum=t[k&lt;&lt;1].sum+t[k&lt;&lt;1|1].sum;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    void build(int k,int l,int r)&#123;</span></span><br><span class="line"><span class="comment">        t[k].l=l,t[k].r=r;</span></span><br><span class="line"><span class="comment">        if(l==r)&#123;</span></span><br><span class="line"><span class="comment">            t[k].sum=a[l];</span></span><br><span class="line"><span class="comment">            return;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        int mid=l+r&gt;&gt;1;</span></span><br><span class="line"><span class="comment">        build(k&lt;&lt;1,l,mid);</span></span><br><span class="line"><span class="comment">        build(k&lt;&lt;1|1,mid+1,r);</span></span><br><span class="line"><span class="comment">        update(k);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    void change_point(int k,int pos,int val)&#123;</span></span><br><span class="line"><span class="comment">        if(t[k].r&lt;pos||t[k].l&gt;pos)return;</span></span><br><span class="line"><span class="comment">        if(t[k].l==t[k].r)&#123;</span></span><br><span class="line"><span class="comment">            t[k].sum+=val;</span></span><br><span class="line"><span class="comment">            return;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        change_point(k&lt;&lt;1,pos,val);</span></span><br><span class="line"><span class="comment">        change_point(k&lt;&lt;1|1,pos,val);</span></span><br><span class="line"><span class="comment">        update(k);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int query_sum(int k,int L,int R)&#123;</span></span><br><span class="line"><span class="comment">        if(t[k].l&gt;R||t[k].r&lt;L)return 0;</span></span><br><span class="line"><span class="comment">        if(t[k].l&gt;=L&amp;&amp;t[k].r&lt;=R)return t[k].sum;</span></span><br><span class="line"><span class="comment">        return query_sum(k&lt;&lt;1,L,R)+query_sum(k&lt;&lt;1|1,L,R);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">using namespace Segment_Tree;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=n;x+=x&amp;-x)c[x]+=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x-=x&amp;-x)res+=c[x];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T,cas=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,++cas);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)c[i]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)read(a[i]),change(i,a[i]);</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(s,<span class="string">"End"</span>)==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">int</span> i,j;</span><br><span class="line">            read(i);read(j);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(s,<span class="string">"Add"</span>)==<span class="number">0</span>)change(i,j);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(s,<span class="string">"Sub"</span>)==<span class="number">0</span>)change(i,-j);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(j)-query(i<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>[HDU1069] Monkey and Banana</title>
    <url>/2020/09/28/HDU1069-Monkey-and-Banana/</url>
    <content><![CDATA[<p>把所有方块的六种方案都当成独立的方块存起来dp。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cube</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Cube &amp;d)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a==d.a?b&lt;d.b:a&lt;d.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;d[maxn*<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[maxn*<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,cas=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;d[i].a,&amp;d[i].b,&amp;d[i].c);</span><br><span class="line">            d[i+n].a=d[i].a;d[i+n].b=d[i].c;d[i+n].c=d[i].b;</span><br><span class="line">            d[i+<span class="number">2</span>*n].a=d[i].b;d[i+<span class="number">2</span>*n].b=d[i].a;d[i+<span class="number">2</span>*n].c=d[i].c;</span><br><span class="line">            d[i+<span class="number">3</span>*n].a=d[i].b;d[i+<span class="number">3</span>*n].b=d[i].c;d[i+<span class="number">3</span>*n].c=d[i].a;</span><br><span class="line">            d[i+<span class="number">4</span>*n].a=d[i].c;d[i+<span class="number">4</span>*n].b=d[i].a;d[i+<span class="number">4</span>*n].c=d[i].b;</span><br><span class="line">            d[i+<span class="number">5</span>*n].a=d[i].c;d[i+<span class="number">5</span>*n].b=d[i].b;d[i+<span class="number">5</span>*n].c=d[i].a;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(d+<span class="number">1</span>,d+<span class="number">6</span>*n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n*<span class="number">6</span>)&#123;</span><br><span class="line">            dp[i]=d[i].c;</span><br><span class="line">            rep(j,<span class="number">1</span>,i<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(d[i].a&gt;d[j].a&amp;&amp;d[i].b&gt;d[j].b)dp[i]=max(dp[i],dp[j]+d[i].c);</span><br><span class="line">            &#125;</span><br><span class="line">            ans=max(ans,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: maximum height = %d\n"</span>,++cas,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>[POJ1308] Is It A Tree?</title>
    <url>/2020/09/26/POJ1308-Is-It-A-Tree/</url>
    <content><![CDATA[<p>每次连边合并并查集，如果两端点已经在一个并查集里面或者指向端点不是它所在根并查集的根就不是树。注意空树的情况。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; vis;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x]==x?x:f[x]=Find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u,v,cas=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v)==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(u&lt;<span class="number">0</span>&amp;&amp;v&lt;<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(u==<span class="number">0</span>&amp;&amp;v==<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"Case %d is a tree.\n"</span>,++cas);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        f.clear();vis.clear();</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> tot=<span class="number">0</span>,nume=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!vis[u])vis[u]=<span class="number">1</span>,f[u]=u,tot++;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])vis[v]=<span class="number">1</span>,f[v]=v,tot++;</span><br><span class="line">        f[v]=u;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v)==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(u==<span class="number">0</span>&amp;&amp;v==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            nume++;</span><br><span class="line">            <span class="keyword">if</span>(!vis[u])vis[u]=<span class="number">1</span>,f[u]=u,tot++;</span><br><span class="line">            <span class="keyword">if</span>(!vis[v])vis[v]=<span class="number">1</span>,f[v]=v,tot++;</span><br><span class="line">            <span class="keyword">int</span> fu=Find(u),fv=Find(v);</span><br><span class="line">            <span class="keyword">if</span>(fu==fv||fv!=v)flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> f[v]=fu;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nume==tot<span class="number">-1</span>&amp;&amp;flag)<span class="built_in">printf</span>(<span class="string">"Case %d is a tree.\n"</span>,++cas);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Case %d is not a tree.\n"</span>,++cas);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>[ZOJ3261] Connections in Galaxy War</title>
    <url>/2020/09/26/ZOJ3261-Connections-in-Galaxy-War/</url>
    <content><![CDATA[<p>拆解并查集不好做，可以从终状态开始，从后向前处理询问，每到摧毁的操作就合并两个并查集。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">20005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxq=<span class="number">50005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[maxn],a[maxm],b[maxm],x[maxq],y[maxq],ans[maxq];</span><br><span class="line"><span class="built_in">string</span> s[maxq];</span><br><span class="line"><span class="built_in">map</span>&lt;pii,<span class="keyword">bool</span>&gt; vis;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">0</span>,n<span class="number">-1</span>)f[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x]==x?x:f[x]=Find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,Q;</span><br><span class="line">    <span class="keyword">bool</span> first=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!first)<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">        <span class="keyword">else</span> first=<span class="number">0</span>;</span><br><span class="line">        Init(n);</span><br><span class="line">        vis.clear();</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i]);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        rep(i,<span class="number">1</span>,m)<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i],&amp;b[i]);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Q);</span><br><span class="line">        rep(i,<span class="number">1</span>,Q)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">"query"</span>)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x[i]);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">                vis[mp(x[i],y[i])]=vis[mp(y[i],x[i])]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis.count(mp(a[i],b[i])))&#123;</span><br><span class="line">                <span class="keyword">int</span> fx=Find(a[i]),fy=Find(b[i]);</span><br><span class="line">                <span class="keyword">if</span>(fx==fy)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(p[fx]==p[fy])&#123;</span><br><span class="line">                        <span class="keyword">if</span>(fx&gt;fy)f[fx]=fy;</span><br><span class="line">                        <span class="keyword">else</span> f[fy]=fx;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(p[fx]&lt;p[fy])f[fx]=fy;</span><br><span class="line">                    <span class="keyword">else</span> f[fy]=fx;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        per(i,Q,<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">"query"</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> fx=Find(x[i]);</span><br><span class="line">                <span class="keyword">if</span>(p[fx]&gt;p[x[i]])ans[i]=fx;</span><br><span class="line">                <span class="keyword">else</span> ans[i]=<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> fx=Find(x[i]),fy=Find(y[i]);</span><br><span class="line">                <span class="keyword">if</span>(fx==fy)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(p[fx]==p[fy])&#123;</span><br><span class="line">                        <span class="keyword">if</span>(fx&gt;fy)f[fx]=fy;</span><br><span class="line">                        <span class="keyword">else</span> f[fy]=fx;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(p[fx]&lt;p[fy])f[fx]=fy;</span><br><span class="line">                    <span class="keyword">else</span> f[fy]=fx;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,Q)<span class="keyword">if</span>(s[i]==<span class="string">"query"</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>并查集</tag>
        <tag>离线</tag>
      </tags>
  </entry>
  <entry>
    <title>[POJ2912] Rochambeau</title>
    <url>/2020/09/26/POJ2912-Rochambeau/</url>
    <content><![CDATA[<p>枚举每一个玩家，忽略于其相关的场次，如果合法，那么他就有可能是裁判。判断是否合法与【NOI2001】食物链相同。另外，确认裁判是谁的最早场次就是确认其他人不是裁判的最晚场次。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[maxn],p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">0</span>,n<span class="number">-1</span>)f[i]=i,p[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x])<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">int</span> tmp=f[x];</span><br><span class="line">    f[x]=Find(f[x]);</span><br><span class="line">    p[x]=(p[x]+p[tmp])%<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],t[maxn];</span><br><span class="line"><span class="keyword">char</span> c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k)==<span class="number">2</span>)&#123;</span><br><span class="line">        rep(i,<span class="number">1</span>,k)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%c%d"</span>,&amp;a[i],&amp;c[i],&amp;b[i]);</span><br><span class="line">            <span class="keyword">if</span>(c[i]==<span class="string">'='</span>)t[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">'&lt;'</span>)t[i]=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> t[i]=<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>,judge=<span class="number">0</span>,pos=<span class="number">0</span>;</span><br><span class="line">        rep(l,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            Pre(n);</span><br><span class="line">            <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">            rep(i,<span class="number">1</span>,k)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]==l||b[i]==l)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> fa=Find(a[i]),fb=Find(b[i]);</span><br><span class="line">                <span class="keyword">if</span>(fa!=fb)&#123;</span><br><span class="line">                    f[fa]=fb;</span><br><span class="line">                    p[fa]=((<span class="number">3</span>-p[a[i]]+t[i]<span class="number">-1</span>+p[b[i]])%<span class="number">3</span>+<span class="number">3</span>)%<span class="number">3</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((p[a[i]]+<span class="number">3</span>-p[b[i]])%<span class="number">3</span>!=t[i]<span class="number">-1</span>)&#123;flag=<span class="number">1</span>;pos=max(pos,i);<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)ans++;</span><br><span class="line">            <span class="keyword">else</span> judge=l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans==n)<span class="built_in">puts</span>(<span class="string">"Impossible"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ans==n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Player %d can be determined to be the judge after %d lines\n"</span>,judge,pos);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Can not determine"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>种类并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>[POJ2492] A Bug&#39;s Life</title>
    <url>/2020/09/26/POJ2492-A-Bug-s-Life/</url>
    <content><![CDATA[<p>同一并查集内有相互能确认是否同类的点。p[i]=0表示i与f[i]的关系为同类；p[i]=1表示i与f[i]的关系为异类。注意要读取全部数据之后再进行判断。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">1000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[maxn],p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)f[i]=i,p[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x]==x)<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">int</span> tmp=f[x];</span><br><span class="line">    f[x]=Find(tmp);</span><br><span class="line">    p[x]=p[x]^p[tmp];</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxm],b[maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T,cas=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Scenario #%d:\n"</span>,++cas);</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        Init(n);</span><br><span class="line">        rep(i,<span class="number">1</span>,m)<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i],&amp;b[i]);</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">            <span class="keyword">int</span> fx=Find(a[i]),fy=Find(b[i]);</span><br><span class="line">            <span class="keyword">if</span>(fx!=fy)&#123;</span><br><span class="line">                f[fx]=fy;</span><br><span class="line">                p[fx]=p[a[i]]^p[b[i]]^<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(p[a[i]]==p[b[i]])&#123;flag=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"Suspicious bugs found!"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No suspicious bugs found!"</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>种类并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>[POJ1984] Navigation Nightmare</title>
    <url>/2020/09/26/POJ1984-Navigation-Nightmare/</url>
    <content><![CDATA[<p>一个并查集内有彼此能确定相互位置的点，维护分别维护两维上当前点到父节点的相对位置即可。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">40005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[maxn],p[maxn][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)f[i]=i,p[i][<span class="number">0</span>]=p[i][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x]==x)<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">int</span> tmp=f[x];</span><br><span class="line">    f[x]=Find(f[x]);</span><br><span class="line">    p[x][<span class="number">0</span>]=p[x][<span class="number">0</span>]+p[tmp][<span class="number">0</span>];</span><br><span class="line">    p[x][<span class="number">1</span>]=p[x][<span class="number">1</span>]+p[tmp][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],l[maxn];</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="keyword">char</span> d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Question</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,c,id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Question &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c&lt;b.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;q[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)==<span class="number">2</span>)&#123;</span><br><span class="line">        Init(n);</span><br><span class="line">        rep(i,<span class="number">1</span>,m)<span class="built_in">cin</span>&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;l[i]&gt;&gt;d[i];</span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">        rep(i,<span class="number">1</span>,k)<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;q[i].a,&amp;q[i].b,&amp;q[i].c),q[i].id=i;</span><br><span class="line">        sort(q+<span class="number">1</span>,q+k+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,k)&#123;</span><br><span class="line">            <span class="keyword">while</span>(t&lt;q[i].c&amp;&amp;t&lt;m)&#123;</span><br><span class="line">                t++;</span><br><span class="line">                <span class="keyword">if</span>(d[t]==<span class="string">'E'</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> fx=Find(a[t]),fy=Find(b[t]);</span><br><span class="line">                    <span class="keyword">if</span>(fx==fy)<span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        f[fx]=fy;</span><br><span class="line">                        p[fx][<span class="number">0</span>]=-p[a[t]][<span class="number">0</span>]-l[t]+p[b[t]][<span class="number">0</span>];</span><br><span class="line">                        p[fx][<span class="number">1</span>]=-p[a[t]][<span class="number">1</span>]+p[b[t]][<span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(d[t]==<span class="string">'W'</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> fx=Find(a[t]),fy=Find(b[t]);</span><br><span class="line">                    <span class="keyword">if</span>(fx==fy)<span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        f[fx]=fy;</span><br><span class="line">                        p[fx][<span class="number">0</span>]=-p[a[t]][<span class="number">0</span>]+l[t]+p[b[t]][<span class="number">0</span>];</span><br><span class="line">                        p[fx][<span class="number">1</span>]=-p[a[t]][<span class="number">1</span>]+p[b[t]][<span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(d[t]==<span class="string">'N'</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> fx=Find(a[t]),fy=Find(b[t]);</span><br><span class="line">                    <span class="keyword">if</span>(fx==fy)<span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        f[fx]=fy;</span><br><span class="line">                        p[fx][<span class="number">1</span>]=-p[a[t]][<span class="number">1</span>]-l[t]+p[b[t]][<span class="number">1</span>];</span><br><span class="line">                        p[fx][<span class="number">0</span>]=-p[a[t]][<span class="number">0</span>]+p[b[t]][<span class="number">0</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(d[t]==<span class="string">'S'</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> fx=Find(a[t]),fy=Find(b[t]);</span><br><span class="line">                    <span class="keyword">if</span>(fx==fy)<span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        f[fx]=fy;</span><br><span class="line">                        p[fx][<span class="number">1</span>]=-p[a[t]][<span class="number">1</span>]+l[t]+p[b[t]][<span class="number">1</span>];</span><br><span class="line">                        p[fx][<span class="number">0</span>]=-p[a[t]][<span class="number">0</span>]+p[b[t]][<span class="number">0</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(Find(q[i].a)==Find(q[i].b))ans[q[i].id]=<span class="built_in">abs</span>(p[q[i].a][<span class="number">0</span>]-p[q[i].b][<span class="number">0</span>])+<span class="built_in">abs</span>(p[q[i].a][<span class="number">1</span>]-p[q[i].b][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">else</span> ans[q[i].id]=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,k)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>种类并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>[POJ1733] Parity game</title>
    <url>/2020/09/24/POJ1733-Parity-game/</url>
    <content><![CDATA[<p>区间和转化为前缀和的差，当区间[l,r]和为偶数时，sum[r]与sum[l-1]的奇偶性相同，否则相反。 这题卡了好多发TLE，按秩合并也没用，最后把string改成char[]过了。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[maxn],p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)f[i]=i,p[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x])<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">int</span> tmp=f[x];</span><br><span class="line">    f[x]=Find(tmp);</span><br><span class="line">    p[x]=p[x]^p[tmp];</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l[maxn],r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lisan</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;T[i]=l[i];T[i+n]=r[i];&#125;</span><br><span class="line">    sort(T+<span class="number">1</span>,T+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> m=unique(T+<span class="number">1</span>,T+<span class="number">2</span>*n+<span class="number">1</span>)-T<span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// printf("debug:m=%d\n",m);</span></span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;l[i]=lower_bound(T+<span class="number">1</span>,T+m+<span class="number">1</span>,l[i])-T;r[i]=lower_bound(T+<span class="number">1</span>,T+m+<span class="number">1</span>,r[i])-T;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L,Q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;L,&amp;Q);</span><br><span class="line">    rep(i,<span class="number">1</span>,Q)&#123;<span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>,&amp;l[i],&amp;r[i],s[i]);l[i]--;&#125;</span><br><span class="line">    <span class="comment">// rep(i,1,Q)printf("%s\n",s[i]);</span></span><br><span class="line">    <span class="comment">// clock_t beg,fin;</span></span><br><span class="line">    <span class="comment">// beg=clock();</span></span><br><span class="line">    lisan(Q);</span><br><span class="line">    Init(<span class="number">2</span>*Q);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">-1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,Q)&#123;</span><br><span class="line">        <span class="keyword">int</span> fx=Find(l[i]),fy=Find(r[i]);</span><br><span class="line">        <span class="keyword">if</span>(fx!=fy)&#123;</span><br><span class="line">            f[fx]=fy;</span><br><span class="line">            <span class="keyword">if</span>(s[i][<span class="number">0</span>]==<span class="string">'e'</span>)p[fx]=p[l[i]]^p[r[i]];</span><br><span class="line">            <span class="keyword">else</span> p[fx]=p[l[i]]^p[r[i]]^<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i][<span class="number">0</span>]==<span class="string">'e'</span>&amp;&amp;p[l[i]]==p[r[i]])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i][<span class="number">0</span>]==<span class="string">'o'</span>&amp;&amp;p[l[i]]!=p[r[i]])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ans=i<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans==<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Q);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="comment">// fin=clock();</span></span><br><span class="line">    <span class="comment">// printf("time=%lf\n",(double)(fin-beg)/CLOCKS_PER_SEC);</span></span><br><span class="line">    <span class="comment">// rep(i,1,Q)printf("debug:l[%d]=%d r[%d]=%d f[%d]=%d f[%d]=%d p[%d]=%d p[%d]=%d\n",i,l[i],i,r[i],l[i],f[l[i]],r[i],f[r[i]],l[i],p[l[i]],r[i],p[r[i]]);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>离散化</tag>
        <tag>种类并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>[POJ1456] Supermarket</title>
    <url>/2020/09/23/POJ1456-Supermarket/</url>
    <content><![CDATA[<p>按照p从大到小排序，依次放进去，尽量往后放，用并查集维护d[i]前最近的空余位置在哪。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)f[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==f[x]?x:f[x]=Find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> p,d;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Data &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p==b.p?d&gt;b.d:p&gt;b.p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)==<span class="number">1</span>)&#123;</span><br><span class="line">        Init(<span class="number">10000</span>);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;d[i].p,&amp;d[i].d);</span><br><span class="line">        sort(d+<span class="number">1</span>,d+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">int</span> l=Find(d[i].d);</span><br><span class="line">            <span class="keyword">if</span>(l==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// printf("debug:i=%d\n",i);</span></span><br><span class="line">                ans+=d[i].p;</span><br><span class="line">                f[l]=l<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>并查集</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>[POJ1417] True Liars</title>
    <url>/2020/09/23/POJ1417-True-Liars/</url>
    <content><![CDATA[<p>分类讨论可得出：当回答为yes时，x和y为同类；当回答为no时，x和y为异类。种族并查集维护通过数据可推得相关关系的各个元素。dp[i][j]表示到第i个并查集取了j个人的方案数，若dp[tot][p1]!=1，则输出no。至于路径的记录，可以直接用一个二维数组p记录每个dp[i][j]所对应选择是0还是1。由于方案数只有一种时才会输出路径，所以这种方法是正确的。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">605</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> f,p,id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Data &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f==b.f?p&lt;b.p:f&lt;b.f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)d[i].f=i,d[i].p=<span class="number">0</span>,d[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(d[x].f==x)<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">int</span> tmp=d[x].f;</span><br><span class="line">    d[x].f=Find(tmp);</span><br><span class="line">    d[x].p=d[x].p^d[tmp].p;</span><br><span class="line">    <span class="keyword">return</span> d[x].f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn][<span class="number">2</span>],tot=<span class="number">0</span>,id[maxn],b[maxn],dp[maxn][maxn],p[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,p1,p2;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;p1,&amp;p2)==<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;p1==<span class="number">0</span>&amp;&amp;p2==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p));</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m=p1+p2;</span><br><span class="line">        Init(m);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">int</span> x,y;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;s;</span><br><span class="line">            <span class="keyword">int</span> fx=Find(x),fy=Find(y);</span><br><span class="line">            <span class="keyword">if</span>(fx==fy)<span class="keyword">continue</span>;</span><br><span class="line">            d[fx].f=fy;</span><br><span class="line">            <span class="keyword">if</span>(s==<span class="string">"yes"</span>)d[fx].p=d[x].p^d[y].p;</span><br><span class="line">            <span class="keyword">else</span> d[fx].p=d[x].p^d[y].p^<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,m)Find(i);</span><br><span class="line">        sort(d+<span class="number">1</span>,d+m+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> cnt[<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//        printf("debug:tot=%d m=%d\n",tot,m);</span></span><br><span class="line">        rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">            cnt[d[i].p]++;</span><br><span class="line">            id[i]=tot+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>((d[i].f!=d[i+<span class="number">1</span>].f)||(i==(m)))&#123;</span><br><span class="line">                tot++;</span><br><span class="line"><span class="comment">//                printf("debug:i=%d tot=%d\n",i,tot);</span></span><br><span class="line"><span class="comment">//                printf("debug:cnt[0]=%d\n",cnt[0]);</span></span><br><span class="line">                a[tot][<span class="number">0</span>]=cnt[<span class="number">0</span>];</span><br><span class="line">                a[tot][<span class="number">1</span>]=cnt[<span class="number">1</span>];</span><br><span class="line">                cnt[<span class="number">0</span>]=cnt[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        printf("debug:%d\n",a[1][0]);</span></span><br><span class="line"><span class="comment">//        printf("debug:tot=%d m=%d\n",tot,m);</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,tot)&#123;</span><br><span class="line">            rep(j,min(a[i][<span class="number">0</span>],a[i][<span class="number">1</span>]),m)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j-a[i][<span class="number">0</span>]&gt;=<span class="number">0</span>&amp;&amp;dp[i<span class="number">-1</span>][j-a[i][<span class="number">0</span>]])&#123;</span><br><span class="line">                    dp[i][j]+=dp[i<span class="number">-1</span>][j-a[i][<span class="number">0</span>]];</span><br><span class="line">                    p[i][j]=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j-a[i][<span class="number">1</span>]&gt;=<span class="number">0</span>&amp;&amp;dp[i<span class="number">-1</span>][j-a[i][<span class="number">1</span>]])&#123;</span><br><span class="line">                    dp[i][j]+=dp[i<span class="number">-1</span>][j-a[i][<span class="number">1</span>]];</span><br><span class="line">                    p[i][j]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                printf("debug:dp[%d][%d]=%d\n",i,j,dp[i][j]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[tot][p1]!=<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"no"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">            <span class="keyword">int</span> j=p1;</span><br><span class="line">            per(i,tot,<span class="number">1</span>)&#123;</span><br><span class="line">                b[i]=p[i][j];</span><br><span class="line">                j-=a[i][p[i][j]];</span><br><span class="line">            &#125;</span><br><span class="line">            rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">                <span class="keyword">if</span>(d[i].p==b[id[i]])ans.push_back(d[i].id);        </span><br><span class="line">            &#125;</span><br><span class="line">            sort(ans.begin(),ans.end());</span><br><span class="line">            rep(i,<span class="number">0</span>,(<span class="keyword">int</span>)ans.size()<span class="number">-1L</span>L)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"end"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>种类并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>[POJ1182] 食物链</title>
    <url>/2020/09/23/POJ1182-%E9%A3%9F%E7%89%A9%E9%93%BE/</url>
    <content><![CDATA[<p>两个生物在同一并查集内表示他们之间已经确定存在某种关系。令p[i]表示i与他的父亲节点f[i]的关系：0表示同类；1表示i吃f[i]；2表示f[i]吃i。路径压缩的过程中要维护p[i]。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[maxn],p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)f[i]=i,p[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x])<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">int</span> tmp=f[x];</span><br><span class="line">    f[x]=Find(f[x]);</span><br><span class="line">    p[x]=(p[x]+p[tmp])%<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    Pre(n);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,k)&#123;</span><br><span class="line">        <span class="keyword">int</span> t,a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;t,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">if</span>(a&gt;n||b&gt;n)&#123;ans++;<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">2</span>&amp;&amp;a==b)&#123;ans++;<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> fa=Find(a),fb=Find(b);</span><br><span class="line">        <span class="keyword">if</span>(fa!=fb)&#123;</span><br><span class="line">            f[fa]=fb;</span><br><span class="line">            p[fa]=((<span class="number">3</span>-p[a]+t<span class="number">-1</span>+p[b])%<span class="number">3</span>+<span class="number">3</span>)%<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((p[a]+<span class="number">3</span>-p[b])%<span class="number">3</span>!=t<span class="number">-1</span>)ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>种类并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>[ACL Contest 1] Reachable Towns</title>
    <url>/2020/09/22/ACL-Contest-1-Reachable-Towns/</url>
    <content><![CDATA[<p>先按x坐标排序，维护一个联通块最小值单调递减的单调栈，pop的过程中用并查集合并并更新对应联通块内最小值。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&lt;b.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Union_Find&#123;</span><br><span class="line">    <span class="keyword">int</span> f[maxn],sz[maxn],MIN[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)f[i]=i,sz[i]=<span class="number">1</span>,MIN[i]=p[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x==f[x]?x:f[x]=Find(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fx=Find(x),fy=Find(y);</span><br><span class="line">        <span class="keyword">if</span>(fx==fy)<span class="keyword">return</span>;</span><br><span class="line">        f[fx]=fy;sz[fy]+=sz[fx];MIN[fy]=min(MIN[fx],MIN[fy]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Union_Find;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta;</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;p[i].x,&amp;p[i].y),p[i].id=i;</span><br><span class="line">    sort(p+<span class="number">1</span>,p+n+<span class="number">1</span>);</span><br><span class="line">    Init();</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!sta.empty()&amp;&amp;MIN[Find(sta.top())]&lt;p[i].y)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=sta.top();sta.pop();</span><br><span class="line">            Union(i,tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        sta.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)ans[p[i].id]=sz[Find(i)];</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>单调栈</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 94 (Rated for Div. 2)</title>
    <url>/2020/08/27/Educational-Codeforces-Round-94-Rated-for-Div-2/</url>
    <content><![CDATA[<h2 id="a.-string-similarity">A. String Similarity</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">putchar</span>(s[n<span class="number">-1</span>]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-rpg-protagonist">B. RPG Protagonist</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        LL p,f,cnts,cntw,s,w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld%lld"</span>,&amp;p,&amp;f,&amp;cnts,&amp;cntw,&amp;s,&amp;w);</span><br><span class="line">        LL ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,cnts)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i*s&gt;p)<span class="keyword">break</span>;</span><br><span class="line">            LL tmpp=p,tmpf=f,t1=cnts,t2=cntw;</span><br><span class="line">            LL res=i;tmpp-=i*s;t1-=i;</span><br><span class="line">            LL tmp=min(tmpp/w,t2);</span><br><span class="line">            res+=tmp;tmpp-=tmp*w;t2-=tmp;</span><br><span class="line">            <span class="keyword">if</span>(s&lt;w)&#123;</span><br><span class="line">                tmp=min(tmpf/s,t1);</span><br><span class="line">                res+=tmp;tmpf-=tmp*s;t1-=tmp;</span><br><span class="line">                tmp=min(tmpf/w,t2);</span><br><span class="line">                res+=tmp;tmpf-=tmp*w;t2-=tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                tmp=min(tmpf/w,t2);</span><br><span class="line">                res+=tmp;tmpf-=tmp*w;t2-=tmp;</span><br><span class="line">                tmp=min(tmpf/s,t1);</span><br><span class="line">                res+=tmp;tmpf-=tmp*s;t1-=tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            ans=max(ans,res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-binary-string-reconstruction">C. Binary String Reconstruction</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="keyword">char</span> tmp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;x;</span><br><span class="line">        <span class="keyword">int</span> n=s.length();</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)ans[i]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;x&amp;&amp;i+x&lt;n)ans[i]=s[i+x]-<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i+x&gt;=n&amp;&amp;i-x&gt;=<span class="number">0</span>)ans[i]=s[i-x]-<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i+x&lt;n&amp;&amp;i-x&gt;=<span class="number">0</span>)ans[i]=min(s[i+x]-<span class="string">'0'</span>,s[i-x]-<span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=x&amp;&amp;ans[i-x]==<span class="number">1</span>)tmp[i]=<span class="string">'1'</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i+x&lt;n&amp;&amp;ans[i+x]==<span class="number">1</span>)tmp[i]=<span class="string">'1'</span>;</span><br><span class="line">            <span class="keyword">else</span> tmp[i]=<span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)<span class="keyword">if</span>(s[i]!=tmp[i])&#123;flag=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            rep(i,<span class="number">0</span>,n<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">"%d"</span>,ans[i]);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*        </span></span><br><span class="line"><span class="comment">        rep(i,0,n-1)printf("%d",ans[i]);</span></span><br><span class="line"><span class="comment">        putchar('\n');</span></span><br><span class="line"><span class="comment">        rep(i,0,n-1)printf("%c",tmp[i]);</span></span><br><span class="line"><span class="comment">        putchar('\n');</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-zigzags">D. Zigzags</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line">LL sum[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            rep(j,<span class="number">1</span>,n)sum[i][j]=sum[i<span class="number">-1</span>][j];</span><br><span class="line">            sum[i][a[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        LL res=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            rep(j,i+<span class="number">1</span>,n)&#123;</span><br><span class="line">                res+=sum[i<span class="number">-1</span>][a[j]]*(sum[n][a[i]]-sum[j][a[i]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.-clear-the-multiset">E. Clear the Multiset</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l==r)<span class="keyword">return</span> a[l]-h==<span class="number">0</span>?<span class="number">0</span>:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp=a[l]-h,pos=l;</span><br><span class="line">    rep(i,l,r)<span class="keyword">if</span>(a[i]-h&lt;tmp)&#123;tmp=a[i]-h;pos=i;&#125;</span><br><span class="line">    <span class="keyword">return</span> min(r-l+<span class="number">1</span>,tmp+solve(l,pos<span class="number">-1</span>,h+tmp)+solve(pos+<span class="number">1</span>,r,h+tmp));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,solve(<span class="number">1</span>,n,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Global Round 10</title>
    <url>/2020/08/27/Codeforces-Global-Round-10/</url>
    <content><![CDATA[<h2 id="a.-omkar-and-password">A. Omkar and Password</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">int</span> MAX=-INF,MIN=INF;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            MAX=max(MAX,a[i]);</span><br><span class="line">            MIN=min(MIN,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(MAX==MIN)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-omkar-and-infinity-clock">B. Omkar and Infinity Clock</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        LL k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="keyword">int</span> MAX=-INF;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            MAX=max(MAX,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)a[i]=MAX-a[i];</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            rep(i,<span class="number">1</span>,n)<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        MAX=-INF;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)MAX=max(a[i],MAX);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)a[i]=MAX-a[i];</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-omkar-and-waterslide">C. Omkar and Waterslide</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        LL ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">2</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[i<span class="number">-1</span>])ans+=a[i<span class="number">-1</span>]-a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-omkar-and-bed-wars">D. Omkar and Bed Wars</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">2</span>*maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        rep(i,n,n*<span class="number">2</span><span class="number">-1</span>)s[i]=s[i-n];</span><br><span class="line">        <span class="keyword">int</span> pos1=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n<span class="number">-1</span>)<span class="keyword">if</span>(s[i]!=s[<span class="number">0</span>])&#123;pos1=i;<span class="keyword">break</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> pos=pos1,ans=<span class="number">0</span>,len=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(pos&lt;=pos1+n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="comment">// printf("Debug:%d\n",pos);</span></span><br><span class="line">            len=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(s[pos+<span class="number">1</span>]==s[pos]&amp;&amp;pos+<span class="number">1</span>&lt;=pos1+n<span class="number">-1</span>)pos++,len++;</span><br><span class="line">            ans+=len/<span class="number">3</span>;</span><br><span class="line">            <span class="comment">// printf("len:%d\n",len);</span></span><br><span class="line">            pos++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pos1==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(n+<span class="number">2</span>)/<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #663 (Div. 2)</title>
    <url>/2020/08/27/Codeforces-Round-663-Div-2/</url>
    <content><![CDATA[<h2 id="a.-suborrays">A. Suborrays</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">printf</span>(<span class="string">"%d "</span>,i);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-fix-you">B. Fix You</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="keyword">if</span>(s[i][m]!=<span class="string">'D'</span>)ans++;</span><br><span class="line">        rep(i,<span class="number">1</span>,m)<span class="keyword">if</span>(s[n][i]!=<span class="string">'R'</span>)ans++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-cyclic-permutations">C. Cyclic Permutations</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">LL dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    dp[<span class="number">3</span>]=<span class="number">4</span>;</span><br><span class="line">    rep(i,<span class="number">4</span>,n)dp[i]=dp[i<span class="number">-1</span>]*<span class="number">2</span>%MOD;</span><br><span class="line">    LL ans=<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">2</span>,n)ans=ans*i%MOD;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,((ans-dp[n])%MOD+MOD)%MOD);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-505">D. 505</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cul</span><span class="params">(<span class="keyword">char</span> ch1,<span class="keyword">char</span> ch2,<span class="keyword">char</span> ch3,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ch1-<span class="string">'0'</span>==x/<span class="number">4</span>)res++;</span><br><span class="line">    x%=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>(ch2-<span class="string">'0'</span>==x/<span class="number">2</span>)res++;</span><br><span class="line">    x%=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(ch3-<span class="string">'0'</span>==x/<span class="number">1</span>)res++;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((x/<span class="number">4</span>+y/<span class="number">4</span>+x%<span class="number">4</span>/<span class="number">2</span>+y%<span class="number">4</span>/<span class="number">2</span>)%<span class="number">2</span>==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    x%=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>((x/<span class="number">2</span>+y/<span class="number">2</span>+x%<span class="number">2</span>+y%<span class="number">2</span>)%<span class="number">2</span>==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    rep(i,<span class="number">0</span>,n<span class="number">-1</span>)<span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">    <span class="keyword">if</span>(n&gt;=<span class="number">4</span>&amp;&amp;m&gt;=<span class="number">4</span>)<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>||m==<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>||m==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> cnt0=(<span class="keyword">int</span>)(s[<span class="number">0</span>][<span class="number">0</span>]==<span class="string">'1'</span>)+(<span class="keyword">int</span>)(s[<span class="number">1</span>][<span class="number">0</span>]==<span class="string">'1'</span>),cnt1=(<span class="keyword">int</span>)(s[<span class="number">0</span>][<span class="number">1</span>]==<span class="string">'1'</span>)+(<span class="keyword">int</span>)(s[<span class="number">1</span>][<span class="number">1</span>]==<span class="string">'1'</span>);</span><br><span class="line">            dp[<span class="number">1</span>][<span class="number">0</span>]=(cnt1%<span class="number">2</span>==<span class="number">0</span>?<span class="number">0</span>:<span class="number">1</span>)+<span class="built_in">abs</span>(cnt0<span class="number">-1</span>);</span><br><span class="line">            dp[<span class="number">1</span>][<span class="number">1</span>]=<span class="built_in">abs</span>(cnt1<span class="number">-1</span>)+(cnt0%<span class="number">2</span>==<span class="number">0</span>?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">            rep(i,<span class="number">2</span>,m<span class="number">-1</span>)&#123;</span><br><span class="line">                cnt0=(<span class="keyword">int</span>)(s[<span class="number">0</span>][i<span class="number">-1</span>]==<span class="string">'1'</span>)+(<span class="keyword">int</span>)(s[<span class="number">1</span>][i<span class="number">-1</span>]==<span class="string">'1'</span>),cnt1=(<span class="keyword">int</span>)(s[<span class="number">0</span>][i]==<span class="string">'1'</span>)+(<span class="keyword">int</span>)(s[<span class="number">1</span>][i]==<span class="string">'1'</span>);</span><br><span class="line">                dp[i][<span class="number">0</span>]=(cnt1%<span class="number">2</span>==<span class="number">0</span>?<span class="number">0</span>:<span class="number">1</span>)+dp[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">                dp[i][<span class="number">1</span>]=<span class="built_in">abs</span>(cnt1<span class="number">-1</span>)+dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min(dp[m<span class="number">-1</span>][<span class="number">0</span>],dp[m<span class="number">-1</span>][<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> cnt0=(<span class="keyword">int</span>)(s[<span class="number">0</span>][<span class="number">0</span>]==<span class="string">'1'</span>)+(<span class="keyword">int</span>)(s[<span class="number">0</span>][<span class="number">1</span>]==<span class="string">'1'</span>),cnt1=(<span class="keyword">int</span>)(s[<span class="number">1</span>][<span class="number">0</span>]==<span class="string">'1'</span>)+(<span class="keyword">int</span>)(s[<span class="number">1</span>][<span class="number">1</span>]==<span class="string">'1'</span>);</span><br><span class="line">            dp[<span class="number">1</span>][<span class="number">0</span>]=(cnt1%<span class="number">2</span>==<span class="number">0</span>?<span class="number">0</span>:<span class="number">1</span>)+<span class="built_in">abs</span>(cnt0<span class="number">-1</span>);</span><br><span class="line">            dp[<span class="number">1</span>][<span class="number">1</span>]=<span class="built_in">abs</span>(cnt1<span class="number">-1</span>)+(cnt0%<span class="number">2</span>==<span class="number">0</span>?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">            rep(i,<span class="number">2</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">                cnt0=(<span class="keyword">int</span>)(s[i<span class="number">-1</span>][<span class="number">0</span>]==<span class="string">'1'</span>)+(<span class="keyword">int</span>)(s[i<span class="number">-1</span>][<span class="number">1</span>]==<span class="string">'1'</span>),cnt1=(<span class="keyword">int</span>)(s[i][<span class="number">0</span>]==<span class="string">'1'</span>)+(<span class="keyword">int</span>)(s[i][<span class="number">1</span>]==<span class="string">'1'</span>);</span><br><span class="line">                dp[i][<span class="number">0</span>]=(cnt1%<span class="number">2</span>==<span class="number">0</span>?<span class="number">0</span>:<span class="number">1</span>)+dp[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">                dp[i][<span class="number">1</span>]=<span class="built_in">abs</span>(cnt1<span class="number">-1</span>)+dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min(dp[n<span class="number">-1</span>][<span class="number">0</span>],dp[n<span class="number">-1</span>][<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">3</span>)&#123;</span><br><span class="line">            rep(i,<span class="number">0</span>,<span class="number">7</span>)dp[<span class="number">0</span>][i]=cul(s[<span class="number">0</span>][<span class="number">0</span>],s[<span class="number">1</span>][<span class="number">0</span>],s[<span class="number">2</span>][<span class="number">0</span>],i);</span><br><span class="line">            rep(i,<span class="number">1</span>,m<span class="number">-1</span>)&#123;</span><br><span class="line">                rep(j,<span class="number">0</span>,<span class="number">7</span>)&#123;</span><br><span class="line">                    dp[i][j]=INF;</span><br><span class="line">                    rep(k,<span class="number">0</span>,<span class="number">7</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(check(j,k))&#123;</span><br><span class="line">                            dp[i][j]=min(dp[i][j],dp[i<span class="number">-1</span>][k]+cul(s[<span class="number">0</span>][i],s[<span class="number">1</span>][i],s[<span class="number">2</span>][i],j));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// printf("dp[%d][%d]=%d\n",i,j,dp[i][j]);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> ans=INF;</span><br><span class="line">            rep(i,<span class="number">0</span>,<span class="number">7</span>)ans=min(ans,dp[m<span class="number">-1</span>][i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            rep(i,<span class="number">0</span>,<span class="number">7</span>)dp[<span class="number">0</span>][i]=cul(s[<span class="number">0</span>][<span class="number">0</span>],s[<span class="number">0</span>][<span class="number">1</span>],s[<span class="number">0</span>][<span class="number">2</span>],i);</span><br><span class="line">            rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">                rep(j,<span class="number">0</span>,<span class="number">7</span>)&#123;</span><br><span class="line">                    dp[i][j]=INF;</span><br><span class="line">                    rep(k,<span class="number">0</span>,<span class="number">7</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(check(j,k))&#123;</span><br><span class="line">                            dp[i][j]=min(dp[i][j],dp[i<span class="number">-1</span>][k]+cul(s[i][<span class="number">0</span>],s[i][<span class="number">1</span>],s[i][<span class="number">2</span>],j));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> ans=INF;</span><br><span class="line">            rep(i,<span class="number">0</span>,<span class="number">7</span>)ans=min(ans,dp[n<span class="number">-1</span>][i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #662 (Div. 2)</title>
    <url>/2020/08/27/Codeforces-Round-662-Div-2/</url>
    <content><![CDATA[<h2 id="a.-rainbow-dash-fluttershy-and-chess-coloring">A. Rainbow Dash, Fluttershy and Chess Coloring</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(n<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(n<span class="number">-2</span>)/<span class="number">2</span>+<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-applejack-and-storages">B. Applejack and Storages</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[maxn],a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        cnt[a[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt8=<span class="number">0</span>,cnt6=<span class="number">0</span>,cnt2=<span class="number">0</span>,cnt4=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,<span class="number">1e5</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[i]&gt;=<span class="number">8</span>)cnt8++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt[i]&gt;=<span class="number">6</span>)cnt6++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt[i]&gt;=<span class="number">4</span>)cnt4++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt[i]&gt;=<span class="number">2</span>)cnt2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">char</span> op;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;op&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">'+'</span>)&#123;</span><br><span class="line">            cnt[x]++;</span><br><span class="line">            <span class="keyword">if</span>(cnt[x]==<span class="number">2</span>)cnt2++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cnt[x]==<span class="number">4</span>)cnt4++,cnt2--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cnt[x]==<span class="number">6</span>)cnt6++,cnt4--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cnt[x]==<span class="number">8</span>)cnt8++,cnt6--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cnt[x]--;</span><br><span class="line">            <span class="keyword">if</span>(cnt[x]==<span class="number">1</span>)cnt2--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cnt[x]==<span class="number">3</span>)cnt4--,cnt2++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cnt[x]==<span class="number">5</span>)cnt6--,cnt4++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cnt[x]==<span class="number">7</span>)cnt8--,cnt6++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt8&gt;=<span class="number">1</span>||(cnt6&gt;=<span class="number">1</span>&amp;&amp;(cnt4&gt;=<span class="number">1</span>||cnt2&gt;=<span class="number">1</span>))||(cnt4&gt;=<span class="number">2</span>||cnt6&gt;=<span class="number">2</span>)||((cnt6&gt;=<span class="number">1</span>||cnt4&gt;=<span class="number">1</span>)&amp;&amp;cnt2&gt;=<span class="number">2</span>))<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-pinkie-pie-eats-patty-cakes">C. Pinkie Pie Eats Patty-cakes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[maxn],a[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)cnt[i]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            cnt[a[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;<span class="keyword">if</span>(cnt[i])b[++tot]=cnt[i];&#125;</span><br><span class="line">        sort(b+<span class="number">1</span>,b+tot+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> cntt=<span class="number">1</span>;</span><br><span class="line">        per(i,tot<span class="number">-1</span>,<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b[i+<span class="number">1</span>]==b[i])cntt++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf("Debug:%d %d %d\n",n,cntt,b[tot]);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(n-cntt*b[tot])/(b[tot]<span class="number">-1</span>)+cntt<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #661 (Div. 3)</title>
    <url>/2020/08/27/Codeforces-Round-661-Div-3/</url>
    <content><![CDATA[<h2 id="a.-remove-smallest">A. Remove Smallest</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> m=unique(a+<span class="number">1</span>,a+n+<span class="number">1</span>)-a<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[m]-a[<span class="number">1</span>]==m<span class="number">-1</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-gifts-fixing">B. Gifts Fixing</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">int</span> MINA=INF,MINB=INF;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]),MINA=min(MINA,a[i]);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]),MINB=min(MINB,b[i]);</span><br><span class="line">        LL ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">int</span> da=a[i]-MINA,db=b[i]-MINB;</span><br><span class="line">            ans+=min(da,db)+<span class="built_in">abs</span>(da-db);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-boats-competition">C. Boats Competition</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]),mp[a[i]]++;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">2</span>,<span class="number">2</span>*n)&#123;</span><br><span class="line">            <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">            rep(j,<span class="number">1</span>,(i<span class="number">-1</span>)/<span class="number">2</span>)&#123;</span><br><span class="line">                res+=min(mp[j],mp[i-j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)res+=mp[i/<span class="number">2</span>]/<span class="number">2</span>;</span><br><span class="line">            ans=max(ans,res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-binary-string-to-subsequences">D. Binary String To Subsequences</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="comment">// puts("Carls");</span></span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q0,q1;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'0'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(q0.empty())&#123;</span><br><span class="line">                    p[i]=(++cnt);</span><br><span class="line">                    q1.push(i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    p[i]=p[q0.front()];</span><br><span class="line">                    q0.pop();</span><br><span class="line">                    q1.push(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(q1.empty())&#123;</span><br><span class="line">                    p[i]=(++cnt);</span><br><span class="line">                    q0.push(i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    p[i]=p[q1.front()];</span><br><span class="line">                    q1.pop();</span><br><span class="line">                    q0.push(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">"%d "</span>,p[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>【持续更新】常用STL</title>
    <url>/2020/08/01/%E3%80%90%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%91%E5%B8%B8%E7%94%A8STL/</url>
    <content><![CDATA[<p>总结了一些用到过的STL函数</p>
<a id="more"></a>
<h3 id="on求容器中第k小">O(n)求容器中第k小</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">nth_element(a+<span class="number">1</span>,a+k,a+n+<span class="number">1</span>);<span class="comment">//无返回值，作用是将第k小的数放到下标为k的位置</span></span><br><span class="line">nth_element(a+<span class="number">1</span>,a+k,a+n+<span class="number">1</span>,cmp);<span class="comment">//cmp为自定义比较函数</span></span><br></pre></td></tr></table></figure>
<h3 id="迭代器">迭代器</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以set&lt;int&gt;为例</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;<span class="comment">//声明</span></span><br><span class="line">prev(it)<span class="comment">//上一个</span></span><br><span class="line">next(it)<span class="comment">//下一个</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=s.begin();it!=s.end();++it)&#123;...&#125;<span class="comment">//用迭代器遍历容器</span></span><br></pre></td></tr></table></figure>
<h3 id="无序map">无序map</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">unorder_map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;<span class="comment">//可O(1)查询，但内部无序</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串整行读取">字符串整行读取</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>,s);<span class="comment">//多组数据：while(getline(cin,s))&#123;...&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串子串">字符串子串</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"abcdefg"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s.substr(<span class="number">1</span>,<span class="number">3</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//第一个参数是起始下标，第二个参数是截取长度</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s.substr(<span class="number">4</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//只有一个参数起始下标时，表示从起始下标截取到字符串结尾</span></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">bcd</span></span><br><span class="line"><span class="comment">efg</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>知识点总结</tag>
      </tags>
  </entry>
  <entry>
    <title>【持续更新】数学公式</title>
    <url>/2020/07/16/%E3%80%90%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%91%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<p>总结了一些见到过的数学公式。</p>
<a id="more"></a>
<h3 id="盛金公式">盛金公式</h3>
<blockquote>
<p>用于判别和计算一元三次方程的解</p>
</blockquote>
<p><img src="/2020/07/16/%E3%80%90%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%91%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F/盛金公式1.JPG"></p>
<p><img src="/2020/07/16/%E3%80%90%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%91%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F/盛金公式2.JPG"></p>
<p><img src="/2020/07/16/%E3%80%90%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%91%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F/盛金公式3.JPG"></p>
<p><img src="/2020/07/16/%E3%80%90%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%91%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F/盛金公式4.JPG"></p>
<h3 id="海伦公式">海伦公式</h3>
<blockquote>
<p>已知三角形三边长，计算三角形面积</p>
</blockquote>
<p><span class="math display">\[S=\sqrt{p(p-a)(p-b)(p-c)}\]</span></p>
<p>其中p为半周长：<span class="math display">\[p=(a+b+c)/2\]</span></p>
<h3 id="二项式定理">二项式定理</h3>
<blockquote>
<p>展开<span class="math inline">\((a+b)^n\)</span>或化简<span class="math inline">\(\sum_{r=0}^{n}C_{n}^{r}a^{n-r}b^{r}\)</span></p>
</blockquote>
<p><img src="/2020/07/16/%E3%80%90%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%91%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F/二项式定理.svg"></p>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>知识点总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 91 (Rated for Div. 2)</title>
    <url>/2020/07/14/Educational-Codeforces-Round-91-Rated-for-Div-2/</url>
    <content><![CDATA[<h2 id="a.-three-indices">A. Three Indices</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],l[maxn],r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,ans1,ans2,ans3;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        l[<span class="number">0</span>]=INF;r[n+<span class="number">1</span>]=INF;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)l[i]=min(l[i<span class="number">-1</span>],a[i]);</span><br><span class="line">        per(i,n,<span class="number">1</span>)r[i]=min(r[i+<span class="number">1</span>],a[i]);</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">2</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;l[i<span class="number">-1</span>]&amp;&amp;a[i]&gt;r[i+<span class="number">1</span>])&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                ans2=i;</span><br><span class="line">                rep(j,<span class="number">1</span>,i<span class="number">-1</span>)<span class="keyword">if</span>(a[j]&lt;a[i])&#123;ans1=j;<span class="keyword">break</span>;&#125;</span><br><span class="line">                per(j,n,i+<span class="number">1</span>)<span class="keyword">if</span>(a[j]&lt;a[i])&#123;ans3=j;<span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,ans1,ans2,ans3);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-universal-solution">B. Universal Solution</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">int</span> n=s.length();</span><br><span class="line">        <span class="keyword">int</span> cnt1=<span class="number">0</span>,cnt2=<span class="number">0</span>,cnt3=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'R'</span>)cnt1++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'P'</span>)cnt2++;</span><br><span class="line">            <span class="keyword">else</span> cnt3++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt1&gt;=cnt2&amp;&amp;cnt1&gt;=cnt3)&#123;</span><br><span class="line">            rep(i,<span class="number">0</span>,n<span class="number">-1</span>)<span class="built_in">putchar</span>(<span class="string">'P'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt2&gt;=cnt1&amp;&amp;cnt2&gt;=cnt3)&#123;</span><br><span class="line">            rep(i,<span class="number">0</span>,n<span class="number">-1</span>)<span class="built_in">putchar</span>(<span class="string">'S'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            rep(i,<span class="number">0</span>,n<span class="number">-1</span>)<span class="built_in">putchar</span>(<span class="string">'R'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-create-the-teams">C. Create The Teams</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,x,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;x);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        per(i,n,<span class="number">1</span>)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span>(cnt*a[i]&gt;=x)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">                cnt=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-berserk-and-fireball">D. Berserk And Fireball</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn],b[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;LL,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line">LL x,y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ST&#123;</span><br><span class="line">    LL st[maxn][<span class="number">20</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">                st[i][j]=max(st[i][j<span class="number">-1</span>],st[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">query_max</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k=log2(r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> max(st[l][k],st[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ST;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%lld%d%lld"</span>,&amp;n,&amp;m,&amp;x,&amp;k,&amp;y);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    a[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)st[i][<span class="number">0</span>]=a[i];</span><br><span class="line">    Init();</span><br><span class="line">    rep(i,<span class="number">1</span>,m)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;b[i]);</span><br><span class="line">    b[m+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,m+<span class="number">1</span>)mp[b[i]]=i;</span><br><span class="line">    <span class="keyword">int</span> pre=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">    LL ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mp.count(a[i]))&#123;</span><br><span class="line">            num++;</span><br><span class="line">            <span class="keyword">if</span>(num!=mp[a[i]])&#123;</span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> dis=i-pre<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(dis==<span class="number">0</span>)&#123;pre=i;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(dis&lt;k)&#123;</span><br><span class="line">                    <span class="keyword">int</span> MAX=query_max(pre+<span class="number">1</span>,i<span class="number">-1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(MAX&gt;a[pre]&amp;&amp;MAX&gt;a[i])&#123;</span><br><span class="line">                        flag=<span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        ans+=y*dis;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(x*<span class="number">1.0</span>/k&gt;y)&#123;</span><br><span class="line">                        LL MAX=query_max(pre+<span class="number">1</span>,i<span class="number">-1</span>);</span><br><span class="line">                        <span class="keyword">if</span>(MAX&gt;a[pre]&amp;&amp;MAX&gt;a[i])&#123;</span><br><span class="line">                            ans+=x+(dis-k)*y;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            ans+=y*dis;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        ans+=dis/k*x+dis%k*y;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pre=i;</span><br><span class="line">            <span class="comment">// printf("debug:%d %d\n",i,ans);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #655 (Div. 2)</title>
    <url>/2020/07/14/Codeforces-Round-655-Div-2/</url>
    <content><![CDATA[<h2 id="a.-omkar-and-completion">A. Omkar and Completion</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">printf</span>(<span class="string">"1 "</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-omkar-and-last-class-of-math">B. Omkar and Last Class of Math</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">2</span>,<span class="built_in">sqrt</span>(n))&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,n/i,n/i*(i<span class="number">-1</span>));</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,<span class="number">1</span>,n<span class="number">-1</span>);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-omkar-and-baseball">C. Omkar and Baseball</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            b[i]=(a[i]-i+n)%n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=n;</span><br><span class="line">        <span class="keyword">while</span>(b[l]==<span class="number">0</span>&amp;&amp;l&lt;=r)l++;</span><br><span class="line">        <span class="keyword">while</span>(b[r]==<span class="number">0</span>&amp;&amp;l&lt;=r)r--;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;l)&#123;<span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">bool</span> flag1=<span class="number">1</span>;</span><br><span class="line">        rep(i,l,r)<span class="keyword">if</span>(b[i]==<span class="number">0</span>)flag1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag1)&#123;<span class="built_in">puts</span>(<span class="string">"1"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="built_in">puts</span>(<span class="string">"2"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-omkar-and-circle">D. Omkar and Circle</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn],oddsum[maxn],evensum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        oddsum[i]=oddsum[i<span class="number">-1</span>];</span><br><span class="line">        evensum[i]=evensum[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>)oddsum[i]+=a[i];</span><br><span class="line">        <span class="keyword">else</span> evensum[i]+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans=oddsum[n];</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>)ans=max(ans,oddsum[i]+evensum[n]-evensum[i]);</span><br><span class="line">        <span class="keyword">else</span> ans=max(ans,evensum[i]+oddsum[n]-oddsum[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Global Round 9</title>
    <url>/2020/07/05/Codeforces-Global-Round-9/</url>
    <content><![CDATA[<h2 id="a.-sign-flipping">A. Sign Flipping</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">printf</span>(<span class="string">"%d "</span>,(i&amp;<span class="number">1</span>)?<span class="built_in">abs</span>(a[i]):-<span class="built_in">abs</span>(a[i]));</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-neighbor-grid">B. Neighbor Grid</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">305</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)</span><br><span class="line">            rep(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)</span><br><span class="line">            rep(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">                <span class="keyword">int</span> cnt=<span class="number">4</span>;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">1</span>)cnt--;</span><br><span class="line">                <span class="keyword">if</span>(i==n)cnt--;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">1</span>)cnt--;</span><br><span class="line">                <span class="keyword">if</span>(j==m)cnt--;</span><br><span class="line">                <span class="keyword">if</span>(a[i][j]&gt;cnt)flag=<span class="number">0</span>;</span><br><span class="line">                a[i][j]=cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">                rep(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-element-extermination">C. Element Extermination</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">300005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">if</span>(a[n]&gt;a[<span class="number">1</span>])<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-replace-by-mex">D. Replace by MEX</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    rep(i,<span class="number">1</span>,n)vis[a[i]]=<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">0</span>,n)<span class="keyword">if</span>(!vis[i])&#123;res=i;<span class="keyword">break</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="keyword">if</span>(a[i]!=i)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[maxn*<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">while</span>(!check())&#123;</span><br><span class="line">            <span class="keyword">int</span> mex=f();</span><br><span class="line">            <span class="comment">// printf("debug:%d\n",mex);</span></span><br><span class="line">            <span class="keyword">if</span>(mex==<span class="number">0</span>)&#123;</span><br><span class="line">                rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[i]!=i)&#123;</span><br><span class="line">                        a[i]=mex;</span><br><span class="line">                        ans[++cnt]=i;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                a[mex]=mex;</span><br><span class="line">                ans[++cnt]=mex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">        rep(i,<span class="number">1</span>,cnt)<span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 90 (Rated for Div. 2)</title>
    <url>/2020/07/05/Educational-Codeforces-Round-90-Rated-for-Div-2/</url>
    <content><![CDATA[<h2 id="a.-donut-shops">A. Donut Shops</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        LL a,b,c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        <span class="keyword">if</span>(a&lt;c)<span class="built_in">printf</span>(<span class="string">"1 "</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1 "</span>);</span><br><span class="line">        <span class="keyword">if</span>(c&lt;a*b)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,b);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-01-game">B. 01 Game</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">int</span> n=s.length();</span><br><span class="line">        <span class="keyword">int</span> cnt0=<span class="number">0</span>,cnt1=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'0'</span>)cnt0++;</span><br><span class="line">            <span class="keyword">else</span> cnt1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> MIN=min(cnt1,cnt0);</span><br><span class="line">        <span class="keyword">if</span>(MIN&amp;<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"DA"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NET"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-pluses-and-minuses">C. Pluses and Minuses</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        LL ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">int</span> n=s.length();</span><br><span class="line">        rep(i,<span class="number">0</span>,n)vis[i]=<span class="number">0</span>;</span><br><span class="line">        sum[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            sum[i]=sum[i<span class="number">-1</span>]+(s[i<span class="number">-1</span>]==<span class="string">'-'</span>?<span class="number">1</span>:<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span>(sum[i]&gt;<span class="number">0</span>&amp;&amp;!vis[sum[i]])&#123;</span><br><span class="line">                ans+=i;</span><br><span class="line">                vis[sum[i]]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=n;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-maximum-sum-on-even-positions">D. Maximum Sum on Even Positions</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL INF=(<span class="number">1L</span>L&lt;&lt;<span class="number">60</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line">LL sum[<span class="number">2</span>][maxn],a[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ST&#123;</span><br><span class="line">    LL st[<span class="number">2</span>][maxn][<span class="number">20</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">                st[<span class="number">0</span>][i][j]=max(st[<span class="number">0</span>][i][j<span class="number">-1</span>],st[<span class="number">0</span>][i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">                st[<span class="number">1</span>][i][j]=max(st[<span class="number">1</span>][i][j<span class="number">-1</span>],st[<span class="number">1</span>][i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">query_max</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k=log2(r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> max(st[t][l][k],st[t][r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ST;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        sum[<span class="number">0</span>][<span class="number">0</span>]=sum[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        st[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=sum[<span class="number">1</span>][<span class="number">0</span>]-sum[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        st[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]=-INF;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            sum[<span class="number">0</span>][i]=sum[<span class="number">0</span>][i<span class="number">-1</span>];</span><br><span class="line">            sum[<span class="number">1</span>][i]=sum[<span class="number">1</span>][i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>)sum[<span class="number">1</span>][i]+=a[i];</span><br><span class="line">            <span class="keyword">else</span> sum[<span class="number">0</span>][i]+=a[i];</span><br><span class="line">            st[i&amp;<span class="number">1</span>][i][<span class="number">0</span>]=sum[<span class="number">1</span>][i]-sum[<span class="number">0</span>][i];</span><br><span class="line">            st[(i&amp;<span class="number">1</span>)^<span class="number">1</span>][i][<span class="number">0</span>]=-INF;</span><br><span class="line">        &#125;</span><br><span class="line">        Init();</span><br><span class="line">        LL ans=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            ans=max(ans,sum[<span class="number">0</span>][i]-sum[<span class="number">1</span>][i]+query_max(i&amp;<span class="number">1</span>,<span class="number">0</span>,i<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum[<span class="number">1</span>][n]+ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.-sum-of-digits">E. Sum of Digits</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL INF=(<span class="number">1L</span>L&lt;&lt;<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">cnt</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    LL res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        res+=x%<span class="number">10</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LL a[<span class="number">105</span>][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    rep(k,<span class="number">0</span>,<span class="number">9</span>)&#123;</span><br><span class="line">        rep(i,<span class="number">0</span>,<span class="number">99</span>)&#123;</span><br><span class="line">            rep(j,i,i+k)&#123;</span><br><span class="line">                a[i][k]+=cnt(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        LL ans=INF;</span><br><span class="line">        <span class="keyword">int</span> n,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="comment">// puts("Carls");</span></span><br><span class="line">        rep(i,<span class="number">0</span>,<span class="number">99</span>-k)&#123;</span><br><span class="line">            <span class="comment">// printf("debug:%d\n",i);</span></span><br><span class="line">            LL res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>((n-a[i][k]&gt;=<span class="number">0</span>)&amp;&amp;(n-a[i][k])%(k+<span class="number">1</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> z=(n-a[i][k])/(k+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(z%<span class="number">9</span>)res+=z%<span class="number">9</span>;</span><br><span class="line">                z-=(z%<span class="number">9</span>);</span><br><span class="line">                <span class="keyword">while</span>(z)&#123;</span><br><span class="line">                    res=res*<span class="number">10</span>+<span class="number">9</span>;</span><br><span class="line">                    z-=<span class="number">9</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ans=min(ans,<span class="number">100</span>*res+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// puts("Carls");</span></span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">17</span>)&#123;</span><br><span class="line">            LL tp=<span class="number">0</span>;</span><br><span class="line">            rep(j,<span class="number">1</span>,i)tp=tp*<span class="number">10</span>+<span class="number">9</span>;</span><br><span class="line">            <span class="keyword">for</span>(LL j=tp-k+<span class="number">1</span>;j&lt;=tp;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;=k;l++)&#123;</span><br><span class="line">                    tmp+=cnt(j+l);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(tmp==n)ans=min(ans,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans==INF)<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #646 (Div. 2)</title>
    <url>/2020/06/02/Codeforces-Round-646-Div-2/</url>
    <content><![CDATA[<h2 id="a.-odd-selection">A. Odd Selection</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;x);</span><br><span class="line">        <span class="keyword">int</span> cnt0=<span class="number">0</span>,cnt1=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">int</span> y;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;y);</span><br><span class="line">            <span class="keyword">if</span>(y%<span class="number">2</span>==<span class="number">0</span>)cnt0++;</span><br><span class="line">            <span class="keyword">else</span> cnt1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x==n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt1%<span class="number">2</span>==<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt0==<span class="number">0</span>&amp;&amp;x%<span class="number">2</span>==<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cnt1==<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-subsequence-hate">B. Subsequence Hate</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum[maxn][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">int</span> n=s.length();</span><br><span class="line">        <span class="keyword">int</span> cnt0=<span class="number">0</span>,cnt1=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            sum[i][<span class="number">0</span>]=sum[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">            sum[i][<span class="number">1</span>]=sum[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">            sum[i][s[i<span class="number">-1</span>]-<span class="string">'0'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=INF;</span><br><span class="line">        rep(i,<span class="number">0</span>,n)&#123;</span><br><span class="line">            ans=min(ans,sum[i][<span class="number">0</span>]+sum[n][<span class="number">1</span>]-sum[i][<span class="number">1</span>]);</span><br><span class="line">            ans=min(ans,sum[i][<span class="number">1</span>]+sum[n][<span class="number">0</span>]-sum[i][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-game-on-leaves">C. Game On Leaves</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> last[maxn],nume=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[++nume]=(Edge)&#123;u,v,last[u]&#125;;</span><br><span class="line">    last[u]=nume;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">        <span class="keyword">int</span> n,x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;x);</span><br><span class="line">        rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            d[u]++;d[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>||d[x]==<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"Ayush"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n&amp;<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"Ashish"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Ayush"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-guess-the-maximums">D. Guess The Maximums</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> c[maxn],MAX;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Binary_Search&#123;</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"? %d"</span>,mid-l+<span class="number">1</span>);</span><br><span class="line">        rep(i,l,mid)<span class="built_in">printf</span>(<span class="string">" %d"</span>,i);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">int</span> res;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;res);</span><br><span class="line">        <span class="keyword">return</span> res==MAX;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        l=<span class="number">1</span>,r=n;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid))r=mid;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Binary_Search;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">        rep(i,<span class="number">1</span>,k)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c[i]);</span><br><span class="line">            rep(j,<span class="number">1</span>,c[i])<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"? %d"</span>,n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">printf</span>(<span class="string">" %d"</span>,i);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;MAX);</span><br><span class="line">        <span class="keyword">int</span> pos=do_main();</span><br><span class="line">        rep(i,<span class="number">1</span>,k)&#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">            rep(j,<span class="number">1</span>,c[i])vis[v[i][j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(vis[pos]==<span class="number">0</span>)&#123;</span><br><span class="line">                ans[i]=MAX;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"? %d"</span>,n-c[i]);</span><br><span class="line">                rep(j,<span class="number">1</span>,n)<span class="keyword">if</span>(!vis[j])<span class="built_in">printf</span>(<span class="string">" %d"</span>,j);</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">                fflush(<span class="built_in">stdout</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ans[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"!"</span>);</span><br><span class="line">        rep(i,<span class="number">1</span>,k)<span class="built_in">printf</span>(<span class="string">" %d"</span>,ans[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 88 (Rated for Div. 2)</title>
    <url>/2020/06/02/Educational-Codeforces-Round-88-Rated-for-Div-2/</url>
    <content><![CDATA[<h2 id="a.-berland-poker">A. Berland Poker</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,m,k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">		<span class="keyword">int</span> per=n/k;</span><br><span class="line">		<span class="keyword">int</span> f1=min(per,m);</span><br><span class="line">		m-=f1;</span><br><span class="line">		k--;</span><br><span class="line">		<span class="keyword">int</span> f2=<span class="built_in">ceil</span>(<span class="number">1.0</span>*m/k);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f1-f2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-new-theatre-square">B. New Theatre Square</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn][maxm];</span><br><span class="line"><span class="keyword">int</span> a[maxm],cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,m,x,y;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;x,&amp;y);</span><br><span class="line">		<span class="keyword">int</span> f1=x,f2=min(<span class="number">2</span>*x,y);</span><br><span class="line">		rep(i,<span class="number">1</span>,n)</span><br><span class="line">			rep(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;s[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">			cnt=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">			rep(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i][j]==<span class="string">'*'</span>)&#123;</span><br><span class="line">					ans+=tmp/<span class="number">2</span>*f2+tmp%<span class="number">2</span>*f1;</span><br><span class="line">					tmp=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> tmp++;</span><br><span class="line">			&#125;</span><br><span class="line">			ans+=tmp/<span class="number">2</span>*f2+tmp%<span class="number">2</span>*f1;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-mixing-water">C. Mixing Water</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=(<span class="number">1</span>&lt;&lt;<span class="number">29</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h,c,t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Ternary_Search&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="built_in">fabs</span>((<span class="number">1.0</span>*(x+<span class="number">1</span>)*h+<span class="number">1.0</span>*x*c)/(<span class="number">2.0</span>*x+<span class="number">1</span>)-t*<span class="number">1.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(r-l&gt;<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> midd=(mid+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(f(mid)&gt;f(midd))r=midd<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> res=-INF;</span><br><span class="line">        <span class="keyword">int</span> ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f(i)&gt;res)res=f(i),ans=<span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Ternary_Search;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;h,&amp;c,&amp;t);</span><br><span class="line">        <span class="keyword">if</span>(t&lt;=(h+c)/<span class="number">2.0</span>)<span class="built_in">puts</span>(<span class="string">"2"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t&gt;=h)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// printf("debug:%lf\n",f(3));</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,do_main(<span class="number">0</span>,INF));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-yet-another-yet-another-task">D. Yet Another Yet Another Task</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],pos[<span class="number">105</span>],l[maxn],r[maxn],sum[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ST&#123;</span><br><span class="line">    <span class="keyword">int</span> st1[maxn][<span class="number">20</span>],st2[maxn][<span class="number">20</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rep(i,<span class="number">0</span>,n)st1[i][<span class="number">0</span>]=sum[i],st2[i][<span class="number">0</span>]=sum[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">                st1[i][j]=max(st1[i][j<span class="number">-1</span>],st1[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">                st2[i][j]=min(st2[i][j<span class="number">-1</span>],st2[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query_max</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k=log2(r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> max(st1[l][k],st1[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query_min</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k=log2(r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> min(st2[l][k],st2[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ST;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)l[i]=<span class="number">1</span>,r[i]=n;</span><br><span class="line">    <span class="built_in">memset</span>(pos,<span class="number">-1</span>,<span class="keyword">sizeof</span>(pos));</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        pos[a[i]+<span class="number">30</span>]=i;</span><br><span class="line">        rep(j,a[i]+<span class="number">31</span>,<span class="number">60</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pos[j]!=<span class="number">-1</span>)l[i]=max(l[i],pos[j]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(pos,<span class="number">-1</span>,<span class="keyword">sizeof</span>(pos));</span><br><span class="line">    per(i,n,<span class="number">1</span>)&#123;</span><br><span class="line">        pos[a[i]+<span class="number">30</span>]=i;</span><br><span class="line">        rep(j,a[i]+<span class="number">31</span>,<span class="number">60</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pos[j]!=<span class="number">-1</span>)r[i]=min(r[i],pos[j]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">    Init();</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(l[i]==i&amp;&amp;r[i]==i)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l[i]==i)&#123;</span><br><span class="line">            <span class="keyword">int</span> rr=query_max(i+<span class="number">1</span>,r[i]);</span><br><span class="line">            ans=max(ans,rr-sum[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(r[i]==i)&#123;</span><br><span class="line">            <span class="keyword">int</span> ll=query_min(l[i]<span class="number">-1</span>,i<span class="number">-2</span>);</span><br><span class="line">            ans=max(ans,sum[i<span class="number">-1</span>]-ll);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> ll=query_min(l[i]<span class="number">-1</span>,i<span class="number">-2</span>);</span><br><span class="line">            <span class="keyword">int</span> rr=query_max(i+<span class="number">1</span>,r[i]);</span><br><span class="line">            ans=max(ans,sum[i<span class="number">-1</span>]-ll);</span><br><span class="line">            ans=max(ans,rr-sum[i]);</span><br><span class="line">            ans=max(ans,rr-ll-a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="comment">// rep(i,1,n)printf("l[%d]=%d r[%d]=%d\n",i,l[i],i,r[i]);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.-modular-stability">E. Modular Stability</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500005</span>;</span><br><span class="line"><span class="keyword">const</span> LL MOD=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Quick_Pow&#123;</span><br><span class="line">    <span class="function">LL <span class="title">do_main</span><span class="params">(LL a,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        LL r=<span class="number">1</span>,base=a;</span><br><span class="line">        <span class="keyword">while</span>(k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k&amp;<span class="number">1</span>)r=(r*base)%MOD;</span><br><span class="line">            base=(base*base)%MOD;</span><br><span class="line">            k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Quick_Pow;</span><br><span class="line"></span><br><span class="line">LL s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(LL n,LL m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==m)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> s[n]*do_main(s[m],MOD<span class="number">-2</span>)%MOD*do_main(s[n-m],MOD<span class="number">-2</span>)%MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL n,k,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;k);</span><br><span class="line">    s[<span class="number">0</span>]=<span class="number">1</span>;s[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">2</span>,n)s[i]=s[i<span class="number">-1</span>]*i%MOD;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=n/i;</span><br><span class="line">        <span class="keyword">if</span>(cnt&gt;=k)&#123;</span><br><span class="line">            ans+=C(cnt<span class="number">-1</span>,k<span class="number">-1</span>);</span><br><span class="line">            ans%=MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #645 (Div. 2)</title>
    <url>/2020/06/02/Codeforces-Round-645-Div-2/</url>
    <content><![CDATA[<h2 id="a.-park-lighting">A. Park Lighting</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(n*m+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-maria-breaks-the-self-isolation">B. Maria Breaks the Self-isolation</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		per(i,n,<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&lt;=i)&#123;</span><br><span class="line">				ans=i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-celex-update">C. Celex Update</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> x1,x2,y1,y2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">        LL dx=x2-x1,dy=y2-y1;</span><br><span class="line">        LL n=dx+dy,k=dx;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(n-k+<span class="number">1</span>+n)*k/<span class="number">2</span>-(<span class="number">1</span>+k)*k/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #639 (Div. 2)</title>
    <url>/2020/05/08/Codeforces-Round-639-Div-2/</url>
    <content><![CDATA[<h2 id="a.-puzzle-pieces">A. Puzzle Pieces</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>||m==<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>&amp;&amp;m==<span class="number">2</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-card-constructions">B. Card Constructions</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line">LL sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;i++)sum[i]=<span class="number">3.0</span>/<span class="number">2.0</span>*i*i+i/<span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,res=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">while</span>(n&gt;=sum[<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=upper_bound(sum+<span class="number">1</span>,sum+<span class="number">100001</span>,n)-sum<span class="number">-1</span>;</span><br><span class="line">            <span class="comment">// printf("debug:%d %lld\n",n,sum[tmp]);</span></span><br><span class="line">            n-=sum[tmp];</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-hilberts-hotel">C. Hilbert's Hotel</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)vis[i]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            a[i]%=n;</span><br><span class="line">            a[i]+=n;</span><br><span class="line">            a[i]%=n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tar=(i+a[i])%n;</span><br><span class="line">            <span class="comment">// printf("debug:%d %d\n",tar,vis[tar]);</span></span><br><span class="line">            <span class="keyword">if</span>(vis[tar])&#123;flag=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> vis[tar]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-monopole-magnets">D. Monopole Magnets</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">1</span>||x&gt;n||y&lt;<span class="number">1</span>||y&gt;m)<span class="keyword">return</span>;</span><br><span class="line">    vis[x][y]=<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">0</span>,<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> xx=x+dx[i],yy=y+dy[i];</span><br><span class="line">        <span class="keyword">if</span>(s[xx][yy]==<span class="string">'#'</span>&amp;&amp;!vis[xx][yy])bfs(xx,yy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> cnt1=<span class="number">0</span>,cnt2=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;=m)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i][j]==<span class="string">'.'</span>)j++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">1</span>&amp;&amp;s[i][j]==<span class="string">'#'</span>)&#123;<span class="built_in">puts</span>(<span class="string">"-1"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i][j]=<span class="string">'#'</span>)&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(j&lt;=m&amp;&amp;s[i][j]==<span class="string">'#'</span>)j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)cnt1++;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i][j]==<span class="string">'.'</span>)i++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">1</span>&amp;&amp;s[i][j]==<span class="string">'#'</span>)&#123;<span class="built_in">puts</span>(<span class="string">"-1"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i][j]=<span class="string">'#'</span>)&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(i&lt;=n&amp;&amp;s[i][j]==<span class="string">'#'</span>)i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)cnt2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((cnt1==<span class="number">0</span>&amp;&amp;cnt2!=<span class="number">0</span>)||(cnt1!=<span class="number">0</span>&amp;&amp;cnt2==<span class="number">0</span>))&#123;<span class="built_in">puts</span>(<span class="string">"-1"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">        rep(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i][j]==<span class="string">'#'</span>&amp;&amp;!vis[i][j])&#123;</span><br><span class="line">                ans++;</span><br><span class="line">                bfs(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 86 (Rated for Div. 2)</title>
    <url>/2020/05/08/Educational-Codeforces-Round-86-Rated-for-Div-2/</url>
    <content><![CDATA[<h2 id="a.-road-to-zero">A. Road To Zero</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y,a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;x,&amp;y,&amp;a,&amp;b);</span><br><span class="line">        b=min(b,<span class="number">2</span>*a);</span><br><span class="line">        <span class="keyword">int</span> MIN=min(<span class="built_in">abs</span>(x),<span class="built_in">abs</span>(y));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="number">1L</span>L*MIN*b+<span class="number">1L</span>L*<span class="built_in">abs</span>(x-y)*a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-binary-period">B. Binary Period</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        cnt[<span class="number">0</span>]=cnt[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">int</span> n=s.length();</span><br><span class="line">        rep(i,<span class="number">0</span>,n<span class="number">-1</span>)cnt[s[i]-<span class="string">'0'</span>]++;</span><br><span class="line">        <span class="keyword">if</span>(cnt[<span class="number">0</span>]==<span class="number">0</span>||cnt[<span class="number">1</span>]==<span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"10"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #637 (Div. 1)</title>
    <url>/2020/04/25/Codeforces-Round-637-Div-1/</url>
    <content><![CDATA[<h2 id="a.-nastya-and-strange-generator">A. Nastya and Strange Generator</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[i+<span class="number">1</span>]&amp;&amp;a[i]!=a[i+<span class="number">1</span>]<span class="number">-1</span>)flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-nastya-and-scoreboard">B. Nastya and Scoreboard</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> num[<span class="number">10</span>]=&#123;<span class="string">"1110111"</span>,<span class="string">"0010010"</span>,<span class="string">"1011101"</span>,<span class="string">"1011011"</span>,<span class="string">"0111010"</span>,<span class="string">"1101011"</span>,<span class="string">"1101111"</span>,<span class="string">"1010010"</span>,<span class="string">"1111111"</span>,<span class="string">"1111011"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cul</span><span class="params">(<span class="built_in">string</span> a,<span class="built_in">string</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">0</span>,<span class="number">6</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="string">'1'</span>&amp;&amp;b[i]==<span class="string">'0'</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]==b[i])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> res++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Less</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> MIN=INF;</span><br><span class="line">    rep(i,<span class="number">0</span>,<span class="number">9</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cul(s,num[i])==<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> MIN=min(MIN,cul(s,num[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> MIN==INF?<span class="number">-1</span>:MIN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s[maxn];</span><br><span class="line"><span class="keyword">bool</span> dp[maxn][maxn*<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="keyword">if</span>(Less(s[i])==<span class="number">-1</span>)&#123;<span class="built_in">puts</span>(<span class="string">"-1"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="comment">// printf("debug:%d\n",cul(s[1],num[8]));</span></span><br><span class="line">    <span class="comment">// memset(dp,0,sizeof(dp));</span></span><br><span class="line">    dp[n+<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    per(i,n,<span class="number">1</span>)&#123;</span><br><span class="line">        rep(j,<span class="number">0</span>,<span class="number">9</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp;</span><br><span class="line">            <span class="keyword">if</span>((tmp=cul(s[i],num[j]))!=<span class="number">-1</span>)&#123;</span><br><span class="line">                rep(l,tmp,n*<span class="number">7</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(dp[i+<span class="number">1</span>][l-tmp])dp[i][l]=<span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// if(dp[i][l])printf("debug:%d\n",l);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf("%d\n",dp[1][7]);</span></span><br><span class="line">    <span class="keyword">if</span>(!dp[<span class="number">1</span>][k])&#123;<span class="built_in">puts</span>(<span class="string">"-1"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        per(j,<span class="number">9</span>,<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp;</span><br><span class="line">            <span class="keyword">if</span>((tmp=cul(s[i],num[j]))!=<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[i+<span class="number">1</span>][k-tmp])&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d"</span>,j);</span><br><span class="line">                    k-=tmp;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #635 (Div. 2)</title>
    <url>/2020/04/16/Codeforces-Round-635-Div-2/</url>
    <content><![CDATA[<p>紫了</p>
<h2 id="a.-ichihime-and-triangle">A. Ichihime and Triangle</h2>
<p>x=b,y=z=c.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,c,d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,b,c,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-kana-and-dragon-quest-game">B. Kana and Dragon Quest game</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">while</span>(n&amp;&amp;((x/<span class="number">2</span>+<span class="number">10</span>)&lt;x))x=x/<span class="number">2</span>+<span class="number">10</span>,n--;</span><br><span class="line">        <span class="keyword">while</span>(m)x-=<span class="number">10</span>,m--;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-linova-and-kingdom">C. Linova and Kingdom</h2>
<p>按照每个节点深度-子树大小排序。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> last[maxn],nume=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[++nume]=(Edge)&#123;u,v,last[u]&#125;;</span><br><span class="line">    last[u]=nume;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">City</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> dep,sz;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> City &amp;c)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dep-sz==c.dep-c.sz?dep&gt;c.dep:dep-sz&gt;c.dep-c.sz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">    c[u].sz=<span class="number">1</span>;</span><br><span class="line">    c[u].dep=c[f].dep+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(v==f)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            dfs(v,u);</span><br><span class="line">            c[u].sz+=c[v].sz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    LL ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        add_edge(u,v);add_edge(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    sort(c+<span class="number">1</span>,c+n+<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,k)ans+=c[i].dep-c[i].sz;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-xenia-and-colorful-gems">D. Xenia and Colorful Gems</h2>
<p>不妨设x&lt;y&lt;z，枚举y二分最近的x和z。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn],b[maxn],c[maxn];</span><br><span class="line"><span class="keyword">int</span> A,B,C;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;A,&amp;B,&amp;C);</span><br><span class="line">        rep(i,<span class="number">1</span>,A)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        rep(i,<span class="number">1</span>,B)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;b[i]);</span><br><span class="line">        rep(i,<span class="number">1</span>,C)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;c[i]);</span><br><span class="line">        sort(a+<span class="number">1</span>,a+A+<span class="number">1</span>);sort(b+<span class="number">1</span>,b+B+<span class="number">1</span>);sort(c+<span class="number">1</span>,c+C+<span class="number">1</span>);</span><br><span class="line">        LL ans=<span class="number">9223372036854775807</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,A)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b[<span class="number">1</span>]&gt;a[i]||c[C]&lt;a[i]);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> l=upper_bound(b+<span class="number">1</span>,b+B+<span class="number">1</span>,a[i])-b<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">int</span> r=lower_bound(c+<span class="number">1</span>,c+C+<span class="number">1</span>,a[i])-c;</span><br><span class="line">                ans=min(ans,(a[i]-b[l])*(a[i]-b[l])+(a[i]-c[r])*(a[i]-c[r])+(b[l]-c[r])*(b[l]-c[r]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c[<span class="number">1</span>]&gt;a[i]||b[B]&lt;a[i]);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> l=upper_bound(c+<span class="number">1</span>,c+C+<span class="number">1</span>,a[i])-c<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">int</span> r=lower_bound(b+<span class="number">1</span>,b+B+<span class="number">1</span>,a[i])-b;</span><br><span class="line">                ans=min(ans,(a[i]-c[l])*(a[i]-c[l])+(a[i]-b[r])*(a[i]-b[r])+(c[l]-b[r])*(c[l]-b[r]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,B)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[<span class="number">1</span>]&gt;b[i]||c[C]&lt;b[i]);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> l=upper_bound(a+<span class="number">1</span>,a+A+<span class="number">1</span>,b[i])-a<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">int</span> r=lower_bound(c+<span class="number">1</span>,c+C+<span class="number">1</span>,b[i])-c;</span><br><span class="line">                ans=min(ans,(b[i]-a[l])*(b[i]-a[l])+(b[i]-c[r])*(b[i]-c[r])+(a[l]-c[r])*(a[l]-c[r]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c[<span class="number">1</span>]&gt;b[i]||a[A]&lt;b[i]);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> l=upper_bound(c+<span class="number">1</span>,c+C+<span class="number">1</span>,b[i])-c<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">int</span> r=lower_bound(a+<span class="number">1</span>,a+A+<span class="number">1</span>,b[i])-a;</span><br><span class="line">                ans=min(ans,(b[i]-c[l])*(b[i]-c[l])+(b[i]-a[r])*(b[i]-a[r])+(c[l]-a[r])*(c[l]-a[r]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,C)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b[<span class="number">1</span>]&gt;c[i]||a[A]&lt;c[i]);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> l=upper_bound(b+<span class="number">1</span>,b+B+<span class="number">1</span>,c[i])-b<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">int</span> r=lower_bound(a+<span class="number">1</span>,a+A+<span class="number">1</span>,c[i])-a;</span><br><span class="line">                ans=min(ans,(c[i]-b[l])*(c[i]-b[l])+(c[i]-a[r])*(c[i]-a[r])+(b[l]-a[r])*(b[l]-a[r]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[<span class="number">1</span>]&gt;c[i]||b[B]&lt;c[i]);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> l=upper_bound(a+<span class="number">1</span>,a+A+<span class="number">1</span>,c[i])-a<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">int</span> r=lower_bound(b+<span class="number">1</span>,b+B+<span class="number">1</span>,c[i])-b;</span><br><span class="line">                ans=min(ans,(c[i]-a[l])*(c[i]-a[l])+(c[i]-b[r])*(c[i]-b[r])+(a[l]-b[r])*(a[l]-b[r]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #634 (Div. 3)</title>
    <url>/2020/04/14/Codeforces-Round-634-Div-3/</url>
    <content><![CDATA[<h2 id="a.-candies-and-two-sisters">A. Candies and Two Sisters</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(n<span class="number">-1</span>)/<span class="number">2</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-construct-the-string">B. Construct the String</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">int</span> n,a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">int</span> pos=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(pos&lt;=n)&#123;</span><br><span class="line">            rep(i,<span class="number">1</span>,b)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i+pos<span class="number">-1</span>&lt;=n)&#123;</span><br><span class="line">                    s+=<span class="string">'a'</span>+i<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            rep(i,<span class="number">1</span>,a-b)&#123;</span><br><span class="line">                <span class="keyword">if</span>(b+pos<span class="number">-1</span>+i&lt;=n)&#123;</span><br><span class="line">                    s+=<span class="string">'a'</span>+b<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pos+=a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-two-teams-composing">C. Two Teams Composing</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        mp.clear();</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)cnt[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">0</span>,a=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            cnt[x]++;</span><br><span class="line">            b=max(b,cnt[x]);</span><br><span class="line">            <span class="keyword">if</span>(!mp.count(x))&#123;a++;mp[x]=<span class="number">1</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a==b)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min(a,b));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-anti-sudoku">D. Anti-Sudoku</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">9</span>)</span><br><span class="line">            rep(j,<span class="number">1</span>,<span class="number">9</span>)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%01d"</span>,&amp;a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        a[<span class="number">1</span>][<span class="number">1</span>]=a[<span class="number">1</span>][<span class="number">1</span>]%<span class="number">9</span>+<span class="number">1</span>;</span><br><span class="line">        a[<span class="number">2</span>][<span class="number">4</span>]=a[<span class="number">2</span>][<span class="number">4</span>]%<span class="number">9</span>+<span class="number">1</span>;</span><br><span class="line">        a[<span class="number">3</span>][<span class="number">7</span>]=a[<span class="number">3</span>][<span class="number">7</span>]%<span class="number">9</span>+<span class="number">1</span>;</span><br><span class="line">        a[<span class="number">4</span>][<span class="number">2</span>]=a[<span class="number">4</span>][<span class="number">2</span>]%<span class="number">9</span>+<span class="number">1</span>;</span><br><span class="line">        a[<span class="number">5</span>][<span class="number">5</span>]=a[<span class="number">5</span>][<span class="number">5</span>]%<span class="number">9</span>+<span class="number">1</span>;</span><br><span class="line">        a[<span class="number">6</span>][<span class="number">8</span>]=a[<span class="number">6</span>][<span class="number">8</span>]%<span class="number">9</span>+<span class="number">1</span>;</span><br><span class="line">        a[<span class="number">7</span>][<span class="number">3</span>]=a[<span class="number">7</span>][<span class="number">3</span>]%<span class="number">9</span>+<span class="number">1</span>;</span><br><span class="line">        a[<span class="number">8</span>][<span class="number">6</span>]=a[<span class="number">8</span>][<span class="number">6</span>]%<span class="number">9</span>+<span class="number">1</span>;</span><br><span class="line">        a[<span class="number">9</span>][<span class="number">9</span>]=a[<span class="number">9</span>][<span class="number">9</span>]%<span class="number">9</span>+<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">9</span>)&#123;</span><br><span class="line">            rep(j,<span class="number">1</span>,<span class="number">8</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[i][<span class="number">9</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e1.-three-blocks-palindrome-easy-version">E1. Three Blocks Palindrome (easy version)</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxa=<span class="number">27</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[maxn][maxa];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span> &gt; pos;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)rep(j,<span class="number">1</span>,<span class="number">26</span>)cnt[i][j]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            rep(j,<span class="number">1</span>,<span class="number">26</span>)cnt[i][j]=cnt[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            cnt[i][a[i]]++;</span><br><span class="line">            pos[mp(a[i],cnt[i][a[i]])]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">26</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tot=cnt[n][i];</span><br><span class="line">            ans=max(ans,tot);</span><br><span class="line">            rep(j,<span class="number">1</span>,tot/<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> l=pos[mp(i,j)],r=pos[mp(i,tot-j+<span class="number">1</span>)];</span><br><span class="line">                l++,r--;</span><br><span class="line">                rep(k,<span class="number">1</span>,<span class="number">26</span>)&#123;</span><br><span class="line">                    ans=max(<span class="number">2</span>*j+cnt[r][k]-cnt[l<span class="number">-1</span>][k],ans);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e2.-three-blocks-palindrome-hard-version">E2. Three Blocks Palindrome (hard version)</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxa=<span class="number">205</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[maxn][maxa];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span> &gt; pos;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)rep(j,<span class="number">1</span>,<span class="number">200</span>)cnt[i][j]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            rep(j,<span class="number">1</span>,<span class="number">200</span>)cnt[i][j]=cnt[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            cnt[i][a[i]]++;</span><br><span class="line">            pos[mp(a[i],cnt[i][a[i]])]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">200</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tot=cnt[n][i];</span><br><span class="line">            ans=max(ans,tot);</span><br><span class="line">            rep(j,<span class="number">1</span>,tot/<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> l=pos[mp(i,j)],r=pos[mp(i,tot-j+<span class="number">1</span>)];</span><br><span class="line">                l++,r--;</span><br><span class="line">                rep(k,<span class="number">1</span>,<span class="number">200</span>)&#123;</span><br><span class="line">                    ans=max(<span class="number">2</span>*j+cnt[r][k]-cnt[l<span class="number">-1</span>][k],ans);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 85 (Rated for Div. 2)</title>
    <url>/2020/04/12/Educational-Codeforces-Round-85-Rated-for-Div-2/</url>
    <content><![CDATA[<h2 id="a.-level-statistics">A. Level Statistics</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i],&amp;b[i]);</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b[i]&gt;a[i])flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">1</span>&amp;&amp;((a[i]&lt;a[i<span class="number">-1</span>])||(b[i]&lt;b[i<span class="number">-1</span>])))flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">1</span>&amp;&amp;b[i]-b[i<span class="number">-1</span>]&gt;a[i]-a[i<span class="number">-1</span>])flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-middle-class">B. Middle Class</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">double</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%lf"</span>,&amp;n,&amp;x);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;a[i]);</span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        per(i,n,<span class="number">1</span>)&#123;</span><br><span class="line">            sum+=a[i];</span><br><span class="line">            <span class="keyword">if</span>(sum/(n-i+<span class="number">1</span>)&gt;=x)ans=(n-i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-circle-of-monsters">C. Circle of Monsters</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">300005</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn],b[maxn],tmp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,pos=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;a[i],&amp;b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,a[<span class="number">1</span>]);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        LL res=a[<span class="number">1</span>];tmp[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        tmp[<span class="number">2</span>]=max(<span class="number">0L</span>L,a[<span class="number">2</span>]-b[<span class="number">1</span>]);</span><br><span class="line">        rep(i,<span class="number">2</span>,n)&#123;</span><br><span class="line">            res+=tmp[i];</span><br><span class="line">            tmp[i+<span class="number">1</span>]=max(<span class="number">0L</span>L,a[i+<span class="number">1</span>]-b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        LL ans=res;</span><br><span class="line">        res-=a[<span class="number">1</span>];res-=max(<span class="number">0L</span>L,a[n]-b[n<span class="number">-1</span>]);</span><br><span class="line">        res+=a[n];res+=max(<span class="number">0L</span>L,a[<span class="number">1</span>]-b[n]);</span><br><span class="line">        ans=min(ans,res);</span><br><span class="line">        per(i,n<span class="number">-1</span>,<span class="number">2</span>)&#123;</span><br><span class="line">            res-=a[i+<span class="number">1</span>];res-=max(<span class="number">0L</span>L,a[i]-b[i<span class="number">-1</span>]);</span><br><span class="line">            res+=a[i];res+=max(<span class="number">0L</span>L,a[i+<span class="number">1</span>]-b[i]);</span><br><span class="line">            ans=min(ans,res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-minimum-euler-cycle">D. Minimum Euler Cycle</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line">LL sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        LL n,l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;n,&amp;l,&amp;r);</span><br><span class="line">        rep(i,<span class="number">1</span>,n<span class="number">-1</span>)sum[i]=sum[i<span class="number">-1</span>]+n-i;</span><br><span class="line">        <span class="keyword">for</span>(LL i=l;i&lt;=r;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==n*(n<span class="number">-1</span>)+<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"1\n"</span>);<span class="keyword">break</span>;&#125;</span><br><span class="line">            LL tmp=i;</span><br><span class="line">            <span class="keyword">if</span>(tmp&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                tmp=(tmp+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(i!=r)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,(LL)(lower_bound(sum+<span class="number">1</span>,sum+n,tmp)-sum));</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(LL)(lower_bound(sum+<span class="number">1</span>,sum+n,tmp)-sum));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                LL c=tmp/<span class="number">2</span>;</span><br><span class="line">                LL f1=lower_bound(sum+<span class="number">1</span>,sum+n,c)-sum;</span><br><span class="line">                LL f2=c-sum[f1<span class="number">-1</span>]+f1;</span><br><span class="line">                <span class="keyword">if</span>(i!=r)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,f2);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #632 (Div. 2)</title>
    <url>/2020/04/12/Codeforces-Round-632-Div-2/</url>
    <content><![CDATA[<h2 id="a.-little-artem">A. Little Artem</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            rep(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">                <span class="keyword">if</span>(n*m%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i==<span class="number">1</span>&amp;&amp;j==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"B"</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%c"</span>,(i+j)%<span class="number">2</span>==<span class="number">0</span>?<span class="string">'W'</span>:<span class="string">'B'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%c"</span>,(i+j)%<span class="number">2</span>==<span class="number">0</span>?<span class="string">'B'</span>:<span class="string">'W'</span>);</span><br><span class="line">                <span class="keyword">if</span>(j==m)<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-kind-anton">B. Kind Anton</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],MAX[maxn],MIN[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)MAX[i]=MIN[i]=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">        rep(i,<span class="number">2</span>,n)MAX[i]=max(a[i<span class="number">-1</span>],MAX[i<span class="number">-1</span>]),MIN[i]=min(a[i<span class="number">-1</span>],MIN[i<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        per(i,n,<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b[i]&gt;a[i]&amp;&amp;MAX[i]==<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(b[i]==a[i])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(b[i]&lt;a[i]&amp;&amp;MIN[i]==<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;flag=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-eugene-and-an-array">C. Eugene and an array</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Segment_Tree&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> l,r,LL,RR,lazyL,lazyR;</span><br><span class="line">    &#125;t[maxn*<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k1)</span></span>&#123;</span><br><span class="line">        t[k1].RR=min(t[k1&lt;&lt;<span class="number">1</span>].RR==<span class="number">0</span>?n:t[k1&lt;&lt;<span class="number">1</span>].RR,t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].RR==<span class="number">0</span>?n:t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].RR);</span><br><span class="line">        t[k1].LL=max(t[k1&lt;&lt;<span class="number">1</span>].LL==<span class="number">0</span>?<span class="number">1</span>:t[k1&lt;&lt;<span class="number">1</span>].LL,t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].LL==<span class="number">0</span>?<span class="number">1</span>:t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].LL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        t[k1].lazyL=<span class="number">1</span>;</span><br><span class="line">        t[k1].lazyR=n;</span><br><span class="line">        t[k1].l=l;t[k1].r=r;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">            t[k1].RR=n;</span><br><span class="line">            t[k1].LL=<span class="number">1</span>;</span><br><span class="line">            t[k1].lazyL=<span class="number">1</span>;</span><br><span class="line">            t[k1].lazyR=n;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        build(k1&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">        build(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        update(k1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k1)</span></span>&#123;</span><br><span class="line">        t[k1].LL=max(t[k1&gt;&gt;<span class="number">1</span>].lazyL,t[k1].LL);</span><br><span class="line">        t[k1].RR=min(t[k1&gt;&gt;<span class="number">1</span>].lazyR,t[k1].RR);</span><br><span class="line">        t[k1].lazyL=max(t[k1].lazyL,t[k1&gt;&gt;<span class="number">1</span>].lazyL);</span><br><span class="line">        t[k1].lazyR=min(t[k1].lazyR,t[k1&gt;&gt;<span class="number">1</span>].lazyR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k1)</span></span>&#123;</span><br><span class="line">        add(k1&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        add(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">        t[k1].lazyL=<span class="number">1</span>;</span><br><span class="line">        t[k1].lazyR=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change_intervalL</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&gt;t[k1].r||R&lt;t[k1].l)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=t[k1].l&amp;&amp;R&gt;=t[k1].r)&#123;</span><br><span class="line">            t[k1].lazyL=max(t[k1].lazyL,k);</span><br><span class="line">            t[k1].LL=max(t[k1].LL,k);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pushdown(k1);</span><br><span class="line">        change_intervalL(k1&lt;&lt;<span class="number">1</span>,L,R,k);</span><br><span class="line">        change_intervalL(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,k);</span><br><span class="line">        update(k1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change_intervalR</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&gt;t[k1].r||R&lt;t[k1].l)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=t[k1].l&amp;&amp;R&gt;=t[k1].r)&#123;</span><br><span class="line">            t[k1].lazyR=min(t[k1].lazyR,k);</span><br><span class="line">            t[k1].RR=min(t[k1].RR,k);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pushdown(k1);</span><br><span class="line">        change_intervalR(k1&lt;&lt;<span class="number">1</span>,L,R,k);</span><br><span class="line">        change_intervalR(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,k);</span><br><span class="line">        update(k1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">queryL</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&gt;t[k1].r||R&lt;t[k1].l)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=t[k1].l&amp;&amp;R&gt;=t[k1].r)&#123;</span><br><span class="line">            <span class="keyword">return</span> t[k1].LL;</span><br><span class="line">        &#125;</span><br><span class="line">        pushdown(k1);</span><br><span class="line">        <span class="keyword">return</span> max(queryL(k1&lt;&lt;<span class="number">1</span>,L,R),queryL(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">queryR</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&gt;t[k1].r||R&lt;t[k1].l)<span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=t[k1].l&amp;&amp;R&gt;=t[k1].r)&#123;</span><br><span class="line">            <span class="keyword">return</span> t[k1].RR;</span><br><span class="line">        &#125;</span><br><span class="line">        pushdown(k1);</span><br><span class="line">        <span class="keyword">return</span> min(queryR(k1&lt;&lt;<span class="number">1</span>,L,R),queryR(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Segment_Tree;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;LL,LL&gt; pre;</span><br><span class="line">LL sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">    pre[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre.count(sum[i]))&#123;</span><br><span class="line">            <span class="comment">// printf("debug:sum[%d]=%d\n",i,sum[i]);</span></span><br><span class="line">            change_intervalR(<span class="number">1</span>,<span class="number">1</span>,pre[sum[i]]+<span class="number">1</span>,i<span class="number">-1</span>);</span><br><span class="line">            <span class="comment">// change_intervalL(1,i-1,n,pre[sum[i]]+2);</span></span><br><span class="line">        &#125;</span><br><span class="line">        pre[sum[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf("debug:%d %d %d\n",t[4].l,t[4].r,t[4].RR);</span></span><br><span class="line">    LL ans=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="comment">// printf("R[%d]=%d\n",i,queryR(1,i,i));</span></span><br><span class="line">        ans+=queryR(<span class="number">1</span>,i,i)-i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>April Fools Day Contest 2020</title>
    <url>/2020/04/06/April-Fools-Day-Contest-2020/</url>
    <content><![CDATA[<h2 id="a.-is-it-rated">A. Is it rated?</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-limericks">B. Limericks</h2>
<p>藏头诗，Two Factors。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,ans1=<span class="number">0</span>,ans2=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> m=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">            ans1=i,ans2=n/i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d%d\n"</span>,ans1,ans2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-...and-after-happily-lived-ever-they">C. ...And after happily lived ever they</h2>
<p>将输入数字二进制表示按照标题正确语序顺序变换。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> b[<span class="number">10</span>],ans[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;n)b[<span class="number">5</span>-i]=<span class="number">1</span>;</span><br><span class="line">    ans[<span class="number">0</span>]=b[<span class="number">0</span>],ans[<span class="number">1</span>]=b[<span class="number">5</span>],ans[<span class="number">2</span>]=b[<span class="number">3</span>],ans[<span class="number">3</span>]=b[<span class="number">2</span>],ans[<span class="number">4</span>]=b[<span class="number">4</span>],ans[<span class="number">5</span>]=b[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)<span class="keyword">if</span>(ans[<span class="number">5</span>-i])a+=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-again">D. Again?</h2>
<p>看最后一位奇偶性。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> len=s.length();</span><br><span class="line">    <span class="keyword">if</span>((s[len<span class="number">-1</span>]-<span class="string">'0'</span>)&amp;<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 84 (Rated for Div. 2)</title>
    <url>/2020/04/06/Educational-Codeforces-Round-84-Rated-for-Div-2-1/</url>
    <content><![CDATA[<h2 id="a.-sum-of-odd-integers">A. Sum of Odd Integers</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;_);_;_--)&#123;</span><br><span class="line">        LL n,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="keyword">if</span>((k&amp;<span class="number">1</span>)!=(n&amp;<span class="number">1</span>))<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n&lt;k*k)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-princesses-and-princes">B. Princesses and Princes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],p[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);T;T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">int</span> n,k,cnt=<span class="number">0</span>,tar=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[p[j]])&#123;</span><br><span class="line">                    a[i]=p[j];</span><br><span class="line">                    vis[p[j]]=<span class="number">1</span>;</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)cnt++;</span><br><span class="line">            <span class="keyword">else</span> tar=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt==n)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"OPTIMAL"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"IMPROVE"</span>);</span><br><span class="line">            <span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">                    tmp=i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,tar,tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-game-with-chips">C. Game with Chips</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">202</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sx[maxn],sy[maxn],tx[maxn],ty[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;sx[i],&amp;sy[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;tx[i],&amp;ty[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">2</span>*m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">putchar</span>(<span class="string">'R'</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">putchar</span>(<span class="string">'L'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">2</span>*n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">putchar</span>(<span class="string">'U'</span>);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">putchar</span>(<span class="string">'D'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n+m+n*m<span class="number">-1</span>);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">putchar</span>(<span class="string">'U'</span>);</span><br><span class="line">        rep(i,<span class="number">1</span>,m)<span class="built_in">putchar</span>(<span class="string">'L'</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++)<span class="built_in">putchar</span>(<span class="string">'R'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++)<span class="built_in">putchar</span>(<span class="string">'L'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i!=n) <span class="built_in">putchar</span>(<span class="string">'D'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Global Round 7</title>
    <url>/2020/03/25/Codeforces-Global-Round-7/</url>
    <content><![CDATA[<h2 id="a.-bad-ugly-numbers">A. Bad Ugly Numbers</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> sum=<span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">3</span>;i--)&#123;</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">'2'</span>);</span><br><span class="line">                sum+=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>((sum+<span class="number">3</span>)%<span class="number">3</span>==<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'2'</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">'3'</span>);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">'3'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-maximums">B. Maximums</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn],x[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;b[i]);</span><br><span class="line">    x[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        a[i]=b[i]+x[i];</span><br><span class="line">        x[i+<span class="number">1</span>]=max(x[i],a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-permutation-partitions">C. Permutation Partitions</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i]);</span><br><span class="line">    LL ans=<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">    per(i,n,n-k+<span class="number">1</span>)res+=i;</span><br><span class="line">    <span class="keyword">int</span> per=<span class="number">-1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i]&gt;n-k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(per!=<span class="number">-1</span>)ans=ans*(i-per)%MOD;</span><br><span class="line">            per=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,res,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 84 (Rated for Div. 2)</title>
    <url>/2020/03/25/Educational-Codeforces-Round-84-Rated-for-Div-2/</url>
    <content><![CDATA[<h2 id="a.-sum-of-odd-integers">A. Sum of Odd Integers</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;_);_;_--)&#123;</span><br><span class="line">        LL n,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="keyword">if</span>((k&amp;<span class="number">1</span>)!=(n&amp;<span class="number">1</span>))<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n&lt;k*k)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-princesses-and-princes">B. Princesses and Princes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],p[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);T;T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">int</span> n,k,cnt=<span class="number">0</span>,tar=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[p[j]])&#123;</span><br><span class="line">                    a[i]=p[j];</span><br><span class="line">                    vis[p[j]]=<span class="number">1</span>;</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)cnt++;</span><br><span class="line">            <span class="keyword">else</span> tar=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt==n)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"OPTIMAL"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"IMPROVE"</span>);</span><br><span class="line">            <span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">                    tmp=i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,tar,tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-game-with-chips">C. Game with Chips</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">202</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sx[maxn],sy[maxn],tx[maxn],ty[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;sx[i],&amp;sy[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;tx[i],&amp;ty[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">2</span>*m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">putchar</span>(<span class="string">'R'</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">putchar</span>(<span class="string">'L'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">2</span>*n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">putchar</span>(<span class="string">'U'</span>);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">putchar</span>(<span class="string">'D'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n+m+n*m<span class="number">-1</span>);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">putchar</span>(<span class="string">'U'</span>);</span><br><span class="line">        rep(i,<span class="number">1</span>,m)<span class="built_in">putchar</span>(<span class="string">'L'</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++)<span class="built_in">putchar</span>(<span class="string">'R'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++)<span class="built_in">putchar</span>(<span class="string">'L'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i!=n) <span class="built_in">putchar</span>(<span class="string">'D'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #628 (Div.2)</title>
    <url>/2020/03/15/Codeforces-Round-628-Div-2/</url>
    <content><![CDATA[<h2 id="a.-ehab-and-gcd">A. EhAb AnD gCd</h2>
<p>输出1和x-1。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,<span class="number">1</span>,x<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-copycopycopycopycopy">B. CopyCopyCopyCopyCopy</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> m=unique(a+<span class="number">1</span>,a+n+<span class="number">1</span>)-a<span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-ehab-and-path-etic-mexs">C. Ehab and Path-etic MEXs</h2>
<p>拓扑排序，先遍历到的边赋值较小。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> nume=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> last[maxn];</span><br><span class="line"><span class="keyword">int</span> du[maxn];</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[++nume]=(Edge)&#123;u,v,last[u]&#125;;</span><br><span class="line">    last[u]=nume;</span><br><span class="line">    du[u]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        add_edge(u,v);add_edge(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(ans,<span class="number">-1</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(du[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            q.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=q.front();q.pop();</span><br><span class="line">        <span class="comment">// printf("debug:%d\n",tmp);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=last[tmp];i;i=e[i].nxt)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans[(i+<span class="number">1</span>)/<span class="number">2</span>]==<span class="number">-1</span>)&#123;</span><br><span class="line">                ans[(i+<span class="number">1</span>)/<span class="number">2</span>]=(++num);</span><br><span class="line">                du[e[i].v]--;</span><br><span class="line">                <span class="keyword">if</span>(du[e[i].v]==<span class="number">1</span>)q.push(e[i].v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-ehab-the-xorcist">D. Ehab the Xorcist</h2>
<p>若u二进制的第i位为1，则答案数组中必须加奇数个(1LL&lt;&lt;i)；第i位为0，偶数个。从大到小贪心。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn],ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL u,v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;u,&amp;v);</span><br><span class="line">    <span class="keyword">if</span>(u&gt;v)<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==u)&#123;</span><br><span class="line">            <span class="keyword">if</span>(u==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"1\n%lld\n"</span>,u);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        per(i,<span class="number">62</span>,<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(u&amp;(<span class="number">1L</span>L&lt;&lt;i))vis[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v-=u;</span><br><span class="line">        a[<span class="number">1</span>]=u;</span><br><span class="line">        ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">62</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(((v/(<span class="number">1L</span>L&lt;&lt;i))&amp;<span class="number">1</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">                    ans=max(ans,(v/(<span class="number">1L</span>L&lt;&lt;i)));</span><br><span class="line">                    rep(j,<span class="number">1</span>,(v/(<span class="number">1L</span>L&lt;&lt;i)))a[j]+=(<span class="number">1L</span>L&lt;&lt;i);</span><br><span class="line">                    v-=(v/(<span class="number">1L</span>L&lt;&lt;i))*(<span class="number">1L</span>L&lt;&lt;i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    ans=max(ans,(v/(<span class="number">1L</span>L&lt;&lt;i))+<span class="number">1</span>);</span><br><span class="line">                    rep(j,<span class="number">2</span>,(v/(<span class="number">1L</span>L&lt;&lt;i))+<span class="number">1</span>)a[j]+=(<span class="number">1L</span>L&lt;&lt;i);</span><br><span class="line">                    v-=(v/(<span class="number">1L</span>L&lt;&lt;i))*(<span class="number">1L</span>L&lt;&lt;i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                v-=(<span class="number">1L</span>L&lt;&lt;i);</span><br><span class="line">                <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">                    ans=max(ans,(v/(<span class="number">1L</span>L&lt;&lt;i)));</span><br><span class="line">                    rep(j,<span class="number">1</span>,(v/(<span class="number">1L</span>L&lt;&lt;i)))a[j]+=(<span class="number">1L</span>L&lt;&lt;i);</span><br><span class="line">                    v-=(v/(<span class="number">1L</span>L&lt;&lt;i))*(<span class="number">1L</span>L&lt;&lt;i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    ans=max(ans,(v/(<span class="number">1L</span>L&lt;&lt;i))+<span class="number">1</span>);</span><br><span class="line">                    rep(j,<span class="number">2</span>,(v/(<span class="number">1L</span>L&lt;&lt;i))+<span class="number">1</span>)a[j]+=(<span class="number">1L</span>L&lt;&lt;i);</span><br><span class="line">                    v-=(v/(<span class="number">1L</span>L&lt;&lt;i))*(<span class="number">1L</span>L&lt;&lt;i);</span><br><span class="line">                &#125;</span><br><span class="line">                v+=(<span class="number">1L</span>L&lt;&lt;i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(v==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(v)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">        rep(i,<span class="number">1</span>,ans)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 83 (Rated for Div. 2)</title>
    <url>/2020/03/10/Educational-Codeforces-Round-83-Rated-for-Div-2/</url>
    <content><![CDATA[<h2 id="a.-two-regular-polygons">A. Two Regular Polygons</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">if</span>(n%m==<span class="number">0</span>||m%n==<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-bogosort">B. Bogosort</h2>
<p>从大到小排序。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-adding-powers">C. Adding Powers</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn],p[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        LL k,MAX=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;n,&amp;k);</span><br><span class="line">        rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]),MAX=max(MAX,a[i]);</span><br><span class="line">        p[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="keyword">for</span>(num=<span class="number">1</span>;p[num<span class="number">-1</span>]*k&lt;=MAX;num++)p[num]=p[num<span class="number">-1</span>]*k;</span><br><span class="line">        <span class="comment">// printf("debug:num=%d\n",num);</span></span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i])&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=num<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(p[j]&lt;=a[i])&#123;</span><br><span class="line">                        <span class="keyword">if</span>(vis[j])&#123;</span><br><span class="line">                            <span class="comment">// printf("debug:a[i]=%lld p[j]=%lld i=%d j=%d\n",a[i],p[j],i,j);</span></span><br><span class="line">                            flag=<span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            vis[j]=<span class="number">1</span>;</span><br><span class="line">                            a[i]-=p[j];</span><br><span class="line">                            <span class="keyword">if</span>(!a[i])<span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(a[i])flag=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-count-the-arrays">D. Count the Arrays</h2>
<p><span class="math display">\[C(m,n-1)*(n-2)*2^{n-3}\]</span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Quick_Pow&#123;</span><br><span class="line">    <span class="function">LL <span class="title">do_main</span><span class="params">(LL a,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        LL r=<span class="number">1</span>,base=a;</span><br><span class="line">        <span class="keyword">while</span>(k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k&amp;<span class="number">1</span>)r=r*base%MOD;</span><br><span class="line">            base=base*base%MOD;</span><br><span class="line">            k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Quick_Pow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;<span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    LL f1=<span class="number">1</span>,f2=<span class="number">1</span>;</span><br><span class="line">    rep(i,m-n+<span class="number">2</span>,m)f1=(f1*i)%MOD;</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>)f2=(f2*i)%MOD;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f1*do_main(f2,MOD<span class="number">-2</span>)%MOD*(n<span class="number">-2</span>)%MOD*do_main(<span class="number">2</span>,n<span class="number">-3</span>)%MOD);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.-array-shrinking">E. Array Shrinking</h2>
<p>两次dp。f[i][j]和<a href="https://www.luogu.com.cn/problem/P3147" target="_blank" rel="noopener">这道</a>一样，dp[i]表示i~n合并成的最小长度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">505</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1205</span>][maxn],dp[maxn],a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        f[a[i]][i]=i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">2</span>,<span class="number">1200</span>)</span><br><span class="line">        rep(j,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!f[i][j])f[i][j]=f[i<span class="number">-1</span>][f[i<span class="number">-1</span>][j]];</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    for(int i=2;i&lt;=5;i++)</span></span><br><span class="line"><span class="comment">        for(int j=1;j&lt;=5;j++)&#123;</span></span><br><span class="line"><span class="comment">            printf("debug:f[%d][%d]=%d\n",i,j,f[i][j]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[n]=<span class="number">1</span>;dp[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    per(i,n<span class="number">-1</span>,<span class="number">1</span>)&#123;</span><br><span class="line">        rep(j,<span class="number">1</span>,<span class="number">1200</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f[j][i])dp[i]=min(dp[i],dp[f[j][i]]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf("debug:dp[%d]=%d\n",i,dp[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #626 (Div. 2, based on Moscow Open Olympiad in Informatics)</title>
    <url>/2020/03/09/Codeforces-Round-626-Div-2-based-on-Moscow-Open-Olympiad-in-Informatics/</url>
    <content><![CDATA[<p>第一场用VSCode打的cf。</p>
<p>手速场，手残了。</p>
<h2 id="a.-even-subset-sum-problem">A. Even Subset Sum Problem</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">int</span> ev=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            <span class="keyword">if</span>(a[i]%<span class="number">2</span>==<span class="number">0</span>)ev=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ev)<span class="built_in">printf</span>(<span class="string">"1\n%d\n"</span>,ev);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n&gt;=<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"2\n1 2\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-count-subrectangles">B. Count Subrectangles</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">400005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line">LL cnta[maxn],cntb[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    rep(i,<span class="number">1</span>,m)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">1</span>)len++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="number">0</span>&amp;&amp;a[i<span class="number">-1</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">            rep(j,<span class="number">1</span>,len)cnta[j]+=(len-j+<span class="number">1</span>);</span><br><span class="line">            len=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,m+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i]==<span class="number">1</span>)len++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b[i]==<span class="number">0</span>&amp;&amp;b[i<span class="number">-1</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">            rep(j,<span class="number">1</span>,len)cntb[j]+=(len-j+<span class="number">1</span>);</span><br><span class="line">            len=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k&amp;&amp;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k%i==<span class="number">0</span>&amp;&amp;k/i&lt;=m)&#123;</span><br><span class="line">            ans+=cnta[i]*cntb[k/i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-unusual-competitions">C. Unusual Competitions</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i=(a);i&gt;=(b);i--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> cnt[maxn][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; sta;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        cnt[i][<span class="number">0</span>]=cnt[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        cnt[i][<span class="number">1</span>]=cnt[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s[i<span class="number">-1</span>]==<span class="string">'('</span>)cnt[i][<span class="number">0</span>]++;</span><br><span class="line">        <span class="keyword">else</span> cnt[i][<span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt[n][<span class="number">0</span>]!=cnt[n][<span class="number">1</span>])<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>,start=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">bool</span> suc=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i<span class="number">-1</span>]==<span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(sta.empty())suc=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> sta.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i<span class="number">-1</span>]==<span class="string">'('</span>)sta.push(s[i<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(cnt[i][<span class="number">0</span>]==cnt[i][<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="comment">// printf("Carls:%d\n",start);</span></span><br><span class="line">                <span class="keyword">if</span>(!suc)ans+=(i-start+<span class="number">1</span>);</span><br><span class="line">                start=i+<span class="number">1</span>;</span><br><span class="line">                suc=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(!sta.empty())sta.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeCraft-20 (Div. 2)</title>
    <url>/2020/03/05/CodeCraft-20-Div-2/</url>
    <content><![CDATA[<h2 id="a.-grade-allocation">A. Grade Allocation</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,m,sum=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x),sum+=x;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min(m,sum));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-string-modification">B. String Modification</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5005</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">string</span> ss[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		s=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)ss[i]=<span class="string">""</span>;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>((n-i+<span class="number">1</span>)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)ss[i]+=s[j<span class="number">-1</span>];</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">1</span>;j--)ss[i]+=s[j<span class="number">-1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)ss[i]+=s[j<span class="number">-1</span>];</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)ss[i]+=s[j<span class="number">-1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">string</span> MIN=ss[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(MIN&gt;ss[i])MIN=ss[i],ans=i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;MIN&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-primitive-primes">C. Primitive Primes</h2>
<p>参考高斯引理的证明过程。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Fast_IO&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> x=<span class="number">0</span>;<span class="keyword">int</span> flag=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">		<span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">-1</span>;<span class="keyword">if</span>(ch==EOF)<span class="keyword">return</span> <span class="number">0</span>;ch=getchar();&#125;</span><br><span class="line">		<span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">		<span class="keyword">return</span> x*=flag;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Fast_IO;</span><br><span class="line"></span><br><span class="line">LL a[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m,p;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;p);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)a[i]=read();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)b[i]=read();</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]%p!=<span class="number">0</span>)&#123;</span><br><span class="line">			ans+=i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b[i]%p!=<span class="number">0</span>)&#123;</span><br><span class="line">			ans+=i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习笔记（二）</title>
    <url>/2020/03/04/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>参考教材是《HTML、CSS、JavaScript网页制作从入门到精通》（刘西杰、张婷著）。这篇是5、6章内容的学习笔记。</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--有序列表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第四项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第五项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--有序列表序号类型--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--type参数：1|a|A|i|I--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第四项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第五项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--有序列表起始数值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第四项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第五项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--无序列表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第四项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第五项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--无序列表符号类型--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--type参数：disc|circle|square--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"circle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第四项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第五项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--定义列表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Carls<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>菜鸡的一种<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--菜单列表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">menu</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第四项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这里是第五项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表格--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表格标题--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">caption</span>&gt;</span>这是一个表格<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表头--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">caption</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>第一列<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>第二列<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表格宽度与高度--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">caption</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>第一列<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>第二列<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表格对齐方式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表格边框（不含内框）宽度--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表格内框宽度--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"10"</span> <span class="attr">cellspacing</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表格边框（含内框）颜色--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">bordercolor</span>=<span class="string">"#66CCFF"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表格内文字与边框间距--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"16"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,222222222<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表格背景颜色--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">bgcolor</span>=<span class="string">"#FFCCFF"</span> <span class="attr">bordercolor</span>=<span class="string">"#66CCFF"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表格背景图像--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"700"</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">background</span>=<span class="string">"./Carls自画像.png"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表格行高度--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"60"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--?--&gt;</span><span class="comment">&lt;!--表格行边框颜色--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"15"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">bordercolor</span>=<span class="string">"#FF0000"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表格行背景--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"15"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">"#FF0000"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">background</span>=<span class="string">"./Carls自画像.png"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表格行文字对齐方式（水平）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"15"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表格行文字对齐方式（垂直）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"15"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"bottom"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单元格大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"15"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"bottom"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单元格水平跨度--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"15"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"bottom"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单元格垂直跨度--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"15"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"bottom"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单元格对齐方式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"15"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"bottom"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">height</span>=<span class="string">"200"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">align</span>=<span class="string">"right"</span> <span class="attr">valign</span>=<span class="string">"bottom"</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单元格背景色--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"15"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"bottom"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#FF0000"</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--?--&gt;</span><span class="comment">&lt;!--单元格边框颜色--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"15"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"bottom"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">bordercolor</span>=<span class="string">"#FF0000"</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--?--&gt;</span><span class="comment">&lt;!--单元格亮边框--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"15"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"bottom"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">bordercolorlight</span>=<span class="string">"#CC00FF"</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--?--&gt;</span><span class="comment">&lt;!--单元格暗边框--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"15"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"bottom"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">bordercolordark</span>=<span class="string">"#FF0000"</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单元格背景图像--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"15"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"bottom"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">height</span>=<span class="string">"200"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">background</span>=<span class="string">"./Carls自画像.png"</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表首--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"15"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">caption</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span> <span class="attr">bgcolor</span>=<span class="string">"#FF0000"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>第一列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>第二列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"bottom"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表主体--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"15"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">caption</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span> <span class="attr">bgcolor</span>=<span class="string">"#FF0000"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>第一列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>第二列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">bgcolor</span>=<span class="string">"#CC99FF"</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"bottom"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表尾--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"15"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">caption</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span> <span class="attr">bgcolor</span>=<span class="string">"#FF0000"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>第一列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>第二列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">bgcolor</span>=<span class="string">"#CC99FF"</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">valign</span>=<span class="string">"bottom"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2,2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tfoot</span> <span class="attr">bgcolor</span>=<span class="string">"#CC00FF"</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>这是表尾<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>前端</tag>
        <tag>网页制作</tag>
      </tags>
  </entry>
  <entry>
    <title>Ozon Tech Challenge 2020 (Div.1 + Div.2)</title>
    <url>/2020/03/04/Ozon-Tech-Challenge-2020-Div-1-Div-2/</url>
    <content><![CDATA[<p>我和你讲，我超会演的！</p>
<h2 id="a.-kuroni-and-the-gifts">A. Kuroni and the Gifts</h2>
<p>两个数组分别排序后输出。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">		sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,b[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-kuroni-and-simple-strings">B. Kuroni and Simple Strings</h2>
<p>最多一次就能搞定。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	<span class="keyword">int</span> n=s.length();</span><br><span class="line">	<span class="keyword">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">		<span class="keyword">while</span>(s[l]!=<span class="string">'('</span>&amp;&amp;l&lt;r)l++;</span><br><span class="line">		<span class="keyword">while</span>(s[r]!=<span class="string">')'</span>&amp;&amp;l&lt;r)r--;</span><br><span class="line">		<span class="keyword">if</span>(s[l]==<span class="string">'('</span>&amp;&amp;s[r]==<span class="string">')'</span>&amp;&amp;l&lt;r)&#123;</span><br><span class="line">			ans.push_back(l);</span><br><span class="line">			ans.push_back(r);</span><br><span class="line">			l++;r--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(ans.begin(),ans.end());</span><br><span class="line">	<span class="keyword">if</span>(ans.size()==<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">	<span class="keyword">if</span>(ans.size())<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans.size());</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ans.size();i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-kuroni-and-impossible-calculation">C. Kuroni and Impossible Calculation</h2>
<p>注意到m很小。</p>
<p>当n&gt;m时。将a数组从大到小排序。如果a[1]-a[2~n]无重复值，则必取遍0~m-1所有值；如果a[1]-a[2~n]有重复值，不妨设a[1]-a[i]=a[1]-a[j](i&lt;j)，则a[i]-a[j]=0。综上，至少有一乘积项为0，答案为0。</p>
<p>当n≤m时。暴力计算即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	LL n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">	<span class="keyword">if</span>(n&gt;m)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		LL ans=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">				ans*=<span class="built_in">abs</span>(a[i]-a[j]);</span><br><span class="line">				ans%=m;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans%m);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-kuroni-and-the-celebration">D. Kuroni and the Celebration</h2>
<p>将所有度数为1的节点加入集合，每次从集合中抽出两个元素询问。如果结果为其中之一，则根为结果；如果结果不等于两者中的任何一个，则从集合中删除元素，更新于其相邻的节点度数，再次将度数为1的节点加入集合。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> nume=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> last[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++nume]=(Edge)&#123;u,v,last[u]&#125;;</span><br><span class="line">	last[u]=nume;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">		add_edge(u,v);</span><br><span class="line">		add_edge(v,u);</span><br><span class="line">		d[u]++;d[v]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(d[i]==<span class="number">1</span>)s.push(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(s.size()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">int</span> a=s.top();s.pop();</span><br><span class="line">		<span class="keyword">int</span> b=s.top();s.pop();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"? %d %d\n"</span>,a,b);</span><br><span class="line">		fflush(<span class="built_in">stdout</span>);</span><br><span class="line">		<span class="keyword">int</span> res;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;res);</span><br><span class="line">		<span class="keyword">if</span>(res==a||res==b)&#123;</span><br><span class="line">			ans=res;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=last[a];i;i=e[i].nxt)&#123;</span><br><span class="line">				<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">				d[v]--;</span><br><span class="line">				<span class="keyword">if</span>(d[v]==<span class="number">1</span>)s.push(v);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=last[b];i;i=e[i].nxt)&#123;</span><br><span class="line">				<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">				d[v]--;</span><br><span class="line">				<span class="keyword">if</span>(d[v]==<span class="number">1</span>)s.push(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!ans)ans=s.top();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"! %d\n"</span>,ans);</span><br><span class="line">	fflush(<span class="built_in">stdout</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习笔记（一）</title>
    <url>/2020/03/02/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>参考教材是《HTML、CSS、JavaScript网页制作从入门到精通》（刘西杰、张婷著）。这篇是前4章内容的学习笔记。</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关键字，搜索引擎用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"Carls's Blog,Carls,ACM,个人博客"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--简述，搜索引擎用，会出现在搜索结果中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"这里是Carls的个人博客，欢迎来踩。"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--制作工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"generator"</span> <span class="attr">content</span>=<span class="string">"Visual Studio Code"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--作者--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"Carls"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--字符集--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--?--&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=gb2312"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--定时自动跳转--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;meta http-equiv="refresh" content="5;url=https://carlsvoca.github.io"&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--标题，显示在标签栏和搜索结果中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">            hello world!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--各级标题--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对齐属性 right|center|left--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>居中标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--段落标记--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>这是一个居中对齐的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--强制换行--&gt;</span></span><br><span class="line">        我要强制<span class="tag">&lt;<span class="name">br</span>&gt;</span>换行！</span><br><span class="line">        <span class="comment">&lt;!--禁止浏览器自动换行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nobr</span>&gt;</span>这段文字很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很很长很长很长很长但就是不换行<span class="tag">&lt;/<span class="name">nobr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--水平线--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--空格--&gt;</span></span><br><span class="line">        <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>空<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>格</span><br><span class="line">        <span class="comment">&lt;!--各种特殊符号--&gt;</span></span><br><span class="line">        <span class="symbol">&amp;quot;</span><span class="comment">&lt;!-- " --&gt;</span></span><br><span class="line">        <span class="symbol">&amp;amp;</span><span class="comment">&lt;!-- &amp; --&gt;</span></span><br><span class="line">        <span class="symbol">&amp;lt;</span><span class="comment">&lt;!-- &lt; --&gt;</span></span><br><span class="line">        <span class="symbol">&amp;gt;</span><span class="comment">&lt;!-- &gt; --&gt;</span></span><br><span class="line">        <span class="symbol">&amp;times;</span><span class="comment">&lt;!-- × --&gt;</span></span><br><span class="line">        <span class="symbol">&amp;sect;</span><span class="comment">&lt;!-- § --&gt;</span></span><br><span class="line">        <span class="symbol">&amp;copy;</span><span class="comment">&lt;!-- © --&gt;</span></span><br><span class="line">        <span class="symbol">&amp;reg;</span><span class="comment">&lt;!-- ® --&gt;</span></span><br><span class="line">        <span class="symbol">&amp;trade;</span><span class="comment">&lt;!-- ™ --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内部链接--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--target参数：_self|_blank|_top|_parent --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link.html"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--本页面锚点链接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"锚点链接"</span>&gt;</span>锚点链接到这里<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#锚点链接"</span>&gt;</span>动！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--其他页面锚点链接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://carlsvoca.github.io/2020/02/24/Codeforces-Round-623-Div-2-based-on-VK-Cup-2019-2020-Elimination-Round-Engine/#D-Recommendations"</span>&gt;</span>Codeforces Round #623 D<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--外部链接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://carlsvoca.github.io/"</span>&gt;</span>Carls's Blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--E-mail链接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:carlsvoca@gmail.com"</span>&gt;</span>发邮件给我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--?--&gt;</span><span class="comment">&lt;!--FTP链接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ftp://ftp.hrbeu.edu.cn/"</span>&gt;</span>哈尔滨工程大学FTP<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--?--&gt;</span><span class="comment">&lt;!--Telnet链接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"telnet://地址"</span>&gt;</span>链接到Telnet<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--下载链接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"hello world.exe"</span>&gt;</span>下载hello world.exe<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--插入图像--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"つめたい-TLLA.png"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--?--&gt;</span><span class="comment">&lt;!--图像提示文字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Carls自画像.png"</span> <span class="attr">alt</span>=<span class="string">"绝世美图"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--图像的高度和宽度--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Carls自画像.png"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--图像的边框--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Carls自画像.png"</span> <span class="attr">border</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--图像的超链接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://carlsvoca.github.io"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Carls自画像.png"</span> <span class="attr">alt</span>=<span class="string">"Carls's Blog"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--图像热区链接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Carls自画像.png"</span> <span class="attr">usemap</span>=<span class="string">"#Map"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">"Map"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">"rect"</span> <span class="attr">coords</span>=<span class="string">"10,10,100,100"</span> <span class="attr">href</span>=<span class="string">"https://carlsvoca.github.io"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">"circle"</span> <span class="attr">coords</span>=<span class="string">"200,200,100"</span> <span class="attr">href</span>=<span class="string">"#锚点链接"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>前端</tag>
        <tag>网页制作</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #623 (Div. 2, based on VK Cup 2019-2020 - Elimination Round, Engine)</title>
    <url>/2020/02/24/Codeforces-Round-623-Div-2-based-on-VK-Cup-2019-2020-Elimination-Round-Engine/</url>
    <content><![CDATA[<h2 id="a.-dead-pixel">A. Dead Pixel</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> a,b,x,y;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;a,&amp;b,&amp;x,&amp;y);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(max(a*y,a*(b-y<span class="number">-1</span>)),max(b*x,b*(a-x<span class="number">-1</span>))));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-homecoming">B. Homecoming</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">LL dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		LL a,b,p;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;a,&amp;b,&amp;p);</span><br><span class="line">		<span class="built_in">string</span> s;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="keyword">int</span> n=s.length();</span><br><span class="line">		dp[n<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">		dp[n<span class="number">-2</span>]=(s[n<span class="number">-2</span>]==<span class="string">'A'</span>?a:b);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-3</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]==s[i+<span class="number">1</span>])dp[i]=dp[i+<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">'A'</span>)dp[i]=dp[i+<span class="number">1</span>]+a;</span><br><span class="line">				<span class="keyword">else</span> dp[i]=dp[i+<span class="number">1</span>]+b;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(dp[i]&lt;=p)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i+<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-restoring-permutation">C. Restoring Permutation</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">205</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b[maxn],a[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">bool</span> fail=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">		<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]),vis[b[i]]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)a[<span class="number">2</span>*i<span class="number">-1</span>]=b[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">				<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">					<span class="keyword">if</span>(a[<span class="number">2</span>*j])<span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">if</span>(a[<span class="number">2</span>*j<span class="number">-1</span>]&lt;i)&#123;</span><br><span class="line">						a[<span class="number">2</span>*j]=i;</span><br><span class="line">						flag=<span class="number">1</span>;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">					fail=<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(fail)<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-recommendations">D. Recommendations</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">	LL a,t;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Data &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a==b.a?t&lt;b.t:a&lt;b.a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;d[maxn];</span><br><span class="line"></span><br><span class="line">priority_queue&lt; LL &gt; pq;</span><br><span class="line"><span class="built_in">stack</span>&lt;LL&gt; sta;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> val[maxn],l[maxn],r[maxn];</span><br><span class="line">LL sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	LL ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;d[i].a);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;d[i].t);</span><br><span class="line">	sort(d+<span class="number">1</span>,d+n+<span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	for(int i=1;i&lt;=n;i++)printf("%d ",d[i].a);</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> st=d[<span class="number">1</span>].a;</span><br><span class="line">	l[cnt]=<span class="number">1</span>;</span><br><span class="line">	val[cnt]=d[<span class="number">1</span>].a;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(d[i].a==d[i<span class="number">-1</span>].a)<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			r[cnt]=i<span class="number">-1</span>;</span><br><span class="line">			st=i;</span><br><span class="line">			l[++cnt]=i;</span><br><span class="line">			val[cnt]=d[i].a;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	r[cnt]=n;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	for(int i=1;i&lt;=cnt;i++)&#123;</span></span><br><span class="line"><span class="comment">		printf("val=%d l=%d r=%d\n",val[i],l[i],r[i]);</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">*/</span>	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=l[i];j&lt;=r[i];j++)&#123;</span><br><span class="line">			pq.push(d[j].t);sum+=d[j].t;</span><br><span class="line">		&#125;</span><br><span class="line">		LL step=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(!pq.empty()&amp;&amp;step&lt;val[i+<span class="number">1</span>]-val[i])&#123;</span><br><span class="line">			LL tmp=pq.top();sum-=pq.top();pq.pop();</span><br><span class="line">			ans+=tmp*step;</span><br><span class="line">			step++;</span><br><span class="line">		&#125;</span><br><span class="line">		ans+=sum*step;</span><br><span class="line"><span class="comment">//		printf("Carls:%lld\n",ans);</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=l[cnt];j&lt;=r[cnt];j++)&#123;</span><br><span class="line">		pq.push(d[j].t);sum+=d[j].t;</span><br><span class="line">	&#125;</span><br><span class="line">	LL step=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">		LL tmp=pq.top();sum-=pq.top();pq.pop();</span><br><span class="line">		ans+=tmp*step;</span><br><span class="line">		step++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #621 (Div. 1 + Div. 2)</title>
    <url>/2020/02/20/Codeforces-Round-621-Div-1-Div-2/</url>
    <content><![CDATA[<p>本以为Div.1+2是掉分场，却意外上了点分。</p>
<p>奶牛场。</p>
<h2 id="a.-cow-and-haybales">A. Cow and Haybales</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,d;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;d);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		<span class="keyword">int</span> ans=a[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(d&lt;i<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				ans+=min(d/(i<span class="number">-1</span>),a[i]);</span><br><span class="line">				d-=(i<span class="number">-1</span>)*min(d/(i<span class="number">-1</span>),a[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-cow-and-friend">B. Cow and Friend</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;x);</span><br><span class="line">		<span class="keyword">int</span> MAX=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">			<span class="keyword">if</span>(a[i]==x)flag=<span class="number">1</span>;</span><br><span class="line">			MAX=max(MAX,a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,MAX&gt;x?<span class="number">2</span>:((x<span class="number">-1</span>)/MAX+<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-cow-and-message">C. Cow and Message</h2>
<p>对于每个长度大于2的串，一定存在一种长度为2的串不劣于它。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">LL cnt[maxn][<span class="number">30</span>];</span><br><span class="line">LL p[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	<span class="keyword">int</span> n=s.length();</span><br><span class="line">	cnt[<span class="number">0</span>][s[<span class="number">0</span>]-<span class="string">'a'</span>]++;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line">			cnt[i][j]+=cnt[i<span class="number">-1</span>][j];</span><br><span class="line">		cnt[i][s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">	&#125;</span><br><span class="line">	LL ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)ans=max(ans,cnt[n<span class="number">-1</span>][i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">			p[j][s[i]-<span class="string">'a'</span>]+=cnt[i<span class="number">-1</span>][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">			ans=max(ans,p[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-cow-and-fields">D. Cow and Fields</h2>
<p>在k个数中找出a、b，使min(dis1[a]+disn[b]+1,dis1[b]+disn[a]+1)最大。</p>
<p>按dis1[i]-disn[i]排序，记录后缀disn最大值，遍历得出答案。</p>
<p>也不清楚比赛时乱搞怎么过的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> u,v,w,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> nume=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> last[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">	e[++nume]=(Edge)&#123;u,v,w,last[u]&#125;;</span><br><span class="line">	last[u]=nume;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis1[maxn],disn[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dijkstra&#123;</span><br><span class="line">	<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main1</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">		priority_queue&lt; pii,<span class="built_in">vector</span>&lt;pii&gt;,greater&lt;pii&gt; &gt;q;</span><br><span class="line">		<span class="built_in">memset</span>(dis1,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis1));</span><br><span class="line">		dis1[s]=<span class="number">0</span>;</span><br><span class="line">		q.push(pii(<span class="number">0</span>,s));</span><br><span class="line">		<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">			pii now=q.top();q.pop();</span><br><span class="line">			<span class="keyword">int</span> u=now.second;</span><br><span class="line">			<span class="keyword">if</span>(dis1[u]&lt;now.first)<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">				<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">				<span class="keyword">if</span>(dis1[u]+e[i].w&lt;dis1[v])&#123;</span><br><span class="line">					dis1[v]=dis1[u]+e[i].w;</span><br><span class="line">					q.push(pii(dis1[v],v));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_mainn</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">		priority_queue&lt; pii,<span class="built_in">vector</span>&lt;pii&gt;,greater&lt;pii&gt; &gt;q;</span><br><span class="line">		<span class="built_in">memset</span>(disn,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(disn));</span><br><span class="line">		disn[s]=<span class="number">0</span>;</span><br><span class="line">		q.push(pii(<span class="number">0</span>,s));</span><br><span class="line">		<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">			pii now=q.top();q.pop();</span><br><span class="line">			<span class="keyword">int</span> u=now.second;</span><br><span class="line">			<span class="keyword">if</span>(disn[u]&lt;now.first)<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">				<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">				<span class="keyword">if</span>(disn[u]+e[i].w&lt;disn[v])&#123;</span><br><span class="line">					disn[v]=disn[u]+e[i].w;</span><br><span class="line">					q.push(pii(disn[v],v));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Dijkstra;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> id,dis1,disn;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Data&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dis1==b.dis1?(disn&gt;b.disn):(dis1&lt;b.dis1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d[i].id);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">		add_edge(u,v,<span class="number">1</span>);</span><br><span class="line">		add_edge(v,u,<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	do_main1(<span class="number">1</span>);do_mainn(n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">		d[i].dis1=dis1[d[i].id];</span><br><span class="line">		d[i].disn=disn[d[i].id];</span><br><span class="line">	&#125;</span><br><span class="line">	sort(d+<span class="number">1</span>,d+k+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;k;i++)ans=max(ans,d[i].dis1+d[i+<span class="number">1</span>].disn+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min(ans,dis1[n]));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #620 (Div. 2)</title>
    <url>/2020/02/16/Codeforces-Round-620-Div-2/</url>
    <content><![CDATA[<h2 id="a.-two-rabbits">A. Two Rabbits</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> x,y,a,b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;x,&amp;y,&amp;a,&amp;b);</span><br><span class="line">		<span class="keyword">int</span> dis=<span class="built_in">abs</span>(x-y);</span><br><span class="line">		<span class="keyword">if</span>(dis%(a+b)==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis/(a+b));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-longest-palindrome">B. Longest Palindrome</h2>
<p>找得到反转串就输出，中间找一下有没有自反串。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i][k]!=s[j][m-k<span class="number">-1</span>])flag=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">				p[i]=j;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p[i])ans++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i][j]!=s[i][m-j<span class="number">-1</span>])flag=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">			ans++;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p[i])ans++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans*m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p[i])<span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i][j]!=s[i][m-j<span class="number">-1</span>])flag=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p[i])<span class="built_in">cout</span>&lt;&lt;s[p[i]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-air-conditioner">C. Air Conditioner</h2>
<p>感觉这题以前（OI时期）见过。Flappy Bird？</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span>&#123;</span></span><br><span class="line">	LL t,l,r;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> C&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> t&lt;b.t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		LL m;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;n,&amp;m);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;c[i].t,&amp;c[i].l,&amp;c[i].r);</span><br><span class="line">		sort(c+<span class="number">1</span>,c+n+<span class="number">1</span>);</span><br><span class="line">		LL l=m,r=m,pre=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			l-=(c[i].t-pre);</span><br><span class="line">			r+=(c[i].t-pre);</span><br><span class="line">			<span class="keyword">if</span>(l&gt;c[i].r||r&lt;c[i].l)&#123;</span><br><span class="line">				flag=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				l=max(l,c[i].l);</span><br><span class="line">				r=min(r,c[i].r);</span><br><span class="line">				pre=c[i].t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-shortest-and-longest-lis">D. Shortest and Longest LIS</h2>
<p>在满足序列的情况下，前面的数越大LIS越小。初始为降序数列，按照大小序列重排部分元素即可。LIS最大和最小同理。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="built_in">string</span> s;</span><br><span class="line">		<span class="keyword">int</span> sta=<span class="number">-1</span>,ed;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)a[i]=n-i+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]==<span class="string">'&gt;'</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(sta==<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					ed=i+<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> j=sta;j&lt;ed-(j-sta);j++)&#123;</span><br><span class="line">						swap(a[j],a[ed-(j-sta)]);</span><br><span class="line">					&#125;</span><br><span class="line">					sta=<span class="number">-1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(sta==<span class="number">-1</span>)sta=i+<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sta!=<span class="number">-1</span>)&#123;</span><br><span class="line">			ed=n;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=sta;j&lt;ed-(j-sta);j++)&#123;</span><br><span class="line">				swap(a[j],a[ed-(j-sta)]);</span><br><span class="line">			&#125;</span><br><span class="line">			sta=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)a[i]=i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]==<span class="string">'&lt;'</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(sta==<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					ed=i+<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> j=sta;j&lt;ed-(j-sta);j++)&#123;</span><br><span class="line">						swap(a[j],a[ed-(j-sta)]);</span><br><span class="line">					&#125;</span><br><span class="line">					sta=<span class="number">-1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(sta==<span class="number">-1</span>)sta=i+<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sta!=<span class="number">-1</span>)&#123;</span><br><span class="line">			ed=n;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=sta;j&lt;ed-(j-sta);j++)&#123;</span><br><span class="line">				swap(a[j],a[ed-(j-sta)]);</span><br><span class="line">			&#125;</span><br><span class="line">			sta=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.-1-trees-and-queries">E. 1-Trees and Queries</h2>
<p>合法步数+偶数步仍为合法步数（可以反复走其中两个点），所以只需要判断合法路径长度的奇偶性。有三种基础路径a➡b，a➡x➡y➡b，a➡y➡x➡b。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> nume=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> last[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++nume]=(Edge)&#123;u,v,last[u]&#125;;</span><br><span class="line">	last[u]=nume;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LCA&#123;</span><br><span class="line">	<span class="keyword">int</span> dep[maxn],f[maxn][<span class="number">22</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">			<span class="keyword">if</span>(v!=f[u][<span class="number">0</span>])&#123;</span><br><span class="line">				f[v][<span class="number">0</span>]=u;</span><br><span class="line">				dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">				dfs(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">				f[i][j]=f[f[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[a]&lt;dep[b])swap(a,b);</span><br><span class="line">		<span class="keyword">int</span> dif=dep[a]-dep[b];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=dif;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;dif)a=f[a][i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a!=b)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=(<span class="keyword">int</span>)log2(n);i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(f[a][i]!=f[b][i])&#123;</span><br><span class="line">					a=f[a][i];b=f[b][i];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			a=f[a][<span class="number">0</span>];b=f[b][<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> LCA=do_main(u,v);</span><br><span class="line">		<span class="keyword">return</span> dep[u]-dep[LCA]+dep[v]-dep[LCA];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> LCA;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">		add_edge(u,v);add_edge(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(<span class="number">1</span>);</span><br><span class="line">	pre();</span><br><span class="line">	<span class="keyword">int</span> q;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="keyword">int</span> x,y,a,b,k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>,&amp;x,&amp;y,&amp;a,&amp;b,&amp;k);</span><br><span class="line">		<span class="keyword">int</span> a_b=dis(a,b),a_x=dis(x,a),b_x=dis(x,b),a_y=dis(y,a),b_y=dis(y,b);</span><br><span class="line">		<span class="keyword">int</span> path1=a_b,path2=a_x+b_y+<span class="number">1</span>,path3=a_y+b_x+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(k&amp;<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>((path1&amp;<span class="number">1</span>)&amp;&amp;k&gt;=path1)&#123;<span class="built_in">puts</span>(<span class="string">"YES"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">			<span class="keyword">if</span>((path2&amp;<span class="number">1</span>)&amp;&amp;k&gt;=path2)&#123;<span class="built_in">puts</span>(<span class="string">"YES"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">			<span class="keyword">if</span>((path3&amp;<span class="number">1</span>)&amp;&amp;k&gt;=path3)&#123;<span class="built_in">puts</span>(<span class="string">"YES"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>((!(path1&amp;<span class="number">1</span>))&amp;&amp;k&gt;=path1)&#123;<span class="built_in">puts</span>(<span class="string">"YES"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">			<span class="keyword">if</span>((!(path2&amp;<span class="number">1</span>))&amp;&amp;k&gt;=path2)&#123;<span class="built_in">puts</span>(<span class="string">"YES"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">			<span class="keyword">if</span>((!(path3&amp;<span class="number">1</span>))&amp;&amp;k&gt;=path3)&#123;<span class="built_in">puts</span>(<span class="string">"YES"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>2020牛客寒假算法基础集训营6</title>
    <url>/2020/02/16/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A56/</url>
    <content><![CDATA[<h2 id="a.-配对">A. 配对</h2>
<p>转化问题为最大化第k小的和(k=n-k+1)，显然前k-1的和越小越好，将a和b排序后，前k-1小就是a和b前k-1小对应加和。贪心将a数组剩余项倒序和b数组配对后得出答案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x7fffffff</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    k=n-k+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">    sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    sort(a+k,a+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">int</span> ans=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;=n;i++)ans=min(ans,a[i]+b[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-图">B. 图</h2>
<p>dfs判个环。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> f[maxn],t[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sta=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[u])<span class="keyword">return</span>;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(vis[t[u]])&#123;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        sta=t[u];</span><br><span class="line">        f[u]=<span class="number">0</span>;</span><br><span class="line">        vis[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(t[u]);</span><br><span class="line">    f[u]=f[t[u]]+<span class="number">1</span>;</span><br><span class="line">    vis[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="comment">//  printf("dfs2 %d\n",u);</span></span><br><span class="line">    <span class="keyword">if</span>(u==sta)<span class="keyword">return</span>;</span><br><span class="line">    f[u]=f[sta];</span><br><span class="line">    dfs2(t[u]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t[i]);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        flag=<span class="number">0</span>;sta=<span class="number">0</span>;</span><br><span class="line">        dfs(i);</span><br><span class="line"><span class="comment">//      printf("sta=%d\n",sta);</span></span><br><span class="line">        <span class="keyword">if</span>(flag)dfs2(t[sta]);</span><br><span class="line">        ans=max(ans,f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-重排列">D. 重排列</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">    LL ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">int</span> pos=lower_bound(b+<span class="number">1</span>,b+n+<span class="number">1</span>,a[i])-b;</span><br><span class="line">        ans*=(n-pos+<span class="number">1</span>-(n-i));</span><br><span class="line">        ans%=MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="f.-十字排列">F. 十字排列</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Fast_IO&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">int</span> flag=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">        <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">-1</span>;<span class="keyword">if</span>(ch==EOF)<span class="keyword">return</span> <span class="number">0</span>;ch=getchar();&#125;</span><br><span class="line">        <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">        <span class="keyword">return</span> x*=flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Fast_IO;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> totx[maxn],toty[maxn],tot[maxn][maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,h;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;h);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z;i&lt;=h;i++)&#123;</span><br><span class="line">        read(x);read(y);read(z);</span><br><span class="line">        totx[x]=(totx[x]+z)%MOD;</span><br><span class="line">        toty[y]=(toty[y]+z)%MOD;</span><br><span class="line">        tot[x][y]=(tot[x][y]+z)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            ans+=<span class="number">1L</span>L*((totx[i]+toty[j]-tot[i][j])%MOD+MOD)%MOD*(i+j)%MOD;</span><br><span class="line">            ans%=MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="g.-括号序列">G. 括号序列</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'('</span>)sta.push(s[i]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(sta.empty())ans++;</span><br><span class="line">                <span class="keyword">else</span> sta.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=sta.size();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="j.-签到题">J. 签到题</h2>
<p>不存在No的情况。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    <span class="keyword">if</span>(a+b&gt;c&amp;&amp;a+c&gt;b&amp;&amp;b+c&gt;a)&#123;</span><br><span class="line">        <span class="keyword">double</span> r[<span class="number">4</span>];</span><br><span class="line">        r[<span class="number">1</span>]=(b+c-a)/<span class="number">2.0</span>;</span><br><span class="line">        r[<span class="number">2</span>]=c-r[<span class="number">1</span>];</span><br><span class="line">        r[<span class="number">3</span>]=b-r[<span class="number">1</span>];</span><br><span class="line">        sort(r+<span class="number">1</span>,r+<span class="number">4</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf %.2lf %.2lf\n"</span>,r[<span class="number">1</span>],r[<span class="number">2</span>],r[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"wtnl"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>nowcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>2020牛客寒假算法基础集训营5</title>
    <url>/2020/02/16/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A55/</url>
    <content><![CDATA[<h2 id="a.-模板">A. 模板</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">string</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;min(n,m);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=b[i])ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+max(n,m)-min(n,m));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-牛牛战队的比赛地">B. 牛牛战队的比赛地</h2>
<p>三分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Ternary_Search&#123;</span><br><span class="line">	<span class="keyword">double</span> EPS=<span class="number">1e-6</span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> ans)</span></span>&#123;</span><br><span class="line">		Point tmp;</span><br><span class="line">        tmp.x=ans;tmp.y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)res=max(res,dis(tmp,p[i]));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">do_main</span><span class="params">(<span class="keyword">double</span> l,<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">while</span>(r-l&gt;EPS)&#123;</span><br><span class="line">        	<span class="keyword">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        	<span class="keyword">double</span> midd=(mid+r)/<span class="number">2</span>;</span><br><span class="line">        	<span class="keyword">if</span>(f(mid)&lt;f(midd))r=midd;</span><br><span class="line">        	<span class="keyword">else</span> l=mid;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> f(l);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Ternary_Search;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,do_main(<span class="number">-10000</span>,<span class="number">10000</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-牛牛与牛妹的约会">D. 牛牛与牛妹的约会</h2>
<p>能跳就跳。卡了点精度，1e-6过不了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Binary_Search&#123;</span><br><span class="line">    <span class="keyword">double</span> EPS=<span class="number">1e-8</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> ans,<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ans*ans*ans&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">sqrt3</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> l=<span class="number">0</span>,r=<span class="number">1e6</span>;</span><br><span class="line">        <span class="keyword">while</span>(r-l&gt;EPS)&#123;</span><br><span class="line">            <span class="keyword">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid,x))r=mid;</span><br><span class="line">            <span class="keyword">else</span> l=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Binary_Search;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cul</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">abs</span>(x);y=<span class="built_in">abs</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=y)<span class="keyword">return</span> y-x;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">double</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x-sqrt3(x)&gt;<span class="number">1</span>&amp;&amp;sqrt3(x)&gt;=y)&#123;</span><br><span class="line">            x=sqrt3(x);</span><br><span class="line">            res+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min(res+x-y,res+<span class="number">1</span>+<span class="built_in">abs</span>(sqrt3(x)-y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">double</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(a*b&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            a=<span class="built_in">abs</span>(a);</span><br><span class="line">            <span class="keyword">while</span>(a-sqrt3(a)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                a=sqrt3(a);</span><br><span class="line">                ans+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=a;</span><br><span class="line">            ans+=cul(<span class="number">0</span>,b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans+=cul(a,b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.-enjoy-the-game">E. Enjoy the game</h2>
<p>如果n是2的幂次，后手必胜。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>((<span class="number">1L</span>L&lt;&lt;(<span class="keyword">int</span>)log2(n))!=n)<span class="built_in">puts</span>(<span class="string">"Bob"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Alice"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="i.-i题是个签到题">I. I题是个签到题</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">int</span> I=a[<span class="number">9</span>];</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(a[n<span class="number">-2</span>]&lt;=I)<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(I&gt;=m*<span class="number">0.8</span>)<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="j.-牛牛战队的秀场">J. 牛牛战队的秀场</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lf"</span>,&amp;n,&amp;r);</span><br><span class="line">    <span class="keyword">double</span> a=<span class="built_in">sqrt</span>((<span class="number">1</span>-<span class="built_in">cos</span>(<span class="number">2</span>*pi/n))*<span class="number">2</span>*r*r);</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;i,&amp;j);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,min((max(i,j)-min(i,j))*a,(min(i,j)+n-max(i,j))*a));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>nowcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>2020牛客寒假算法基础集训营4</title>
    <url>/2020/02/11/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A54/</url>
    <content><![CDATA[<h2 id="a.-欧几里得">A. 欧几里得</h2>
<p>斐波那契数列是欧几里得算法最不理想的情况。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"> </span><br><span class="line">LL f[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)f[i]=f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>];</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[n+<span class="number">1</span>]+f[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-括号序列">B. 括号序列</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> b,<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="string">'('</span>&amp;&amp;c==<span class="string">')'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="string">'['</span>&amp;&amp;c==<span class="string">']'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="string">'&#123;'</span>&amp;&amp;c==<span class="string">'&#125;'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> n=s.length();</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'('</span>||s[i]==<span class="string">'['</span>||s[i]==<span class="string">'&#123;'</span>)&#123;</span><br><span class="line">            a.push(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!a.empty()&amp;&amp;cmp(a.top(),s[i]))a.pop();</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag||!a.empty())<span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-子段乘积">C. 子段乘积</h2>
<p>线段树暴过。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">998244353</span>;</span><br><span class="line"> </span><br><span class="line">LL a[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Segment_Tree&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        LL mul;</span><br><span class="line">    &#125;t[maxn*<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k1)</span></span>&#123;</span><br><span class="line">        t[k1].mul=(t[k1&lt;&lt;<span class="number">1</span>].mul*t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mul)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        t[k1].l=l;t[k1].r=r;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">            t[k1].mul=a[l];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        build(k1&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">        build(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        update(k1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&gt;t[k1].r||R&lt;t[k1].l)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=t[k1].l&amp;&amp;R&gt;=t[k1].r)&#123;</span><br><span class="line">            <span class="keyword">return</span> t[k1].mul;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (query(k1&lt;&lt;<span class="number">1</span>,L,R)*query(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R))%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Segment_Tree;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    LL MAX=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;=n;i++)&#123;</span><br><span class="line">        MAX=max(MAX,query(<span class="number">1</span>,i-k+<span class="number">1</span>,i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,MAX);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-子段异或">D. 子段异或</h2>
<p>若xorsum[i]=xorsum[j]，则a[i+1] ^ ... ^ a[j]==0。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn],xorsum[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        xorsum[i]=xorsum[i<span class="number">-1</span>]^a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(xorsum,xorsum+n+<span class="number">1</span>);</span><br><span class="line">    LL cnt=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xorsum[i]==xorsum[i<span class="number">-1</span>])cnt++;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans+=cnt*(cnt<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">            cnt=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=cnt*(cnt<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.-最小表达式">E. 最小表达式</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Big_Integer&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BigInteger</span>&#123;</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> base=<span class="number">100000000</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> width=<span class="number">8</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;s;</span><br><span class="line">        BigInteger(<span class="keyword">long</span> <span class="keyword">long</span> num=<span class="number">0</span>)&#123;*<span class="keyword">this</span>=num;&#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> = (<span class="keyword">long</span> <span class="keyword">long</span> num)&#123;</span><br><span class="line">            s.clear();</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                s.push_back(num%base);</span><br><span class="line">                num/=base;</span><br><span class="line">            &#125;<span class="keyword">while</span>(num);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> = (<span class="keyword">const</span> <span class="built_in">string</span> &amp;str)&#123;</span><br><span class="line">            s.clear();</span><br><span class="line">            <span class="keyword">int</span> x,len=(str.length()<span class="number">-1</span>)/width+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> end=str.length()-i*width;</span><br><span class="line">                <span class="keyword">int</span> start=max(<span class="number">0</span>,end-width);</span><br><span class="line">                <span class="built_in">sscanf</span>(str.substr(start,end-start).c_str(),<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">                s.push_back(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> + (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">            BigInteger c;</span><br><span class="line">            c.s.clear();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>,g=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(g==<span class="number">0</span>&amp;&amp;i&gt;=s.size()&amp;&amp;i&gt;=b.s.size())<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;s.size())g+=s[i];</span><br><span class="line">                <span class="keyword">if</span>(i&lt;b.s.size())g+=b.s[i];</span><br><span class="line">                c.s.push_back(g%base);</span><br><span class="line">                g/=base;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> - (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">            BigInteger c;</span><br><span class="line">            c.s.clear();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>,g=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;=s.size())<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;=b.s.size())&#123;</span><br><span class="line">                    c.s.push_back(s[i]+g);</span><br><span class="line">                    g=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(s[i]&lt;b.s[i])&#123;</span><br><span class="line">                        c.s.push_back(s[i]-b.s[i]+base+g);</span><br><span class="line">                        g=<span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        c.s.push_back(s[i]-b.s[i]+g);</span><br><span class="line">                        g=<span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> * (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">            BigInteger c;</span><br><span class="line">            c.s.clear();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size()+b.s.size();i++)c.s.push_back(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b.s.size();j++)&#123;</span><br><span class="line">                c.s[i+j]+=s[i]*b.s[j];</span><br><span class="line">              &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.s.size()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">                c.s[i+<span class="number">1</span>]+=c.s[i]/base;</span><br><span class="line">                c.s[i]=c.s[i]%base;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(c.s.back()==<span class="number">0</span>&amp;&amp;c.s.size()&gt;<span class="number">1</span>)c.s.erase(c.s.end()<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">            BigInteger c;</span><br><span class="line">            c.s.clear();c.s.resize(s.size());</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                res*=base;</span><br><span class="line">                res+=s[i];</span><br><span class="line">                c.s[i]=res/b;</span><br><span class="line">                res%=b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(c.s.back()==<span class="number">0</span>&amp;&amp;c.s.size()&gt;<span class="number">1</span>)c.s.erase(c.s.end()<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> % (<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">            BigInteger c;</span><br><span class="line">            c.s.clear();c.s.resize(s.size());</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                res*=base;</span><br><span class="line">                res+=s[i];</span><br><span class="line">                c.s[i]=res/b;</span><br><span class="line">                res%=b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(c.s.back()==<span class="number">0</span>&amp;&amp;c.s.size()&gt;<span class="number">1</span>)c.s.erase(c.s.end()<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">return</span> (BigInteger)res;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> += (<span class="keyword">const</span> BigInteger &amp;b)&#123;</span><br><span class="line">            *<span class="keyword">this</span>=*<span class="keyword">this</span>+b;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> -= (<span class="keyword">const</span> BigInteger &amp;b)&#123;</span><br><span class="line">            *<span class="keyword">this</span>=*<span class="keyword">this</span>-b;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> *= (<span class="keyword">const</span> BigInteger &amp;b)&#123;</span><br><span class="line">            *<span class="keyword">this</span>=*<span class="keyword">this</span>*b;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> /= (<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)&#123;</span><br><span class="line">            *<span class="keyword">this</span>=*<span class="keyword">this</span>/b;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> %= (<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)&#123;</span><br><span class="line">            *<span class="keyword">this</span>=*<span class="keyword">this</span>%b;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.size()!=b.s.size())<span class="keyword">return</span> s.size()&lt;b.s.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i]!=b.s[i])<span class="keyword">return</span> s[i]&lt;b.s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;<span class="keyword">return</span> b &lt; *<span class="keyword">this</span>;&#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;<span class="keyword">return</span> !(*<span class="keyword">this</span>&gt;b);&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream &amp;out,<span class="keyword">const</span> BigInteger &amp;x)&#123;</span><br><span class="line">        out&lt;&lt;x.s.back();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x.s.size()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">char</span> buf[<span class="number">20</span>];</span><br><span class="line">            <span class="built_in">sprintf</span>(buf,<span class="string">"%08lld"</span>,x.s[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">strlen</span>(buf);j++)out&lt;&lt;buf[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream &amp;in,BigInteger &amp;x)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">if</span>(!(in&gt;&gt;s))<span class="keyword">return</span> in;</span><br><span class="line">        x=s;</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Big_Integer;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">string</span> ans[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> c[maxn];</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> n=s.length();</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'+'</span>)cnt++;</span><br><span class="line">        <span class="keyword">else</span> c[++num]=s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(c+<span class="number">1</span>,c+num+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> tmp=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(tmp&lt;=num)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">            ans[i]+=c[tmp++];</span><br><span class="line">            <span class="keyword">if</span>(tmp&gt;num)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    BigInteger aans,ttmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)aans+=(ttmp=ans[i]);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;aans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="f.-树上博弈">F. 树上博弈</h2>
<p>找树上距离为正偶数的点对数量即可。用的树形dp，但实际上只计算出深度为偶数和深度为奇数的点的数量就行。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> nume=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> last[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[++nume]=(Edge)&#123;u,v,last[u]&#125;;</span><br><span class="line">    last[u]=nume;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line">LL dp[maxn][<span class="number">2</span>],ans=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    dp[u][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        dfs(v);</span><br><span class="line">        dp[u][<span class="number">0</span>]+=dp[v][<span class="number">1</span>];</span><br><span class="line">        dp[u][<span class="number">1</span>]+=dp[v][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=(dp[u][<span class="number">0</span>]<span class="number">-1</span>)*<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        ans+=dp[v][<span class="number">1</span>]*(dp[u][<span class="number">0</span>]<span class="number">-1</span>-dp[v][<span class="number">1</span>]);</span><br><span class="line">        ans+=dp[v][<span class="number">0</span>]*(dp[u][<span class="number">1</span>]-dp[v][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;f[i]);</span><br><span class="line">        add_edge(f[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="坐火车">坐火车</h2>
<p>线段树被卡常了，改用的树状数组。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Fast_IO&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">int</span> flag=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">        <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">-1</span>;<span class="keyword">if</span>(ch==EOF)<span class="keyword">return</span> <span class="number">0</span>;ch=getchar();&#125;</span><br><span class="line">        <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">        <span class="keyword">return</span> x*=flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Fast_IO;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> l[maxn],r[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Segment_Tree&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        LL sum;</span><br><span class="line">    &#125;t[maxn*<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k1)</span></span>&#123;</span><br><span class="line">        t[k1].sum=t[k1&lt;&lt;<span class="number">1</span>].sum+t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        t[k1].l=l;t[k1].r=r;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">            t[k1].sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        build(k1&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">        build(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        update(k1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change_point</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> pos,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos&gt;t[k1].r||pos&lt;t[k1].l)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(t[k1].r==t[k1].l)&#123;</span><br><span class="line">            t[k1].sum+=k;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        change_point(k1&lt;&lt;<span class="number">1</span>,pos,k);</span><br><span class="line">        change_point(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos,k);</span><br><span class="line">        update(k1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&gt;t[k1].r||R&lt;t[k1].l)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=t[k1].l&amp;&amp;R&gt;=t[k1].r)&#123;</span><br><span class="line">            <span class="keyword">return</span> t[k1].sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> query(k1&lt;&lt;<span class="number">1</span>,L,R)+query(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Segment_Tree;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Binary_Indexed_Tree&#123;</span><br><span class="line">    LL c[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(;x&lt;maxn;x+=x&amp;-x)c[x]+=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        LL res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;x;x-=x&amp;-x)res+=c[x];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(;x&lt;maxn;x+=x&amp;-x)c[x]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Binary_Indexed_Tree;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> col,l,r;</span><br><span class="line">&#125;d[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    read(n);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        read(d[i].col);</span><br><span class="line">        read(d[i].l);</span><br><span class="line">        read(d[i].r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)r[d[i].col]++;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;<span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"0 "</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)&#123;</span><br><span class="line">        Change(d[i].col,-l[d[i].col]);</span><br><span class="line"><span class="comment">//        change_point(1,d[i].col,-l[d[i].col]);</span></span><br><span class="line">        l[d[i<span class="number">-1</span>].col]++;</span><br><span class="line">        r[d[i].col]--;</span><br><span class="line"><span class="comment">//        change_point(1,d[i-1].col,r[d[i-1].col]);</span></span><br><span class="line">        Change(d[i<span class="number">-1</span>].col,r[d[i<span class="number">-1</span>].col]);</span><br><span class="line"><span class="comment">//        printf("%lld ",query(1,d[i].l,d[i].r));</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld "</span>,Query(d[i].r)-Query(d[i].l<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>nowcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #618 (Div. 2)</title>
    <url>/2020/02/11/Codeforces-Round-618-Div-2/</url>
    <content><![CDATA[<h2 id="a.-non-zero">A. Non-zero</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">			<span class="keyword">if</span>(a[i]==<span class="number">0</span>)cnt++;</span><br><span class="line">			sum+=a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		sum+=cnt;</span><br><span class="line">		ans+=cnt;</span><br><span class="line">		<span class="keyword">if</span>(sum==<span class="number">0</span>)ans++;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-assigning-to-classes">B. Assigning to Classes</h2>
<p>考虑最终作中位数的两位同学。排序后，第i(<span class="math inline">\(i\leq n\)</span>​)位同学的可行配对区间为[n+1,n+i]，显然第n+1位同学为前n位同学的最佳配对结果。[n+1,2*n]同理。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		sort(a+<span class="number">1</span>,a+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">int</span> ans=INF;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)ans=min(ans,a[n+<span class="number">1</span>]-a[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++)ans=min(ans,a[i]-a[n]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-anu-has-a-function">C. Anu Has a Function</h2>
<p>执行f函数的过程实际上是把a[1]的一部分二进制位从1变为0的过程。如果在a[1~n]中，仅有a[i]的第k位为1，我们称k是a[i]独一无二的二进制位。对于a[1]独一无二的二进制位不会在f过程中被变0。按照每个a[i]仅保留独一无二二进制位后的结果排序便是答案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> v,cntt;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Data &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cntt&gt;b.cntt;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d[i].v);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=d[i].v;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;j)&amp;d[i].v)cnt[j]++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=d[i].v;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;j)&amp;d[i].v)&#123;</span><br><span class="line">				<span class="keyword">if</span>(cnt[j]==<span class="number">1</span>)&#123;</span><br><span class="line">					d[i].cntt+=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(d+<span class="number">1</span>,d+n+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,d[i].v);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-aerodynamic">D. Aerodynamic</h2>
<p>检验是否中心对称即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;<span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps)<span class="keyword">return</span> <span class="number">0</span>;<span class="keyword">return</span> x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">	<span class="keyword">double</span> x,y;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">	<span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Point MID;</span><br><span class="line">	MID.x=(p[<span class="number">1</span>].x+p[<span class="number">1</span>+n/<span class="number">2</span>].x)/<span class="number">2</span>;</span><br><span class="line">	MID.y=(p[<span class="number">1</span>].y+p[<span class="number">1</span>+n/<span class="number">2</span>].y)/<span class="number">2</span>; </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(dcmp((p[i].x+p[i+n/<span class="number">2</span>].x)/<span class="number">2</span>-MID.x)!=<span class="number">0</span>||dcmp((p[i].y+p[i+n/<span class="number">2</span>].y)/<span class="number">2</span>-MID.y)!=<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder Beginner Contest 154</title>
    <url>/2020/02/11/AtCoder-Beginner-Contest-154/</url>
    <content><![CDATA[<h2 id="a.remaining-balls">A.Remaining Balls</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> A,B,C;</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;A&gt;&gt;B&gt;&gt;a&gt;&gt;b&gt;&gt;C;</span><br><span class="line">	<span class="keyword">if</span>(A==C)a--;</span><br><span class="line">	<span class="keyword">else</span> b--;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,a,b);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.i-miss-you...">B.I miss you...</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	<span class="keyword">int</span> n=s.length();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">putchar</span>(<span class="string">'x'</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.distinct-or-not">C.Distinct or Not</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; vis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">		<span class="keyword">if</span>(vis.count(x))flag=<span class="number">1</span>;</span><br><span class="line">		vis[x]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!flag)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.dice-in-line">D.Dice in Line</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,k;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> MAX=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;=n;i++)&#123;</span><br><span class="line">		MAX=max(MAX,sum[i]-sum[i-k]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,(MAX+k)/<span class="number">2.0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.almost-everywhere-zero">E.Almost Everywhere Zero</h2>
<p>数位dp。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line">LL C[maxn][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="built_in">string</span> s,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k==<span class="number">0</span>||s.length()==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> n=s.length(),t=s[<span class="number">0</span>]-<span class="string">'0'</span>;</span><br><span class="line">	<span class="keyword">if</span>(t==<span class="number">0</span>)<span class="keyword">return</span> dfs(s.substr(<span class="number">1</span>),k);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> C[n<span class="number">-1</span>][k]*<span class="built_in">pow</span>(<span class="number">9</span>,k)+(t<span class="number">-1</span>)*C[n<span class="number">-1</span>][k<span class="number">-1</span>]*<span class="built_in">pow</span>(<span class="number">9</span>,k<span class="number">-1</span>)+dfs(s.substr(<span class="number">1</span>),k<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;k;</span><br><span class="line">	<span class="keyword">int</span> n=s.length();</span><br><span class="line">	C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i&amp;&amp;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">			C[i][j]=C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i]!=<span class="string">'0'</span>)cnt++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(cnt&gt;=k)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dfs(s,k)+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dfs(s,k));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>atcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>2020牛客寒假算法基础集训营3</title>
    <url>/2020/02/11/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A53/</url>
    <content><![CDATA[<h2 id="a.牛牛的drb迷宫i">A.牛牛的DRB迷宫I</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">55</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i][j]==<span class="string">'R'</span>&amp;&amp;j&lt;m<span class="number">-1</span>)&#123;</span><br><span class="line">				dp[i][j+<span class="number">1</span>]=(dp[i][j+<span class="number">1</span>]+dp[i][j])%MOD;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(s[i][j]==<span class="string">'D'</span>&amp;&amp;i&lt;n<span class="number">-1</span>)&#123;</span><br><span class="line">				dp[i+<span class="number">1</span>][j]=(dp[i+<span class="number">1</span>][j]+dp[i][j])%MOD;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(s[i][j]==<span class="string">'B'</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(j&lt;m<span class="number">-1</span>)dp[i][j+<span class="number">1</span>]=(dp[i][j+<span class="number">1</span>]+dp[i][j])%MOD;</span><br><span class="line">				<span class="keyword">if</span>(i&lt;n<span class="number">-1</span>)dp[i+<span class="number">1</span>][j]=(dp[i+<span class="number">1</span>][j]+dp[i][j])%MOD;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n<span class="number">-1</span>][m<span class="number">-1</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="c.牛牛的数组越位">C.牛牛的数组越位</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T,n,m,p,x,y,val;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;p);</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">0</span>,flagg=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;val);</span><br><span class="line">			<span class="keyword">int</span> tmp=x*m+y;</span><br><span class="line">			<span class="keyword">if</span>(tmp&lt;<span class="number">0</span>||tmp&gt;=m*n)&#123;</span><br><span class="line">                flagg=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> xx=tmp/m;</span><br><span class="line">            <span class="keyword">int</span> yy=tmp-(xx*m);</span><br><span class="line">			<span class="keyword">if</span>(x&gt;=<span class="number">0</span>&amp;&amp;x&lt;n&amp;&amp;y&gt;=<span class="number">0</span>&amp;&amp;y&lt;m)a[x][y]=val;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(xx&gt;=<span class="number">0</span>&amp;&amp;xx&lt;n&amp;&amp;yy&gt;=<span class="number">0</span>&amp;&amp;yy&lt;m)&#123;</span><br><span class="line">				flag=<span class="number">1</span>;</span><br><span class="line">				a[xx][yy]=val;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flagg)<span class="built_in">puts</span>(<span class="string">"Runtime error"</span>);</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m<span class="number">-1</span>;j++)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i][j]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[i][m<span class="number">-1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"Undefined Behaviour"</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Accepted"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.牛牛与二叉树的数组存储">D.牛牛与二叉树的数组存储</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">4e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],pos[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(a,<span class="number">-1</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">int</span> MAX=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		MAX=max(MAX,a[i]);</span><br><span class="line">		<span class="keyword">if</span>(a[i]!=<span class="number">-1</span>)pos[a[i]]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"The size of the tree is %d\n"</span>,MAX);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Node %d is the root node of the tree\n"</span>,a[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;MAX;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"The father of node %d is %d, the left child is %d, and the right child is %d\n"</span>,i,a[pos[i]/<span class="number">2</span>],a[pos[i]*<span class="number">2</span>],a[pos[i]*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The father of node %d is %d, the left child is %d, and the right child is %d\n"</span>,MAX,a[pos[MAX]/<span class="number">2</span>],a[pos[MAX]*<span class="number">2</span>],a[pos[MAX]*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="f.牛牛的link-power-i">F.牛牛的Link Power I</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;a[i]);</span><br><span class="line">	<span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">	LL dis=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="number">1</span>)r++,dis+=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		dis-=r;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="number">1</span>)&#123;</span><br><span class="line">			ans=(ans+dis)%MOD;</span><br><span class="line">			r--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="g.牛牛的link-power-ii">G.牛牛的Link Power II</h2>
<p>线段树维护一下区间内所有1到区间左/右端距离和。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> LL maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Segment_Tree&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	    LL l,r,ldis,rdis,cnt;</span><br><span class="line">	&#125;t[maxn*<span class="number">4</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(LL k1)</span></span>&#123;</span><br><span class="line">		t[k1].cnt=t[k1&lt;&lt;<span class="number">1</span>].cnt+t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cnt;</span><br><span class="line">		t[k1].ldis=t[k1&lt;&lt;<span class="number">1</span>].ldis+t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ldis+t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cnt*(t[k1&lt;&lt;<span class="number">1</span>].r-t[k1&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">		t[k1].rdis=t[k1&lt;&lt;<span class="number">1</span>].rdis+t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rdis+t[k1&lt;&lt;<span class="number">1</span>].cnt*(t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(LL k1,LL l,LL r)</span></span>&#123;</span><br><span class="line">    	t[k1].l=l;t[k1].r=r;</span><br><span class="line">    	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">    	    t[k1].cnt=(a[l]==<span class="number">1</span>);</span><br><span class="line">    	    <span class="keyword">if</span>(t[k1].cnt)t[k1].ldis=t[k1].rdis=<span class="number">1</span>;</span><br><span class="line">    	    <span class="keyword">return</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	LL mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    	build(k1&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    	build(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">   		update(k1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_point</span><span class="params">(LL k1,LL pos,LL k)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(pos&gt;t[k1].r||pos&lt;t[k1].l)<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span>(t[k1].r==t[k1].l)&#123;</span><br><span class="line">    		t[k1].cnt=k;</span><br><span class="line">    		<span class="keyword">if</span>(t[k1].cnt)t[k1].ldis=t[k1].rdis=<span class="number">1</span>;</span><br><span class="line">    	    <span class="keyword">else</span> t[k1].ldis=t[k1].rdis=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	change_point(k1&lt;&lt;<span class="number">1</span>,pos,k);</span><br><span class="line">    	change_point(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos,k);</span><br><span class="line">    	update(k1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">queryl</span><span class="params">(LL k1,LL L,LL R)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(L&gt;t[k1].r||R&lt;t[k1].l||L&gt;R)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">if</span>(L&lt;=t[k1].l&amp;&amp;R&gt;=t[k1].r)&#123;</span><br><span class="line"><span class="comment">//    		printf("   [%d,%d]=%d\n ",t[k1].l,t[k1].r,t[k1].rdis+t[k1].cnt*(R-t[k1].r));</span></span><br><span class="line">    	    <span class="keyword">return</span> t[k1].rdis+t[k1].cnt*(R-t[k1].r);</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> queryl(k1&lt;&lt;<span class="number">1</span>,L,R)+queryl(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">queryr</span><span class="params">(LL k1,LL L,LL R)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(L&gt;t[k1].r||R&lt;t[k1].l||L&gt;R)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">if</span>(L&lt;=t[k1].l&amp;&amp;R&gt;=t[k1].r)&#123;</span><br><span class="line">    	    <span class="keyword">return</span> t[k1].ldis+t[k1].cnt*(t[k1].l-L);</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> queryr(k1&lt;&lt;<span class="number">1</span>,L,R)+queryr(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Segment_Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	LL n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;a[i]);</span><br><span class="line">	build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	LL r=<span class="number">0</span>;</span><br><span class="line">	LL dis=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="number">1</span>)r++,dis+=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		dis-=r;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="number">1</span>)&#123;</span><br><span class="line">			ans=(ans+dis)%MOD;</span><br><span class="line">			r--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;m);</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		LL q,pos;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;q,&amp;pos);</span><br><span class="line">		<span class="keyword">if</span>(q==<span class="number">1</span>)&#123;</span><br><span class="line">			a[pos]=<span class="number">1</span>;</span><br><span class="line">			ans+=(queryl(<span class="number">1</span>,<span class="number">1</span>,pos<span class="number">-1</span>)+queryr(<span class="number">1</span>,pos+<span class="number">1</span>,n));</span><br><span class="line">			ans%=MOD;</span><br><span class="line">            change_point(<span class="number">1</span>,pos,<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			a[pos]=<span class="number">0</span>;</span><br><span class="line">			ans-=(queryl(<span class="number">1</span>,<span class="number">1</span>,pos<span class="number">-1</span>)+queryr(<span class="number">1</span>,pos+<span class="number">1</span>,n));</span><br><span class="line">			ans=(ans%MOD+MOD)%MOD;</span><br><span class="line">            change_point(<span class="number">1</span>,pos,<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		putchar('s');</span></span><br><span class="line"><span class="comment">//		for(LL i=1;i&lt;=n;i++)printf("%d ",a[i]);</span></span><br><span class="line"><span class="comment">//		puts("");</span></span><br><span class="line"><span class="comment">//		for(LL i=1;i&lt;=2*n;i++)printf("[%d,%d] ld=%d rd=%d cnt=%d\n",t[i].l,t[i].r,t[i].ldis,t[i].rdis,t[i].cnt);</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="h.牛牛的k合因子数">H.牛牛的k合因子数</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Sieve_of_Euler&#123;</span><br><span class="line">	<span class="keyword">int</span> nump=<span class="number">0</span>,prime[maxn];</span><br><span class="line">	<span class="keyword">bool</span> is_prime[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">memset</span>(is_prime,<span class="number">1</span>,<span class="keyword">sizeof</span>(is_prime));</span><br><span class="line">		is_prime[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(is_prime[i])prime[++nump]=i;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=nump&amp;&amp;prime[j]*i&lt;maxn;j++)&#123;</span><br><span class="line">				is_prime[i*prime[j]]=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Sieve_of_Euler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	do_main();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j*j&lt;=i;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i%j==<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(!is_prime[j])cnt++;</span><br><span class="line">				<span class="keyword">if</span>(j*j!=i&amp;&amp;!is_prime[i/j])cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans[cnt]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		<span class="keyword">int</span> k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[k]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="i.牛牛的汉诺塔">I.牛牛的汉诺塔</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">66</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">LL f[maxn][<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		f[n][<span class="number">1</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(n<span class="number">-1</span>);</span><br><span class="line">	f[n][<span class="number">1</span>][<span class="number">2</span>]+=f[n<span class="number">-1</span>][<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">	f[n][<span class="number">1</span>][<span class="number">3</span>]+=f[n<span class="number">-1</span>][<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">	f[n][<span class="number">2</span>][<span class="number">1</span>]+=f[n<span class="number">-1</span>][<span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line">	f[n][<span class="number">2</span>][<span class="number">3</span>]+=f[n<span class="number">-1</span>][<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">	f[n][<span class="number">3</span>][<span class="number">1</span>]+=f[n<span class="number">-1</span>][<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line">	f[n][<span class="number">3</span>][<span class="number">2</span>]+=f[n<span class="number">-1</span>][<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">	f[n][<span class="number">1</span>][<span class="number">3</span>]++;</span><br><span class="line">	f[n][<span class="number">1</span>][<span class="number">2</span>]+=f[n<span class="number">-1</span>][<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line">	f[n][<span class="number">1</span>][<span class="number">3</span>]+=f[n<span class="number">-1</span>][<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">	f[n][<span class="number">2</span>][<span class="number">1</span>]+=f[n<span class="number">-1</span>][<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">	f[n][<span class="number">2</span>][<span class="number">3</span>]+=f[n<span class="number">-1</span>][<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">	f[n][<span class="number">3</span>][<span class="number">1</span>]+=f[n<span class="number">-1</span>][<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">	f[n][<span class="number">3</span>][<span class="number">2</span>]+=f[n<span class="number">-1</span>][<span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    dfs(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"A-&gt;B:%lld\n"</span>,f[n][<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"A-&gt;C:%lld\n"</span>,f[n][<span class="number">1</span>][<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"B-&gt;A:%lld\n"</span>,f[n][<span class="number">2</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"B-&gt;C:%lld\n"</span>,f[n][<span class="number">2</span>][<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"C-&gt;A:%lld\n"</span>,f[n][<span class="number">3</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"C-&gt;B:%lld\n"</span>,f[n][<span class="number">3</span>][<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"SUM:%lld\n"</span>,f[n][<span class="number">1</span>][<span class="number">2</span>]+f[n][<span class="number">1</span>][<span class="number">3</span>]+f[n][<span class="number">2</span>][<span class="number">1</span>]+f[n][<span class="number">2</span>][<span class="number">3</span>]+f[n][<span class="number">3</span>][<span class="number">1</span>]+f[n][<span class="number">3</span>][<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>nowcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>2020牛客寒假算法基础集训营2</title>
    <url>/2020/02/11/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A52/</url>
    <content><![CDATA[<p>打比赛打到一半被表妹拽去剪纸做正方体ww，小学生假期还有作业也太惨了吧（大学真好</p>
<h2 id="a.做游戏">A.做游戏</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,c,x,y,z;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>,&amp;a,&amp;b,&amp;c,&amp;x,&amp;y,&amp;z);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="number">1L</span>L*min(a,y)+min(b,z)+min(c,x));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.排数字">B.排数字</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	<span class="keyword">int</span> cnt1=<span class="number">0</span>,cnt6=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i]==<span class="string">'1'</span>)cnt1++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'6'</span>)cnt6++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min(cnt1,cnt6<span class="number">-1</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.算概率">C.算概率</h2>
<p>dp[i][j]表示前i题做对j题的概率。</p>
<p>dp[i][j]=dp[i-1][j]*(1-p[i])+dp[i-1][j-1]*p[i]</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">LL p[maxn],dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;p[i]);</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		dp[i][<span class="number">0</span>]=dp[i<span class="number">-1</span>][<span class="number">0</span>]*(MOD+<span class="number">1</span>-p[i])%MOD;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			dp[i][j]=(dp[i<span class="number">-1</span>][j]*(MOD+<span class="number">1</span>-p[i])+dp[i<span class="number">-1</span>][j<span class="number">-1</span>]*p[i])%MOD;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,dp[n][i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.数三角">D.数三角</h2>
<p>先给一开始想到极角排序后用双指针的自己一嘴巴子（啪</p>
<p>钝角三角形<span class="math inline">\(a^2+b^2&lt;c^2\)</span>，时间复杂度虽不如上述方法优但也足够了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-12</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Len2</span><span class="params">(Vector a)</span></span>&#123;<span class="keyword">return</span> a.x*a.x+a.y*a.y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">				Vector a=(Vector)&#123;p[j].x-p[i].x,p[j].y-p[i].y&#125;,b=(Vector)&#123;p[k].x-p[i].x,p[k].y-p[i].y&#125;,c=(Vector)&#123;p[k].x-p[j].x,p[k].y-p[j].y&#125;;</span><br><span class="line">				<span class="keyword">if</span>(a.x*b.y-a.y*b.x==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">int</span> lena2=Len2(a),lenb2=Len2(b),lenc2=Len2(c);</span><br><span class="line">				<span class="keyword">if</span>(lenc2&lt;lena2)swap(lena2,lenc2);</span><br><span class="line">				<span class="keyword">if</span>(lenc2&lt;lenb2)swap(lenb2,lenc2);</span><br><span class="line">				<span class="keyword">if</span>(lena2+lenb2&lt;lenc2)cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.做计数">E.做计数</h2>
<p>两边平方并移项，<span class="math inline">\(2\sqrt{ij}=k-(i+j)\)</span>，令<span class="math inline">\(\sqrt{ij}\)</span>为整数即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	LL n,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(LL i=<span class="number">1</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(LL j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i*i%j==<span class="number">0</span>)ans+=<span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ans++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="f.拿物品">F.拿物品</h2>
<p>按照a+b排序，按顺序拿。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> a,b,pos;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Data &amp;c)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a+b&gt;c.a+c.b;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i].a);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i].b);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)p[i].pos=i;</span><br><span class="line">	sort(p+<span class="number">1</span>,p+n+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"%d "</span>,p[i].pos);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i+=<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"%d "</span>,p[i].pos);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="g.判正误">G.判正误</h2>
<p>哈希思想。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Quick_Pow&#123;</span><br><span class="line">	<span class="function">LL <span class="title">do_main</span><span class="params">(LL a,<span class="keyword">int</span> k,<span class="keyword">int</span> MOD)</span></span>&#123;</span><br><span class="line">    	LL r=<span class="number">1</span>,base=a;</span><br><span class="line">		<span class="keyword">while</span>(k)&#123;</span><br><span class="line">        	<span class="keyword">if</span>(k&amp;<span class="number">1</span>)r=r*base%MOD;</span><br><span class="line">        	base=base*base%MOD;</span><br><span class="line">        	k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Quick_Pow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		LL a,b,c,g;</span><br><span class="line">		<span class="keyword">int</span> d,e,f;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%d%d%d%lld"</span>,&amp;a,&amp;b,&amp;c,&amp;d,&amp;e,&amp;f,&amp;g);</span><br><span class="line">		<span class="keyword">int</span> MOD1=<span class="number">1e9</span>+<span class="number">7</span>,MOD2=<span class="number">2020020601</span>;</span><br><span class="line">		LL ans1=do_main(a,d,MOD1),ans2=do_main(b,e,MOD1),ans3=do_main(c,f,MOD1);</span><br><span class="line">		LL ans4=do_main(a,d,MOD2),ans5=do_main(b,e,MOD2),ans6=do_main(c,f,MOD2);</span><br><span class="line">		<span class="keyword">if</span>(ans1+ans2+ans3==g&amp;&amp;ans4+ans5+ans6==g)<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="h.施魔法">H.施魔法</h2>
<p>dp，维护前缀dp[i-1]-a[i]最小值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL INF=(<span class="number">1L</span>L&lt;&lt;<span class="number">60</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">300005</span>;</span><br><span class="line"></span><br><span class="line">LL dp[maxn],a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    LL MIN=INF;</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;k)dp[i]=INF;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(MIN&gt;dp[i-k]-a[i-k+<span class="number">1</span>])MIN=dp[i-k]-a[i-k+<span class="number">1</span>];</span><br><span class="line">            dp[i]=MIN+a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="i.建通道">I.建通道</h2>
<p>重复元素可以0代价联通，先去重，找出既有0又有1的最低二进制位k，答案就是(1&lt;&lt;k)*(去重后元素个数-1)。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> m=unique(a+<span class="number">1</span>,a+n+<span class="number">1</span>)-a<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;<span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> orsum=<span class="number">0</span>,andsum=<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)orsum|=a[i],andsum&amp;=a[i];</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(((<span class="number">1</span>&lt;&lt;k)&amp;orsum)==<span class="number">0</span>||(<span class="number">1</span>&lt;&lt;k)&amp;andsum)k++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(<span class="number">1L</span>L&lt;&lt;k)*(m<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>nowcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>2020牛客寒假算法基础集训营1</title>
    <url>/2020/02/11/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A51/</url>
    <content><![CDATA[<h2 id="a.honoka和格点三角形">A.honoka和格点三角形</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">if</span>((n==<span class="number">2</span>&amp;&amp;m==<span class="number">2</span>)||n==<span class="number">1</span>||m==<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(<span class="number">1L</span>L*(n<span class="number">-1</span>)*(n<span class="number">-2</span>)%MOD*(m<span class="number">-2</span>)%MOD*<span class="number">2</span>%MOD+<span class="number">1L</span>L*(n<span class="number">-2</span>)*(n<span class="number">-2</span>)%MOD*(m<span class="number">-1</span>)%MOD*<span class="number">2</span>%MOD+<span class="number">1L</span>L*(m<span class="number">-1</span>)*m%MOD*(n<span class="number">-2</span>)%MOD*<span class="number">2</span>%MOD+<span class="number">1L</span>L*(m<span class="number">-2</span>)*m%MOD*(n<span class="number">-1</span>)%MOD*<span class="number">2</span>%MOD)%MOD);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.kotori和bangdream">B.kotori和bangdream</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,x,a,b;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;x,&amp;a,&amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,n*<span class="number">0.01</span>*x*a+n*<span class="number">0.01</span>*(<span class="number">100</span>-x)*b);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.umi和弓道">C.umi和弓道</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> LL INF=<span class="number">100000000000000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; v;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">culx</span><span class="params">(Point x,Point y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.x==y.x)<span class="keyword">return</span> x.x;</span><br><span class="line">    <span class="keyword">double</span> k=(y.y-x.y)/(y.x-x.x);</span><br><span class="line">    <span class="keyword">return</span> x.x-x.y/k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">culy</span><span class="params">(Point x,Point y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.y==y.y)<span class="keyword">return</span> x.y;</span><br><span class="line">    <span class="keyword">double</span> k=(y.x-x.x)/(y.y-x.y);</span><br><span class="line">    <span class="keyword">return</span> x.y-x.x/k;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[<span class="number">0</span>].x,&amp;p[<span class="number">0</span>].y);</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">    <span class="keyword">double</span> ans=INF;</span><br><span class="line">    v.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i].y*p[<span class="number">0</span>].y&lt;<span class="number">0</span>)v.push_back(culx(p[i],p[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.begin(),v.begin()+v.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+n-k<span class="number">-1</span>&lt;v.size();i++)&#123;</span><br><span class="line">        ans=min(ans,v[i+n-k<span class="number">-1</span>]-v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    v.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i].x*p[<span class="number">0</span>].x&lt;<span class="number">0</span>)v.push_back(culy(p[i],p[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.begin(),v.begin()+v.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+n-k<span class="number">-1</span>&lt;v.size();i++)&#123;</span><br><span class="line">        ans=min(ans,v[i+n-k<span class="number">-1</span>]-v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans==INF)<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.hanayo和米饭">D.hanayo和米饭</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,ans;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]),vis[a[i]]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!vis[i])ans=i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.rin和快速迭代">E.rin和快速迭代</h2>
<p>模拟。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function">LL <span class="title">cul</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    LL res=<span class="number">0</span>,i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i*i&lt;=x;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>)res+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i--;</span><br><span class="line">    <span class="keyword">if</span>(i*i==x)res--;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x);</span><br><span class="line">    LL ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">2</span>)&#123;</span><br><span class="line">        ans++;</span><br><span class="line">        x=cul(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="f.maki和tree">F.maki和tree</h2>
<p>预处理出每个白联通块大小，枚举每个黑点统计答案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> LL INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> LL maxn=<span class="number">100005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    LL u,v,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">LL nume=<span class="number">0</span>;</span><br><span class="line">LL last[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(LL u,LL v)</span></span>&#123;</span><br><span class="line">    e[++nume]=(Edge)&#123;u,v,last[u]&#125;;</span><br><span class="line">    last[u]=nume;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">LL dp[maxn];</span><br><span class="line"><span class="keyword">bool</span> c[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line">LL fff[maxn],cnt[maxn],cntt;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(LL u,LL ff)</span></span>&#123;</span><br><span class="line">    cntt++;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    fff[u]=ff;</span><br><span class="line">    <span class="keyword">for</span>(LL i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">        LL v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v]&amp;&amp;c[v]==<span class="number">0</span>)dfs1(v,ff);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; v;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">0</span>;i&lt;n;i++)c[i+<span class="number">1</span>]=(s[i]==<span class="string">'B'</span>?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        LL u,v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;u,&amp;v);</span><br><span class="line">        add_edge(u,v);add_edge(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]&amp;&amp;c[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            cntt=<span class="number">0</span>;</span><br><span class="line">            dfs1(i,i);</span><br><span class="line">            cnt[i]=cntt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        v.clear();</span><br><span class="line">        <span class="keyword">if</span>(c[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(LL j=last[i];j;j=e[j].nxt)&#123;</span><br><span class="line">                <span class="keyword">if</span>(c[e[j].v]==<span class="number">0</span>)v.push_back(cnt[fff[e[j].v]]);</span><br><span class="line">            &#125;</span><br><span class="line">            LL sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(LL j=<span class="number">0</span>;j&lt;v.size();j++)&#123;</span><br><span class="line">                sum+=v[j];</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=sum*<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span>(LL j=<span class="number">0</span>;j&lt;v.size();j++)&#123;</span><br><span class="line">                ans+=v[j]*(sum-v[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="g.eli和字符串">G.eli和字符串</h2>
<p>二分答案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> cnt[maxn][<span class="number">30</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Binary_Search&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+len<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt[i+len<span class="number">-1</span>][j]-cnt[i<span class="number">-1</span>][j]&gt;=k)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=n;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid))r=mid;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> check(l)?l:<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Binary_Search;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">            cnt[i][j]=cnt[i<span class="number">-1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[i][s[i<span class="number">-1</span>]-<span class="string">'a'</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,do_main());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="h.nozomi和字符串">H.nozomi和字符串</h2>
<p>和上题解法几乎一样。（官方并不</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> cnt[maxn][<span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Binary_Search&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+len<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((cnt[i+len<span class="number">-1</span>][<span class="number">0</span>]-cnt[i<span class="number">-1</span>][<span class="number">0</span>]&lt;=k)||(cnt[i+len<span class="number">-1</span>][<span class="number">1</span>]-cnt[i<span class="number">-1</span>][<span class="number">1</span>]&lt;=k))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=n;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid))l=mid;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Binary_Search;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cnt[i][<span class="number">0</span>]=cnt[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        cnt[i][<span class="number">1</span>]=cnt[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">        cnt[i][s[i<span class="number">-1</span>]-<span class="string">'0'</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,do_main());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="i.nico和niconiconi">I.nico和niconiconi</h2>
<p>动态规划。dp[i]表示s[i~n]的最优值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">300005</span>;</span><br><span class="line"> </span><br><span class="line">LL dp[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a,b,c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        dp[i]=dp[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">4</span><span class="number">-1</span>&lt;=n<span class="number">-1</span>&amp;&amp;s.substr(i,<span class="number">4</span>)==<span class="string">"nico"</span>)dp[i]=max(dp[i],dp[i+<span class="number">4</span>]+a);</span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">6</span><span class="number">-1</span>&lt;=n<span class="number">-1</span>&amp;&amp;s.substr(i,<span class="number">6</span>)==<span class="string">"niconi"</span>)dp[i]=max(dp[i],dp[i+<span class="number">6</span>]+b);</span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">10</span><span class="number">-1</span>&lt;=n<span class="number">-1</span>&amp;&amp;s.substr(i,<span class="number">10</span>)==<span class="string">"niconiconi"</span>)dp[i]=max(dp[i],dp[i+<span class="number">10</span>]+c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>nowcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #616 (Div. 2)</title>
    <url>/2020/02/11/Codeforces-Round-616-Div-2/</url>
    <content><![CDATA[<p>又有一位学长上紫了，我什么时候才能和他们一样强啊（大概不能</p>
<h2 id="a.-even-but-not-even">A. Even But Not Even</h2>
<p>if奇数个数≥2，yes，ans=两个奇数接起来； else，no。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">string</span> s;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s;</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>((s[i]-<span class="string">'0'</span>)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">				cnt++;ans*=<span class="number">10</span>;ans+=s[i]-<span class="string">'0'</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(cnt&gt;=<span class="number">2</span>)<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(cnt&gt;=<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-array-sharpening">B. Array Sharpening</h2>
<p>check每一位的值是否≥min(该位到达最左端的距离,该位到达最左端的距离)。如果n为偶数还要保证最中间两个数的其中一个≥最短距离+1。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">300005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&lt;min(i<span class="number">-1</span>,n-i))&#123;</span><br><span class="line">				flag=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;!(a[n/<span class="number">2</span>]&gt;=n/<span class="number">2</span>||a[n/<span class="number">2</span>+<span class="number">1</span>]&gt;=n/<span class="number">2</span>))flag=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-mind-control">C. Mind Control</h2>
<p>不妨默认取数顺序：被劝说同学-&gt;没被劝说同学-&gt;我。数据范围辣么小，直接暴力枚举劝说同学取数之后剩余的区间和没被劝说同学决策后的结果。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3505</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,m,k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		k=min(k,m<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=k+<span class="number">1</span>;l++)&#123;</span><br><span class="line">			<span class="keyword">int</span> MIN=INF,rest=m<span class="number">-1</span>-k,r=l+n-k<span class="number">-1</span>;</span><br><span class="line"><span class="comment">//			printf("l=%d r=%d\n",l,r);</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=l;j&lt;=l+rest;j++)&#123;</span><br><span class="line"><span class="comment">//				printf("%d %d\n",j,r-(rest-(j-l)));</span></span><br><span class="line">				MIN=min(MIN,max(a[j],a[r-(rest-(j-l))]));</span><br><span class="line">			&#125;</span><br><span class="line"><span class="comment">//			printf("MIN=%d\n",MIN);</span></span><br><span class="line">			ans=max(MIN,ans);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-irreducible-anagrams">D. Irreducible Anagrams</h2>
<p>yes的情况：①区间长为1 ②区间左右端点字母不同 ③区间内有至少3个不同字母</p>
<p>构造：①略 ②交换左右端点 ③设三个字母为a、b、c，端点为a，从左向右扫描字符串时b较c先出现，则将第一个c换到首位，第一个b换到末尾即可。</p>
<p>证明左右端点相等且区间内只有两个字母时No：设两个字母为a、b，端点为a，显然t的首末为应为b。在l位置，t比s多一个b，在r-1位置，t比s少一个b，期间必存在位置t与s的b数量相等。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[maxn][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	<span class="keyword">int</span> n=s.length();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">			cnt[i][j]=cnt[i<span class="number">-1</span>][j];</span><br><span class="line">		&#125;</span><br><span class="line">		cnt[i][s[i<span class="number">-1</span>]-<span class="string">'a'</span>]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> q;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="keyword">int</span> l,r;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">		<span class="keyword">int</span> cntt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(cnt[r][i]-cnt[l<span class="number">-1</span>][i])cntt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(s[l<span class="number">-1</span>]!=s[r<span class="number">-1</span>]||cntt&gt;=<span class="number">3</span>||r==l)<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #613 (Div. 2)</title>
    <url>/2020/02/11/Codeforces-Round-613-Div-2/</url>
    <content><![CDATA[<h2 id="a.-mezo-playing-zoma">A. Mezo Playing Zoma</h2>
<p>范围[-L,R]。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i]==<span class="string">'L'</span>)a++;</span><br><span class="line">		<span class="keyword">else</span> b++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a+b+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-just-eat-it">B. Just Eat It!</h2>
<p>查找是否有前缀和（不包含全序列的和）或后缀和（不包含全序列的和）不小于0。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line">LL sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">			sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">			<span class="keyword">if</span>(sum[i]&lt;=<span class="number">0</span>)flag=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">1</span>;i--)&#123;</span><br><span class="line">			sum[i]=sum[i+<span class="number">1</span>]+a[i];</span><br><span class="line">			<span class="keyword">if</span>(sum[i]&lt;=<span class="number">0</span>)flag=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-fadi-and-lcm">C. Fadi and LCM</h2>
<p>将X质因数分解，如果a包含因子p，则b一定不包含该因子，否则不满足最小要求。枚举a包含那些X的质因子即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,k,now,b[<span class="number">1010</span>],ans,len=<span class="number">0</span>,sqnn;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> k,<span class="keyword">long</span> <span class="keyword">long</span> now)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k==len)&#123;</span><br><span class="line">		<span class="comment">//printf("%lld\n",now);</span></span><br><span class="line">		<span class="keyword">if</span>(now&gt;sqnn&amp;&amp;ans&gt;now) ans=now;</span><br><span class="line">		<span class="keyword">return</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	dfs(k+<span class="number">1</span>,now);</span><br><span class="line">	dfs(k+<span class="number">1</span>,now*b[k+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">	sqnn=<span class="built_in">floor</span>(<span class="built_in">sqrt</span>(n));</span><br><span class="line">	<span class="comment">//printf("%lld\n",sqnn);</span></span><br><span class="line">	k=ans=n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">2</span>;i*i&lt;=n;i++) <span class="keyword">if</span>(k%i==<span class="number">0</span>)&#123;</span><br><span class="line">		b[++len]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(k%i==<span class="number">0</span>)&#123;</span><br><span class="line">			k/=i;</span><br><span class="line">			b[len]*=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	b[++len]=k;</span><br><span class="line">	<span class="comment">//for(long long i=1;i&lt;=len;i++) printf("%lld#\n",b[i]);</span></span><br><span class="line">	dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	dfs(<span class="number">1</span>,b[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,n/ans,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-dr.-evil-underscores">D. Dr. Evil Underscores</h2>
<p>建立一棵01Trie树，从高位向低位递推，dp[i]表示到当前节点对应位数当前节点状态的后续状态为最大值状态时最大值前当前节点对应位数位的值。</p>
<p>如果第i个结点的父亲节点有两个子结点，则dp[i]=dp[f[i]]+(1&lt;&lt;(当前节点对应位数));否则dp[i]=dp[f[i]]。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL INF=<span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e5</span>+<span class="number">5</span>)*<span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">LL ch[maxn][<span class="number">2</span>],f[maxn];</span><br><span class="line">LL dp[maxn];</span><br><span class="line">LL dep[maxn];</span><br><span class="line">LL a[maxn];</span><br><span class="line"><span class="keyword">int</span> size=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">			<span class="keyword">int</span> u=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">				<span class="keyword">int</span> c=(x&amp;(<span class="number">1</span>&lt;&lt;i));</span><br><span class="line">				<span class="keyword">if</span>(c!=<span class="number">0</span>)c=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(!ch[u][c])&#123;</span><br><span class="line">					ch[u][c]=(++size);</span><br><span class="line">					f[size]=u;</span><br><span class="line">					dep[size]=i;</span><br><span class="line">				&#125;</span><br><span class="line">				u=ch[u][c];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		insert(a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=size;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(ch[f[i]][<span class="number">0</span>]*ch[f[i]][<span class="number">1</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">			dp[i]=dp[f[i]];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> dp[i]=dp[f[i]]+(<span class="number">1L</span>L&lt;&lt;dep[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//printf("%d %d %d\n",ch[29][0],ch[29][1],dep[30]);</span></span><br><span class="line">	LL ans=INF;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=size;i++)&#123;</span><br><span class="line"><span class="comment">//		printf("dp[%d]=%d f[]=%d %d %d %d\n",i,dp[i],f[i],dep[i],ch[i][0],ch[i][1]);</span></span><br><span class="line">		<span class="keyword">if</span>(dep[i]==<span class="number">0</span>)ans=min(ans,dp[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #612 (Div. 2)</title>
    <url>/2020/02/11/Codeforces-Round-612-Div-2/</url>
    <content><![CDATA[<h2 id="a.-angry-students">A. Angry Students</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="built_in">string</span> s;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		s+=<span class="string">'A'</span>;</span><br><span class="line">		<span class="keyword">int</span> last=n;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]==<span class="string">'A'</span>)&#123;</span><br><span class="line">				ans=max(ans,last-i<span class="number">-1</span>);</span><br><span class="line">				last=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-hyperset">B. Hyperset</h2>
<p>枚举前两种，可以唯一确定第三种的状态。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1505</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">bool</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> n,k,ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">		mp[s[i]]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			<span class="built_in">string</span> c;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;k;l++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i][l]==s[j][l])c+=s[i][l];</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>((s[i][l]==<span class="string">'S'</span>&amp;&amp;s[j][l]==<span class="string">'E'</span>)||(s[j][l]==<span class="string">'S'</span>&amp;&amp;s[i][l]==<span class="string">'E'</span>))c+=<span class="string">'T'</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>((s[i][l]==<span class="string">'T'</span>&amp;&amp;s[j][l]==<span class="string">'E'</span>)||(s[j][l]==<span class="string">'T'</span>&amp;&amp;s[i][l]==<span class="string">'E'</span>))c+=<span class="string">'S'</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>((s[i][l]==<span class="string">'S'</span>&amp;&amp;s[j][l]==<span class="string">'T'</span>)||(s[j][l]==<span class="string">'S'</span>&amp;&amp;s[i][l]==<span class="string">'T'</span>))c+=<span class="string">'E'</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(mp.count(c))ans++;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans/<span class="number">3</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-garland">C. Garland</h2>
<p>dp[i][j][k][0/1]表示前i项用掉j个奇数k个偶数最后一个数是奇/偶的最小复杂度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn][maxn][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		<span class="keyword">if</span>(a[i])vis[a[i]]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> num1=<span class="number">0</span>,num2=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&amp;<span class="number">1</span>)num1++;</span><br><span class="line">			<span class="keyword">else</span> num2++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=num1;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=num2;k++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(a[i])&#123;</span><br><span class="line">					dp[i][j][k][a[i]&amp;<span class="number">1</span>]=min(dp[i<span class="number">-1</span>][j][k][a[i]&amp;<span class="number">1</span>],dp[i<span class="number">-1</span>][j][k][!(a[i]&amp;<span class="number">1</span>)]+<span class="number">1</span>);</span><br><span class="line">					dp[i][j][k][!(a[i]&amp;<span class="number">1</span>)]=INF;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(j&gt;<span class="number">0</span>)dp[i][j][k][<span class="number">1</span>]=min(dp[i<span class="number">-1</span>][j<span class="number">-1</span>][k][<span class="number">1</span>],dp[i<span class="number">-1</span>][j<span class="number">-1</span>][k][<span class="number">0</span>]+<span class="number">1</span>);</span><br><span class="line">					<span class="keyword">if</span>(k&gt;<span class="number">0</span>)dp[i][j][k][<span class="number">0</span>]=min(dp[i<span class="number">-1</span>][j][k<span class="number">-1</span>][<span class="number">0</span>],dp[i<span class="number">-1</span>][j][k<span class="number">-1</span>][<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min(dp[n][num1][num2][<span class="number">0</span>],dp[n][num1][num2][<span class="number">1</span>]));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello 2020</title>
    <url>/2020/02/11/Hello-2020/</url>
    <content><![CDATA[<h2 id="a.-new-year-and-naming">A. New Year and Naming</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">24</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s[maxn],t[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">cin</span>&gt;&gt;t[i];</span><br><span class="line">	<span class="keyword">int</span> q;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="keyword">int</span> x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;s[(x<span class="number">-1</span>)%n+<span class="number">1</span>]+t[(x<span class="number">-1</span>)%m+<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-new-year-and-ascent-sequence">B. New Year and Ascent Sequence</h2>
<p>记录每个数列的最大值和最小值，统计最大值大于最小值的方案数。注意单个数列自身已经有上升的情况。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mi[maxn],ma[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	LL ans=<span class="number">0</span>;</span><br><span class="line">	LL cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> l;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;l);</span><br><span class="line">		<span class="keyword">int</span> MAX=<span class="number">0</span>,MIN=INF;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,x;j&lt;=l;j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">			<span class="keyword">if</span>(x&gt;MIN)flag=<span class="number">1</span>;</span><br><span class="line">			MAX=max(MAX,x);</span><br><span class="line">			MIN=min(MIN,x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">			cnt++;</span><br><span class="line">			MIN=INF,MAX=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ma[i]=MAX;</span><br><span class="line">		mi[i]=MIN;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(mi+<span class="number">1</span>,mi+n+<span class="number">1</span>);sort(ma+<span class="number">1</span>,ma+n+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> pos=cnt+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n-cnt;i++)&#123;</span><br><span class="line">		<span class="keyword">while</span>(mi[i]&gt;=ma[pos]&amp;&amp;pos&lt;=n)pos++;</span><br><span class="line">		ans+=n-pos+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ans+=cnt*n*<span class="number">2</span>-cnt-cnt*(cnt<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-new-year-and-permutation">C. New Year and Permutation</h2>
<p>分别统计不同长度对答案的贡献。</p>
<p>长度len对答案的贡献为len! * (n-len+1) * (n-len+1) * (n-len)!</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">250005</span>;</span><br><span class="line"></span><br><span class="line">LL f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,MOD;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;MOD);</span><br><span class="line">	f[<span class="number">0</span>]=f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)f[i]=(f[i<span class="number">-1</span>]*i)%MOD;</span><br><span class="line">	LL ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		ans+=((f[i]*(n-i+<span class="number">1</span>))%MOD*(n-i+<span class="number">1</span>)%MOD)*f[n-i]%MOD;</span><br><span class="line">		ans%=MOD;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Good Bye 2019</title>
    <url>/2020/02/11/Good-Bye-2019/</url>
    <content><![CDATA[<h2 id="a.-card-game">A. Card Game</h2>
<p>双方最优策略一定是出最大的牌，比较双方初始手牌中的最大值即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,a,b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;a,&amp;b);</span><br><span class="line">		<span class="keyword">int</span> MAXa=<span class="number">0</span>,MAXb=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=a;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">			MAXa=max(MAXa,x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=b;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">			MAXb=max(MAXb,x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(MAXa&gt;MAXb)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-interesting-subarray">B. Interesting Subarray</h2>
<p>如果[l,r]符合条件，则[l,r]间存在相邻元素满足条件。因此只需考虑相邻元素。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">abs</span>(a[i]-a[i+<span class="number">1</span>])&gt;<span class="number">1</span>)&#123;</span><br><span class="line">				flag=<span class="number">1</span>;</span><br><span class="line">				<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,i,i+<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag==<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-make-good">C. Make Good</h2>
<p>构造。b1=xorsum，b2=xorsum+sum。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		LL sum=<span class="number">0</span>,xorsum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			LL x;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x),sum+=x,xorsum^=x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sum==xorsum*<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"0\n\n"</span>);</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"2\n%lld %lld\n"</span>,xorsum,sum+xorsum);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-strange-device">D. Strange Device</h2>
<p>我们仅用前k+1个元素，在k+1次查询内找出m。第i次询问除a[i]以外的其他数，则在全部k+1个答案中第m小数的出现了k-m+1次，第m+1小的数出现了m次。因此答案中较大数的出现次数就是答案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,k;</span><br><span class="line">	<span class="keyword">int</span> cntMAX=<span class="number">0</span>,MAX=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k+<span class="number">1</span>;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"?"</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k+<span class="number">1</span>;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j!=i)<span class="built_in">printf</span>(<span class="string">" %d"</span>,j);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">		fflush(<span class="built_in">stdout</span>);</span><br><span class="line">		<span class="keyword">int</span> pos,val;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;pos,&amp;val);</span><br><span class="line">		<span class="keyword">if</span>(val&gt;MAX)&#123;</span><br><span class="line">			MAX=val;</span><br><span class="line">			cntMAX=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(val==MAX)cntMAX++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"! %d\n"</span>,cntMAX);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 79 (Rated for Div. 2)</title>
    <url>/2020/02/11/Educational-Codeforces-Round-79-Rated-for-Div-2/</url>
    <content><![CDATA[<h2 id="a.-new-year-garland">A. New Year Garland</h2>
<p>不妨设a≤b≤c，如果b+c≥a-1，则一定有解(b和c所对应的颜色插在a所对应颜色的空隙中)。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> a,b,c;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">		<span class="keyword">if</span>(a&lt;b)swap(a,b);</span><br><span class="line">		<span class="keyword">if</span>(a&lt;c)swap(a,c);</span><br><span class="line">		<span class="keyword">if</span>(b+c&gt;=a<span class="number">-1</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b.-verse-for-santa">B. Verse For Santa</h2>
<p>skip的数一定是不skip的情况下能到达的部分或不能到达部分的首个，在这些数中贪心取最大值skip掉即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line">LL sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		LL s;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;n,&amp;s);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]),sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">		<span class="keyword">if</span>(sum[n]&lt;=s)&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(sum[i]&lt;=s)top=i;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> MAX=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top+<span class="number">1</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&gt;MAX)MAX=a[i],ans=i;</span><br><span class="line">		&#125;</span><br><span class="line">		s+=MAX;</span><br><span class="line">		<span class="keyword">int</span> newtop=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(sum[i]&lt;=s)newtop=i;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(newtop&gt;top)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-stack-of-presents">C. Stack of Presents</h2>
<p>模拟分发礼物的过程，记录以分发礼物在栈中的最大深度dep。如果当前礼物深度&lt;dep，则一定可以通过前面的重排使其在栈顶；否则花费上方剩余礼物数*2+1的时间，并更新最大深度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],pos[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,m;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">			pos[a[i]]=i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> dep=<span class="number">0</span>;</span><br><span class="line">		LL ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">			<span class="keyword">if</span>(dep&gt;pos[b[i]])ans++;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				ans+=<span class="number">2L</span>L*(pos[b[i]]<span class="number">-1</span>-(i<span class="number">-1</span>))+<span class="number">1</span>;</span><br><span class="line">				dep=pos[b[i]];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-santas-bot">D. Santa's Bot</h2>
<p>分别统计每种礼物对答案的贡献。特定礼物对答案的贡献为：一二选中选中此种礼物的概率*三选中选中愿望单中含有此礼物的孩子的概率。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL MOD=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line">LL k[maxn],b[maxn],cnt1[maxn],cnt2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Quick_Pow&#123;</span><br><span class="line">	<span class="function">LL <span class="title">do_main</span><span class="params">(LL a,LL k)</span></span>&#123;</span><br><span class="line">    	LL r=<span class="number">1</span>,base=a%MOD;</span><br><span class="line">		<span class="keyword">while</span>(k)&#123;</span><br><span class="line">        	<span class="keyword">if</span>(k&amp;<span class="number">1</span>)r=r*base%MOD;</span><br><span class="line">        	base=base*base%MOD;</span><br><span class="line">        	k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Quick_Pow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	LL sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;k[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k[i];j++)&#123;</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;b[j]);</span><br><span class="line">                    (cnt1[b[j]]+=do_main(n,MOD<span class="number">-2</span>)*do_main(k[i],MOD<span class="number">-2</span>)%MOD)%=MOD;</span><br><span class="line">                    (cnt2[b[j]]+=do_main(n,MOD<span class="number">-2</span>))%=MOD;</span><br><span class="line">                &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	LL ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1e6</span>;i++)&#123;</span><br><span class="line">		(ans+=(cnt1[i]*cnt2[i])%MOD)%=MOD;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #610 (Div. 2)</title>
    <url>/2020/02/11/Codeforces-Round-610-Div-2/</url>
    <content><![CDATA[<h2 id="a.-temporarily-unavailable">A. Temporarily unavailable</h2>
<p>求两区间交集，然后用行程区间长度减去交集区间长度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> a,b,c,r;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;a,&amp;b,&amp;c,&amp;r);</span><br><span class="line">		<span class="keyword">int</span> ll=c-r,rr=c+r;</span><br><span class="line">		<span class="keyword">if</span>(a&gt;b)swap(a,b);</span><br><span class="line">		<span class="keyword">if</span>(ll&gt;b||rr&lt;a)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b-a);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">int</span> l=max(ll,a),r=min(rr,b);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b-a-(r-l));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="b1.-k-for-the-price-of-one-easy-version">B1. K for the Price of One (Easy Version)</h2>
<p>按价格排序。考虑购买前i个商品的最小花费：当商品剩余数≥2时，每次购买最贵的商品白嫖次贵商品；当商品剩余数为1时，直接购买。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],sum[maxn],sum1[maxn],sum2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,p,k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;p,&amp;k);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">			<span class="keyword">if</span>(i&amp;<span class="number">1</span>)&#123;</span><br><span class="line">				sum1[i]=sum1[i<span class="number">-1</span>]+a[i];</span><br><span class="line">				sum2[i]=sum2[i<span class="number">-1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				sum1[i]=sum1[i<span class="number">-1</span>];</span><br><span class="line">				sum2[i]=sum2[i<span class="number">-1</span>]+a[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">4</span>;</span><br><span class="line">		<span class="keyword">if</span>(p&lt;a[<span class="number">1</span>]||n==<span class="number">0</span>)ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>((p&gt;=a[<span class="number">1</span>]&amp;&amp;p&lt;a[<span class="number">2</span>])||n==<span class="number">1</span>)ans=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>((p&gt;=a[<span class="number">2</span>]&amp;&amp;p&lt;a[<span class="number">1</span>]+a[<span class="number">3</span>])||n==<span class="number">2</span>)ans=<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>((p&gt;=a[<span class="number">1</span>]+a[<span class="number">3</span>]&amp;&amp;p&lt;a[<span class="number">2</span>]+a[<span class="number">4</span>])||n==<span class="number">3</span>)ans=<span class="number">3</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=n;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(i&amp;<span class="number">1</span>)&#123;</span><br><span class="line">					<span class="keyword">if</span>(sum[i]-sum2[i]&lt;=p)ans=i;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(sum[i]-sum1[i]&lt;=p)ans=i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min(ans,n));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="b2.-k-for-the-price-of-one-hard-version">B2. K for the Price of One (Hard Version)</h2>
<p>按价格排序。考虑购买前i个商品的最小花费：当商品剩余数≥k时，每次购买最贵的商品白嫖次贵商品；当商品剩余数＜k时，直接购买。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],sum[maxn],smm[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,p,k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;p,&amp;k);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">			smm[i]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;=k)smm[i]=smm[i-k]+a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(smm[i]+sum[i%k]&lt;=p)ans=i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-petya-and-exam">C. Petya and Exam</h2>
<p>可能产生答案的时刻仅有t[i]-1和T。枚举每一个t[i]-1，用完成必要任务之后剩下的时间尽可能多的完成非必要任务——在所有对于该时刻不必要完成的任务中优先挑选简单题完成。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Problem</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> t,v;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Problem &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> t&lt;b.t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"></span><br><span class="line">LL sum[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">3</span>][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,m,a,b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;a,&amp;b);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> type;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;type);</span><br><span class="line">			<span class="keyword">if</span>(type)p[i].v=b;</span><br><span class="line">			<span class="keyword">else</span> p[i].v=a;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i].t);</span><br><span class="line">		sort(p+<span class="number">1</span>,p+n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			sum[i]=sum[i<span class="number">-1</span>]+p[i].v;</span><br><span class="line">			cnt[<span class="number">0</span>][i]=cnt[<span class="number">0</span>][i<span class="number">-1</span>];cnt[<span class="number">1</span>][i]=cnt[<span class="number">1</span>][i<span class="number">-1</span>];</span><br><span class="line">			<span class="keyword">if</span>(p[i].v==b)cnt[<span class="number">1</span>][i]++;</span><br><span class="line">			<span class="keyword">else</span> cnt[<span class="number">0</span>][i]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(sum[i<span class="number">-1</span>]&gt;p[i].t<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				res=i<span class="number">-1</span>;</span><br><span class="line">				<span class="keyword">int</span> left=p[i].t<span class="number">-1</span>-sum[i<span class="number">-1</span>];</span><br><span class="line">				res+=min(left/a,cnt[<span class="number">0</span>][n]-cnt[<span class="number">0</span>][i<span class="number">-1</span>]);</span><br><span class="line">				left-=((res-(i<span class="number">-1</span>))*a);</span><br><span class="line">				res+=min(left/b,cnt[<span class="number">1</span>][n]-cnt[<span class="number">1</span>][i<span class="number">-1</span>]);</span><br><span class="line">				ans=max(ans,res);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(m&gt;=sum[n])ans=n;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Carls&#39;s Arithmetic Templates</title>
    <url>/2020/02/11/%E3%80%90%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%91Carls-s-Arithmetic-Templates/</url>
    <content><![CDATA[<p>总结了一部分学过的算法模板，持续更新中。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">				Carls's Arithmetic Templates</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> Fast_IO&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">		x=<span class="number">0</span>;<span class="keyword">int</span> flag=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">		<span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">-1</span>;<span class="keyword">if</span>(ch==EOF)<span class="keyword">return</span> <span class="number">0</span>;ch=getchar();&#125;</span><br><span class="line">		<span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">		<span class="keyword">return</span> x*=flag;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Quick Sort</span></span><br><span class="line"><span class="keyword">namespace</span> Quick_Sort&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> i,j,base;</span><br><span class="line">    	i=<span class="number">1</span>;j=size;</span><br><span class="line">    	base=arr[i+j&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    	<span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">    	    <span class="keyword">while</span>(arr[i]&lt;base)i++;</span><br><span class="line">    	    <span class="keyword">while</span>(arr[j]&gt;base)j--;</span><br><span class="line">    	    <span class="keyword">if</span> (i&lt;=j)&#123; </span><br><span class="line">    	        swap(arr[i],arr[j]);</span><br><span class="line">    	        i++;j--;</span><br><span class="line">    	    &#125;</span><br><span class="line">    	&#125;</span><br><span class="line">	    <span class="keyword">if</span>(<span class="number">1</span>&lt;j)do_main(<span class="number">1</span>,j);</span><br><span class="line">		<span class="keyword">if</span>(i&lt;size)do_main(i,size);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Bubble Sort</span></span><br><span class="line"><span class="keyword">namespace</span> Bubble_Sort&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">int</span> pre=size;</span><br><span class="line">    	<span class="keyword">while</span>(pre)&#123;</span><br><span class="line">    		flag=<span class="number">0</span>;</span><br><span class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pre<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        		<span class="keyword">if</span>(arr[i]&gt;arr[i+<span class="number">1</span>])swap(arr[i],arr[i+<span class="number">1</span>]),flag=i+<span class="number">1</span>;</span><br><span class="line">    		&#125;</span><br><span class="line">    		pre=flag;</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Insert Sort</span></span><br><span class="line"><span class="keyword">namespace</span> Insert_Sort&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=size;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&amp;&amp;arr[j]&gt;arr[j+<span class="number">1</span>];j++)&#123;</span><br><span class="line">				swap(arr[j],arr[j+<span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Shell Sort</span></span><br><span class="line"><span class="keyword">namespace</span> Shell_Sort&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> gap=size&gt;&gt;<span class="number">1</span>;gap;gap&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=gap+<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=i-gap;j&gt;<span class="number">0</span>&amp;&amp;a[j]&gt;a[j+gap];j+=gap)&#123;</span><br><span class="line">					swap(a[j],a[j+gap]);</span><br><span class="line">				&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Selection Sort</span></span><br><span class="line"><span class="keyword">namespace</span> Selection_Sort&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> MIN=INF;</span><br><span class="line">		<span class="keyword">int</span> minnode=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=size;i++)&#123;</span><br><span class="line">			MIN=INF;</span><br><span class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=size;j++)&#123;</span><br><span class="line">    	    	<span class="keyword">if</span>(arr[j]&lt;min)minnode=j,MIN=arr[j];</span><br><span class="line">    		&#125;</span><br><span class="line">    		swap(arr[i],arr[minnode]);</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Merge Sort</span></span><br><span class="line"><span class="keyword">namespace</span> Merge_Sort&#123;</span><br><span class="line">	<span class="keyword">int</span> T[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		do_main(arr,l,mid);</span><br><span class="line">		do_main(arr,mid+<span class="number">1</span>,r);</span><br><span class="line">		<span class="keyword">int</span> x=l,y=mid+<span class="number">1</span>,z=l;</span><br><span class="line">		<span class="keyword">while</span>(x&lt;=mid||y&lt;=r)&#123;</span><br><span class="line">			<span class="keyword">if</span>(y&gt;r||(x&lt;=mid&amp;&amp;arr[x]&lt;=arr[y]))T[z++]=arr[x++];</span><br><span class="line">			<span class="keyword">else</span> T[z++]=arr[y++]<span class="comment">/*,cnt+=mid-x+1 (Query the number of inversions) */</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)arr[i]=T[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Radix Sort</span></span><br><span class="line"><span class="keyword">namespace</span> Radix_Sort&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;r[<span class="number">10</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> num=<span class="number">10</span>;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(flag)&#123;</span><br><span class="line">			flag=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=size;i++)&#123;</span><br><span class="line">				r[(arr[i]/(num/<span class="number">10</span>))%num].push_back(arr[i]);</span><br><span class="line">				<span class="keyword">if</span>(arr[i]/num)flag=<span class="number">1</span>;	</span><br><span class="line">			&#125;</span><br><span class="line">			cnt=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;r[i].size();j++)&#123;</span><br><span class="line">					arr[++cnt]=r[i][j];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			num*=<span class="number">10</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)r[i].resize(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Binary Search</span></span><br><span class="line"><span class="keyword">namespace</span> Binary_Search&#123;</span><br><span class="line">	<span class="keyword">double</span> EPS=<span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> ans)</span></span>&#123;</span><br><span class="line">		<span class="comment">//......</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">double</span> l=<span class="number">0</span>,r=MAX;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">			<span class="keyword">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span>(check(mid))r=mid;</span><br><span class="line">			<span class="keyword">else</span> l=mid+EPS;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> l;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Ternary-Search</span></span><br><span class="line"><span class="keyword">namespace</span> Ternary_Search&#123;</span><br><span class="line">	<span class="keyword">double</span> EPS=<span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> ans)</span></span>&#123;</span><br><span class="line">		<span class="comment">//......</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">do_main</span><span class="params">(<span class="keyword">double</span> l,<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">while</span>(r-l&gt;EPS)&#123;</span><br><span class="line">        	<span class="keyword">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        	<span class="keyword">double</span> midd=(mid+r)/<span class="number">2</span>;</span><br><span class="line">        	<span class="keyword">if</span>(f(mid)&gt;f(midd))r=midd;</span><br><span class="line">        	<span class="keyword">else</span> l=mid;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> l;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BigInteger</span></span><br><span class="line"><span class="keyword">namespace</span> Big_Integer&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BigInteger</span>&#123;</span></span><br><span class="line">		<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> base=<span class="number">100000000</span>;</span><br><span class="line">		<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> width=<span class="number">8</span>;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;s;</span><br><span class="line">		BigInteger(<span class="keyword">long</span> <span class="keyword">long</span> num=<span class="number">0</span>)&#123;*<span class="keyword">this</span>=num;&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> = (<span class="keyword">long</span> <span class="keyword">long</span> num)&#123;</span><br><span class="line">			s.clear();</span><br><span class="line">			<span class="keyword">do</span>&#123;</span><br><span class="line">				s.push_back(num%base);</span><br><span class="line">				num/=base;</span><br><span class="line">			&#125;<span class="keyword">while</span>(num);</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> = (<span class="keyword">const</span> <span class="built_in">string</span> &amp;str)&#123;</span><br><span class="line">			s.clear();</span><br><span class="line">			<span class="keyword">int</span> x,len=(str.length()<span class="number">-1</span>)/width+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">				<span class="keyword">int</span> end=str.length()-i*width;</span><br><span class="line">				<span class="keyword">int</span> start=max(<span class="number">0</span>,end-width);</span><br><span class="line">				<span class="built_in">sscanf</span>(str.substr(start,end-start).c_str(),<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">				s.push_back(x);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> + (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">			BigInteger c;</span><br><span class="line">			c.s.clear();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>,g=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(g==<span class="number">0</span>&amp;&amp;i&gt;=s.size()&amp;&amp;i&gt;=b.s.size())<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">if</span>(i&lt;s.size())g+=s[i];</span><br><span class="line">				<span class="keyword">if</span>(i&lt;b.s.size())g+=b.s[i];</span><br><span class="line">				c.s.push_back(g%base);</span><br><span class="line">				g/=base;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> c;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> - (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">			BigInteger c;</span><br><span class="line">			c.s.clear();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>,g=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(i&gt;=s.size())<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">if</span>(i&gt;=b.s.size())&#123;</span><br><span class="line">					c.s.push_back(s[i]+g);</span><br><span class="line">			    	g=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(s[i]&lt;b.s[i])&#123;</span><br><span class="line">						c.s.push_back(s[i]-b.s[i]+base+g);</span><br><span class="line">						g=<span class="number">-1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span>&#123;</span><br><span class="line">						c.s.push_back(s[i]-b.s[i]+g);</span><br><span class="line">						g=<span class="number">0</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> c;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> * (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">			BigInteger c;</span><br><span class="line">			c.s.clear();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size()+b.s.size();i++)c.s.push_back(<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">			  <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b.s.size();j++)&#123;</span><br><span class="line">			  	c.s[i+j]+=s[i]*b.s[j];</span><br><span class="line">			  &#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.s.size()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">				c.s[i+<span class="number">1</span>]+=c.s[i]/base;</span><br><span class="line">				c.s[i]=c.s[i]%base;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(c.s.back()==<span class="number">0</span>&amp;&amp;c.s.size()&gt;<span class="number">1</span>)c.s.erase(c.s.end()<span class="number">-1</span>);</span><br><span class="line">			<span class="keyword">return</span> c;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">			BigInteger c;</span><br><span class="line">			c.s.clear();c.s.resize(s.size());</span><br><span class="line">			<span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">				res*=base;</span><br><span class="line">				res+=s[i];</span><br><span class="line">				c.s[i]=res/b;</span><br><span class="line">				res%=b;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(c.s.back()==<span class="number">0</span>&amp;&amp;c.s.size()&gt;<span class="number">1</span>)c.s.erase(c.s.end()<span class="number">-1</span>);</span><br><span class="line">			<span class="keyword">return</span> c;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> % (<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">			BigInteger c;</span><br><span class="line">			c.s.clear();c.s.resize(s.size());</span><br><span class="line">			<span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">				res*=base;</span><br><span class="line">				res+=s[i];</span><br><span class="line">				c.s[i]=res/b;</span><br><span class="line">				res%=b;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(c.s.back()==<span class="number">0</span>&amp;&amp;c.s.size()&gt;<span class="number">1</span>)c.s.erase(c.s.end()<span class="number">-1</span>);</span><br><span class="line">			<span class="keyword">return</span> (BigInteger)res;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> += (<span class="keyword">const</span> BigInteger &amp;b)&#123;</span><br><span class="line">			*<span class="keyword">this</span>=*<span class="keyword">this</span>+b;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> -= (<span class="keyword">const</span> BigInteger &amp;b)&#123;</span><br><span class="line">			*<span class="keyword">this</span>=*<span class="keyword">this</span>-b;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> *= (<span class="keyword">const</span> BigInteger &amp;b)&#123;</span><br><span class="line">			*<span class="keyword">this</span>=*<span class="keyword">this</span>*b;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> /= (<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)&#123;</span><br><span class="line">			*<span class="keyword">this</span>=*<span class="keyword">this</span>/b;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> %= (<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)&#123;</span><br><span class="line">			*<span class="keyword">this</span>=*<span class="keyword">this</span>%b;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(s.size()!=b.s.size())<span class="keyword">return</span> s.size()&lt;b.s.size();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i]!=b.s[i])<span class="keyword">return</span> s[i]&lt;b.s[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;<span class="keyword">return</span> b &lt; *<span class="keyword">this</span>;&#125;</span><br><span class="line">		<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;<span class="keyword">return</span> !(*<span class="keyword">this</span>&gt;b);&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream &amp;out,<span class="keyword">const</span> BigInteger &amp;x)&#123;</span><br><span class="line">		out&lt;&lt;x.s.back();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=x.s.size()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			<span class="keyword">char</span> buf[<span class="number">20</span>];</span><br><span class="line">			<span class="built_in">sprintf</span>(buf,<span class="string">"%08lld"</span>,x.s[i]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">strlen</span>(buf);j++)out&lt;&lt;buf[j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> out;</span><br><span class="line">	&#125;</span><br><span class="line">	istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream &amp;in,BigInteger &amp;x)&#123;</span><br><span class="line">		<span class="built_in">string</span> s;</span><br><span class="line">		<span class="keyword">if</span>(!(in&gt;&gt;s))<span class="keyword">return</span> in;</span><br><span class="line">		x=s;</span><br><span class="line">		<span class="keyword">return</span> in;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Discretization</span></span><br><span class="line"><span class="keyword">namespace</span> Discretization&#123;</span><br><span class="line">	<span class="keyword">int</span> tmp[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">		<span class="built_in">memcpy</span>(tmp+<span class="number">1</span>,arr+<span class="number">1</span>,size&lt;&lt;?);<span class="comment">//int:?=2;long long:?=4;</span></span><br><span class="line">		sort(tmp+<span class="number">1</span>,tmp+size+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">int</span> m=unique(tmp+<span class="number">1</span>,tmp+size+<span class="number">1</span>)-tmp<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=size;i++)arr[i]=lower_bound(tmp+<span class="number">1</span>,tmp+m+<span class="number">1</span>,arr[i])-tmp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Segment Tree</span></span><br><span class="line"><span class="keyword">namespace</span> Segment_Tree&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	    <span class="keyword">int</span> l,r,sum,lazy;</span><br><span class="line">	&#125;t[maxn*<span class="number">4</span>];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k1)</span></span>&#123;</span><br><span class="line">    	t[k1].sum=t[k1&lt;&lt;<span class="number">1</span>].sum+t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    	t[k1].l=l;t[k1].r=r;</span><br><span class="line">    	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">    	    t[k1].sum=val[l];</span><br><span class="line">    	    <span class="keyword">return</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    	build(k1&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    	build(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">   		update(k1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k1)</span></span>&#123;</span><br><span class="line">    	t[k1].sum+=t[k1&gt;&gt;<span class="number">1</span>].lazy*(t[k1].r-t[k1].l+<span class="number">1</span>);</span><br><span class="line">    	t[k1].lazy+=t[k1&gt;&gt;<span class="number">1</span>].lazy;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k1)</span></span>&#123;</span><br><span class="line">	    add(k1&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	    add(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	    t[k1].lazy=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_point</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> pos,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(pos&gt;t[k1].r||pos&lt;t[k1].l)<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span>(t[k1].r==t[k1].l)&#123;</span><br><span class="line">    		t[k1].sum+=k;</span><br><span class="line">    		<span class="keyword">return</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	pushdown(k1);</span><br><span class="line">    	change_point(k1&lt;&lt;<span class="number">1</span>,pos,k);</span><br><span class="line">    	change_point(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos,k);</span><br><span class="line">    	update(k1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_interval</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(L&gt;t[k1].r||R&lt;t[k1].l)<span class="keyword">return</span>;</span><br><span class="line">    	<span class="keyword">if</span>(L&lt;=t[k1].l&amp;&amp;R&gt;=t[k1].r)&#123;</span><br><span class="line">    	    t[k1].lazy+=k;</span><br><span class="line">    	    t[k1].sum+=k*(t[k1].r-t[k1].l+<span class="number">1</span>);</span><br><span class="line">    	    <span class="keyword">return</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	pushdown(k1);</span><br><span class="line">    	change_interval(k1&lt;&lt;<span class="number">1</span>,L,R,k);</span><br><span class="line">    	change_interval(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,k);</span><br><span class="line">    	update(k1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(L&gt;t[k1].r||R&lt;t[k1].l)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">if</span>(L&lt;=t[k1].l&amp;&amp;R&gt;=t[k1].r)&#123;</span><br><span class="line">    	    <span class="keyword">return</span> t[k1].sum;</span><br><span class="line">    	&#125;</span><br><span class="line">    	pushdown(k1);</span><br><span class="line">    	<span class="keyword">return</span> query(k1&lt;&lt;<span class="number">1</span>,L,R)+query(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Cantor</span></span><br><span class="line"><span class="keyword">namespace</span> Cantor&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">State</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> ch[maxn];</span><br><span class="line">		<span class="keyword">int</span> num;</span><br><span class="line">		State()&#123;</span><br><span class="line">			<span class="comment">//......</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> fac[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</span><br><span class="line">		fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">			fac[i]=fac[i<span class="number">-1</span>]*i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(State &amp;a)</span></span>&#123;</span><br><span class="line">		a.num=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(a.ch[j]&gt;a.ch[i])cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">			a.num+=fac[i]*cnt;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ++a.num;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//A-Star Search</span></span><br><span class="line"><span class="keyword">namespace</span> A_Star_Search&#123;</span><br><span class="line">	<span class="keyword">bool</span> vis[maxn];</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">State</span>&#123;</span></span><br><span class="line">		<span class="comment">//......</span></span><br><span class="line">		<span class="keyword">int</span> g,h;</span><br><span class="line">		<span class="keyword">int</span> num;</span><br><span class="line">		State()&#123;</span><br><span class="line">			<span class="comment">//......</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> State &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> g==b.g?h&gt;b.h:g&gt;b.g;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">guess</span><span class="params">(State &amp;a)</span></span>&#123;</span><br><span class="line">		a.h=<span class="number">0</span>;</span><br><span class="line">		<span class="comment">//......</span></span><br><span class="line">		<span class="keyword">return</span> a.h;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(State s,State t)</span></span>&#123;</span><br><span class="line">		Hash::pre();</span><br><span class="line">		priority_queue&lt;State&gt;q;</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">		Hash::do_main(t);</span><br><span class="line">		Hash::do_main(s);guess(s);s.g=<span class="number">0</span>;</span><br><span class="line">		q.push(s);</span><br><span class="line">		vis[s.num]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">			State now=q.top();</span><br><span class="line">			q.pop();</span><br><span class="line">			<span class="keyword">if</span>(now.num==t.num)&#123;</span><br><span class="line">				<span class="comment">//......</span></span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">				State to=now;</span><br><span class="line">				<span class="comment">//......</span></span><br><span class="line">				<span class="keyword">if</span>(<span class="comment">/*......*/</span>||vis[Hash::do_main(to)])<span class="keyword">continue</span>;</span><br><span class="line">				to.g++;</span><br><span class="line">				vis[to.num]=<span class="number">1</span>;</span><br><span class="line">				guess(to);</span><br><span class="line">				q.push(to);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SPFA</span></span><br><span class="line"><span class="keyword">namespace</span> SPFA&#123;</span><br><span class="line">	<span class="keyword">int</span> cnt[maxn];</span><br><span class="line">	<span class="keyword">bool</span> vis[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">		<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">		<span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">		<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">		vis[s]=<span class="number">1</span>;</span><br><span class="line">		dis[s]=<span class="number">0</span>;</span><br><span class="line">		q.push(s);</span><br><span class="line">		<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">			<span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">			vis[u]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">				<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">				<span class="keyword">if</span>(dis[v]&gt;dis[u]+e[i].w)&#123;</span><br><span class="line">					dis[v]=dis[u]+e[i].w;</span><br><span class="line">					<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">						vis[v]=<span class="number">1</span>;</span><br><span class="line">						q.push(v);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dijkstra</span></span><br><span class="line"><span class="keyword">namespace</span> Dijkstra&#123;</span><br><span class="line">	<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">		priority_queue&lt; pii,<span class="built_in">vector</span>&lt;pii&gt;,greater&lt;pii&gt; &gt;q;</span><br><span class="line">		<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">		dis[s]=<span class="number">0</span>;</span><br><span class="line">		q.push(pii(<span class="number">0</span>,s));</span><br><span class="line">		<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">			pii now=q.top();q.pop();</span><br><span class="line">			<span class="keyword">int</span> u=now.second;</span><br><span class="line">			<span class="keyword">if</span>(dis[u]&lt;now.first)<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">				<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">				<span class="keyword">if</span>(dis[u]+e[i].w&lt;dis[v])&#123;</span><br><span class="line">					dis[v]=dis[u]+e[i].w;</span><br><span class="line">					q.push(pii(dis[v],v));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Floyd</span></span><br><span class="line"><span class="keyword">namespace</span> Floyd&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">					dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line">				&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Union-Find</span></span><br><span class="line"><span class="keyword">namespace</span> Union_Find&#123;</span><br><span class="line">	<span class="keyword">int</span> f[maxn],Rank[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		<span class="built_in">memset</span>(Rank,<span class="number">0</span>,<span class="keyword">sizeof</span>(Rank));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)f[i]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> f[x]==x?x:f[x]=Find(f[x]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> fx=Find(x),fy=Find(y);</span><br><span class="line">		<span class="keyword">if</span>(fx!=fy)&#123;</span><br><span class="line">			<span class="keyword">if</span>(Rank[fx]&gt;Rank[fy])f[fy]=fx;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				f[fx]=fy;</span><br><span class="line">				<span class="keyword">if</span>(Rank[fx]==Rank[fy])Rank[fy]++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Kruskal</span></span><br><span class="line"><span class="keyword">namespace</span> Kruskal&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Union_Find::pre();</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">		sort(e+<span class="number">1</span>,e+nume+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nume;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> fu=Union_Find::find(e[i].u),fv=Union_Find::find(e[i].v);</span><br><span class="line">			<span class="keyword">if</span>(fu!=fv)&#123;</span><br><span class="line">				Union_Find::f[fu]=fv;</span><br><span class="line">				ans+=e[i].w;</span><br><span class="line">				<span class="keyword">if</span>(++cnt==n<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(cnt!=n<span class="number">-1</span>)<span class="keyword">return</span> ans=<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Boruvka</span></span><br><span class="line"><span class="keyword">namespace</span> Boruvka&#123;</span><br><span class="line">	<span class="keyword">int</span> MIN[maxn],pos[maxn];</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> Union_Find;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">			flag=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">memset</span>(MIN,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(MIN));</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)&#123;</span><br><span class="line">				<span class="keyword">int</span> fu=Find(u);</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">					<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">					<span class="keyword">int</span> fv=Find(v);</span><br><span class="line">					<span class="keyword">if</span>(fu!=fv&amp;&amp;e[i].w&lt;MIN[f[u]])&#123;</span><br><span class="line">						MIN[f[u]]=e[i].w;</span><br><span class="line">						pos[f[u]]=f[v];</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(MIN[i]!=INF&amp;&amp;Find(i)!=Find(pos[i]))&#123;</span><br><span class="line">					flag=<span class="number">1</span>;</span><br><span class="line">					Union(i,pos[i]);</span><br><span class="line">					ret+=MIN[i];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(!flag)<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MP</span></span><br><span class="line"><span class="keyword">namespace</span> MP&#123;</span><br><span class="line">	<span class="keyword">int</span> f[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Get_Fail</span><span class="params">(<span class="keyword">char</span> *P)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> lenp=<span class="built_in">strlen</span>(P+<span class="number">1</span>);</span><br><span class="line">		f[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=lenp;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> j=f[i<span class="number">-1</span>];</span><br><span class="line">			<span class="keyword">while</span>(j&amp;&amp;P[j+<span class="number">1</span>]!=P[i])j=f[j];</span><br><span class="line">			f[i]=P[j+<span class="number">1</span>]==P[i]?j+<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">char</span> *T,<span class="keyword">char</span> *P)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> lent=<span class="built_in">strlen</span>(T+<span class="number">1</span>),lenp=<span class="built_in">strlen</span>(P+<span class="number">1</span>);</span><br><span class="line">		Get_Fail(P);</span><br><span class="line">		<span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lent;i++)&#123;</span><br><span class="line">			<span class="keyword">while</span>(j&amp;&amp;T[i]!=P[j+<span class="number">1</span>])j=f[j];</span><br><span class="line">			<span class="keyword">if</span>(T[i]==P[j+<span class="number">1</span>])j++;</span><br><span class="line">			<span class="keyword">if</span>(j==lenp)&#123;</span><br><span class="line">				j=f[j];</span><br><span class="line">				res++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Manacher</span></span><br><span class="line"><span class="keyword">namespace</span> Manacher&#123;</span><br><span class="line">	<span class="keyword">char</span> tmp[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">int</span> p[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)tmp[i*<span class="number">2</span><span class="number">-1</span>]=<span class="string">'%'</span>,tmp[i*<span class="number">2</span>]=s[i];</span><br><span class="line">		tmp[len=len*<span class="number">2</span>+<span class="number">1</span>]=<span class="string">'%'</span>;</span><br><span class="line">		<span class="keyword">int</span> pos=<span class="number">0</span>,R=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> MAX=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&lt;R)p[i]=min(p[pos*<span class="number">2</span>-i],R-i);<span class="keyword">else</span> p[i]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">while</span>(i-p[i]&gt;=<span class="number">1</span>&amp;&amp;i+p[i]&lt;=len&amp;&amp;tmp[i-p[i]]==tmp[i+p[i]])p[i]++;</span><br><span class="line">			<span class="keyword">if</span>(i+p[i]&gt;R)pos=i,R=i+p[i];</span><br><span class="line">			MAX=max(MAX,p[i]<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> MAX;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Trie</span></span><br><span class="line"><span class="keyword">namespace</span> Trie&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Tire</span>&#123;</span></span><br><span class="line">		<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> sigma_size=<span class="number">30</span>;</span><br><span class="line">		<span class="keyword">int</span> ch[maxn][sigma_size];</span><br><span class="line">		<span class="keyword">int</span> val[maxn];</span><br><span class="line">		<span class="keyword">int</span> prefix[maxn];</span><br><span class="line">		<span class="keyword">int</span> size;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</span><br><span class="line">			size=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">memset</span>(ch,<span class="number">0</span>,<span class="keyword">sizeof</span>(ch));</span><br><span class="line">			<span class="built_in">memset</span>(val,<span class="number">0</span>,<span class="keyword">sizeof</span>(val));</span><br><span class="line">			<span class="built_in">memset</span>(prefix,<span class="number">0</span>,<span class="keyword">sizeof</span>(prefix));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">			<span class="keyword">return</span> c-<span class="string">'a'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">			<span class="keyword">int</span> u=<span class="number">0</span>,n=<span class="built_in">strlen</span>(s);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">				<span class="keyword">int</span> c=idx(s[i]);</span><br><span class="line">				<span class="keyword">if</span>(!ch[u][c])&#123;</span><br><span class="line">					ch[u][c]=size++;</span><br><span class="line">				&#125;</span><br><span class="line">				u=ch[u][c];</span><br><span class="line">				prefix[u]++;</span><br><span class="line">			&#125;</span><br><span class="line">			val[u]=v;</span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">query_val</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;<span class="comment">//Query the value of s</span></span><br><span class="line">			<span class="keyword">int</span> u=<span class="number">0</span>,n=<span class="built_in">strlen</span>(s);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">				<span class="keyword">int</span> c=idx(s[i]);</span><br><span class="line">				<span class="keyword">if</span>(!ch[u][c])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				u=ch[u][c];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> val[u];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">query_prefix</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;<span class="comment">//Query the number of words prefixed with s</span></span><br><span class="line">			<span class="keyword">int</span> u=<span class="number">0</span>,n=<span class="built_in">strlen</span>(s);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">				<span class="keyword">int</span> c=idx(s[i]);</span><br><span class="line">				<span class="keyword">if</span>(!ch[u][c])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				u=ch[u][c];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> prefix[u];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;tire;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Aho-Corasick Automaton</span></span><br><span class="line"><span class="keyword">namespace</span> Aho_Corasick_Automaton&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Aho_Corasick_Automaton</span>&#123;</span></span><br><span class="line">		<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> sigma_size=<span class="number">26</span>;</span><br><span class="line">		<span class="keyword">int</span> ch[maxn][sigma_size];</span><br><span class="line">		<span class="keyword">int</span> val[maxn],last[maxn];</span><br><span class="line">		<span class="keyword">int</span> f[maxn];</span><br><span class="line">		<span class="keyword">int</span> size;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</span><br><span class="line">			<span class="built_in">memset</span>(ch,<span class="number">0</span>,<span class="keyword">sizeof</span>(ch));</span><br><span class="line">			<span class="built_in">memset</span>(val,<span class="number">0</span>,<span class="keyword">sizeof</span>(val));</span><br><span class="line">			<span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span>(last));</span><br><span class="line">			<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">			size=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">			<span class="keyword">return</span> c-<span class="string">'a'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *P,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">			<span class="keyword">int</span> u=<span class="number">0</span>,n=<span class="built_in">strlen</span>(P);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">				<span class="keyword">int</span> c=idx(P[i]);</span><br><span class="line">				<span class="keyword">if</span>(!ch[u][c])&#123;</span><br><span class="line">					ch[u][c]=++size;</span><br><span class="line">				&#125;</span><br><span class="line">				u=ch[u][c];</span><br><span class="line">			&#125;</span><br><span class="line">			val[u]=v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">get_fail</span><span class="params">()</span></span>&#123;</span><br><span class="line">			<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">			f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;sigma_size;c++)&#123;</span><br><span class="line">				<span class="keyword">int</span> u=ch[<span class="number">0</span>][c];</span><br><span class="line">				<span class="keyword">if</span>(u)&#123;</span><br><span class="line">					f[u]=<span class="number">0</span>;</span><br><span class="line">					q.push(u);</span><br><span class="line">					last[u]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">				<span class="keyword">int</span> r=q.front();q.pop();</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;sigma_size;c++)&#123;</span><br><span class="line">					<span class="keyword">int</span> u=ch[r][c];</span><br><span class="line">					<span class="keyword">if</span>(!u)&#123;</span><br><span class="line">						ch[r][c]=ch[f[r]][c];</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					q.push(u);</span><br><span class="line">					<span class="keyword">int</span> v=f[r];</span><br><span class="line">					<span class="keyword">while</span>(v&amp;&amp;!ch[v][c])v=f[v];</span><br><span class="line">					f[u]=ch[v][c];</span><br><span class="line">					last[u]=val[f[u]]?f[u]:last[f[u]];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">count</span><span class="params">(<span class="keyword">char</span> *T)</span></span>&#123;</span><br><span class="line">			<span class="keyword">int</span> u=<span class="number">0</span>,n=<span class="built_in">strlen</span>(T);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">				<span class="keyword">int</span> c=idx(T[i]);</span><br><span class="line">				u=ch[u][c];</span><br><span class="line">				<span class="keyword">if</span>(val[u]||last[u])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;ac;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Quick Pow</span></span><br><span class="line"><span class="keyword">namespace</span> Quick_Pow&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> r=<span class="number">1</span>,base=a;</span><br><span class="line">		<span class="keyword">while</span>(k)&#123;</span><br><span class="line">        	<span class="keyword">if</span>(k&amp;<span class="number">1</span>)r=r*base;</span><br><span class="line">        	base=base*base;</span><br><span class="line">        	k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Matrix Quick Pow</span></span><br><span class="line"><span class="keyword">namespace</span> Matrix_Quick_Pow&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line">    	<span class="keyword">int</span> arr[maxn][maxn];</span><br><span class="line">    	Matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> Matrix &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        	Matrix ret;</span><br><span class="line">        	<span class="built_in">memset</span>(ret.arr,<span class="number">0</span>,<span class="keyword">sizeof</span>(ret.arr));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">            	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n<span class="number">-1</span>;j++)</span><br><span class="line">                	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=n<span class="number">-1</span>;k++)&#123;</span><br><span class="line">                		ret.arr[i][j]=(ret.arr[i][j]+arr[i][k]*b.arr[k][j])%mod;</span><br><span class="line">                	&#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">       &#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function">Matrix <span class="title">do_main</span><span class="params">(Matrix a,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    	Matrix r;</span><br><span class="line">    	<span class="built_in">memset</span>(r.arr,<span class="number">0</span>,<span class="keyword">sizeof</span>(a.arr));</span><br><span class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">        	r.arr[i][j]=(i==j);</span><br><span class="line">		&#125;</span><br><span class="line">		Matrix base=a;</span><br><span class="line">    	<span class="keyword">while</span>(k)&#123;</span><br><span class="line">        	<span class="keyword">if</span>(k&amp;<span class="number">1</span>)r=r*base;</span><br><span class="line">        	base=base*base;</span><br><span class="line">        	k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Topo Sort</span></span><br><span class="line"><span class="keyword">namespace</span> Topo_Sort&#123;</span><br><span class="line">	<span class="keyword">int</span> degree[maxn];</span><br><span class="line">	<span class="keyword">int</span> topo[maxn],num=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!degree[i])q.push(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">			<span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">			topo[++num]=u;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">				<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">				<span class="keyword">if</span>(--degree[v]==<span class="number">0</span>)q.push(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(num!=n)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tree-Chain Division</span></span><br><span class="line"><span class="keyword">namespace</span> Tree_Chain_Division&#123;</span><br><span class="line">	<span class="keyword">int</span> size[maxn],f[maxn],dep[maxn],son[maxn],top[maxn],id[maxn],real[maxn],val[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DFS_1</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">	    size[u]=<span class="number">1</span>;</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].next)&#123;</span><br><span class="line">	        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">	        <span class="keyword">if</span>(v!=f[u])&#123;</span><br><span class="line">	    	    f[v]=u;</span><br><span class="line">	    	    dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">	    	    DFS_1(v);</span><br><span class="line">	    	    size[u]+=size[v];</span><br><span class="line">	    	    <span class="keyword">if</span>(size[v]&gt;=size[son[u]])son[u]=v;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DFS_2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line">	    top[u]=tp;</span><br><span class="line">	    id[u]=++numn;</span><br><span class="line">	    real[numn]=u;</span><br><span class="line">	    <span class="keyword">if</span>(son[u])DFS_2(son[u],tp);</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].next)&#123;</span><br><span class="line">	        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">	        <span class="keyword">if</span>(v!=f[u]&amp;&amp;v!=son[u])DFS_2(v,v);</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Node:</span></span><br><span class="line"><span class="comment">	Segment_Tree:</span></span><br><span class="line"><span class="comment">		void build(int k1,int l,int r)&#123;</span></span><br><span class="line"><span class="comment">		    //......</span></span><br><span class="line"><span class="comment">				t[k1].sum=val[real[l]];</span></span><br><span class="line"><span class="comment">		    //......</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_road</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	    <span class="keyword">int</span> tp1=top[u],tp2=top[v];</span><br><span class="line">	    <span class="keyword">while</span>(tp1!=tp2)&#123;</span><br><span class="line">	        <span class="keyword">if</span>(dep[tp1]&lt;dep[tp2])swap(tp1,tp2),swap(u,v);</span><br><span class="line">	        Segment_Tree::change_interval(<span class="number">1</span>,id[tp1],id[u],x);</span><br><span class="line">	        u=f[tp1];</span><br><span class="line">	        tp1=top[u];</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">if</span>(dep[u]&gt;dep[v])swap(u,v);</span><br><span class="line">	    Segment_Tree::change_interval(<span class="number">1</span>,id[u],id[v],x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query_road</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	    LL sum=<span class="number">0</span>;</span><br><span class="line">	    <span class="keyword">int</span> tp1=top[u],tp2=top[v];</span><br><span class="line">	    <span class="keyword">while</span>(tp1!=tp2)&#123;</span><br><span class="line">	        <span class="keyword">if</span>(dep[tp1]&lt;dep[tp2])swap(tp1,tp2),swap(u,v);</span><br><span class="line">	        sum+=Segment_Tree::query(<span class="number">1</span>,id[tp1],id[u]);</span><br><span class="line">	        u=f[tp1];</span><br><span class="line">	        tp1=top[u];</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">if</span>(dep[u]&gt;dep[v])swap(u,v);</span><br><span class="line">	    sum+=Segment_Tree::query(<span class="number">1</span>,id[u],id[v]);</span><br><span class="line">	    <span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_root</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	   	<span class="keyword">int</span> begin=id[now];</span><br><span class="line">	    <span class="keyword">int</span> end=id[now]+size[now]<span class="number">-1</span>;</span><br><span class="line">	    Segment_Tree::change_interval(<span class="number">1</span>,begin,end,x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">query_root</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line">	    <span class="keyword">int</span> begin=id[now];</span><br><span class="line">	    <span class="keyword">int</span> end=id[now]+size[now]<span class="number">-1</span>;</span><br><span class="line">	    <span class="keyword">return</span> Segment_Tree::query(<span class="number">1</span>,begin,end);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Binary Indexed Tree</span></span><br><span class="line"><span class="keyword">namespace</span> Binary_Indexed_Tree&#123;</span><br><span class="line">	<span class="keyword">int</span> c[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;x&lt;=n;x+=x&amp;-x)c[x]+=k;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(;x;x-=x&amp;-x)res+=c[x];</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;x&lt;=n;x+=x&amp;-x)c[x]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Gcd</span></span><br><span class="line"><span class="keyword">namespace</span> Gcd&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> y?gcd(y,x%y):x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Exgcd</span></span><br><span class="line"><span class="keyword">namespace</span> Exgcd&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!b)x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			exgcd(b,a%b,y,x);</span><br><span class="line">			y-=(a/b)*x;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Sieve of Euler</span></span><br><span class="line"><span class="keyword">namespace</span> Sieve_of_Euler&#123;</span><br><span class="line">	<span class="keyword">int</span> nump=<span class="number">0</span>,prime[maxn];</span><br><span class="line">	<span class="keyword">bool</span> is_prime[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">memset</span>(is_prime,<span class="number">1</span>,<span class="keyword">sizeof</span>(is_prime));</span><br><span class="line">		is_prime[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(is_prime[i])prime[++nump]=i;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=nump&amp;&amp;prime[j]*i&lt;maxn;j++)&#123;</span><br><span class="line">				is_prime[i*prime[j]]=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Euler's totient function</span></span><br><span class="line"><span class="keyword">namespace</span> Euler_totient_function&#123;</span><br><span class="line">	<span class="keyword">int</span> euler[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++)euler[i]=i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(euler[i]==i)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;maxn;j+=i)&#123;</span><br><span class="line">					euler[j]=euler[j]/i*(i<span class="number">-1</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Euler</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> res=x;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=x;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(x%i==<span class="number">0</span>)&#123;</span><br><span class="line">				res=res/i*(i<span class="number">-1</span>);</span><br><span class="line">				<span class="keyword">while</span>(x%i==<span class="number">0</span>)x/=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">1</span>)res=res/i*(i<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LCA</span></span><br><span class="line"><span class="keyword">namespace</span> LCA&#123;</span><br><span class="line">	<span class="keyword">int</span> dep[maxn],f[maxn][<span class="number">22</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">			<span class="keyword">if</span>(v!=f[u][<span class="number">0</span>])&#123;</span><br><span class="line">				f[v][<span class="number">0</span>]=u;</span><br><span class="line">				dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">				dfs(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">				f[i][j]=f[f[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[a]&lt;dep[b])swap(a,b);</span><br><span class="line">		<span class="keyword">int</span> dif=dep[a]-dep[b];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=dif;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;dif)a=f[a][i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a!=b)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=(<span class="keyword">int</span>)log2(n);i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(f[a][i]!=f[b][i])&#123;</span><br><span class="line">					a=f[a][i];b=f[b][i];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			a=f[a][<span class="number">0</span>];b=f[b][<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dinic</span></span><br><span class="line"><span class="keyword">namespace</span> Dinic&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Note:</span></span><br><span class="line"><span class="comment">	memset(last,-1,sizeof(last));</span></span><br><span class="line"><span class="comment">	nume从0开始 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	<span class="keyword">int</span> dep[maxn],pre[maxn],q[maxn*maxn];</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> head=<span class="number">1</span>,tail=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">		dep[s]=<span class="number">1</span>;</span><br><span class="line">		q[++tail]=s;</span><br><span class="line">		<span class="keyword">while</span>(head&lt;=tail)&#123;</span><br><span class="line">			<span class="keyword">int</span> u=q[head++];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];~i;i=e[i].nxt)&#123;</span><br><span class="line">				<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">				<span class="keyword">if</span>(!dep[v]&amp;&amp;e[i].f)&#123;</span><br><span class="line">					dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">					q[++tail]=v;</span><br><span class="line">					<span class="keyword">if</span>(v==t)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> t,<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(u==t)<span class="keyword">return</span> cur;</span><br><span class="line">		<span class="keyword">int</span> rest=cur;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=pre[u];~i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">			<span class="keyword">if</span>(dep[v]==dep[u]+<span class="number">1</span>&amp;&amp;e[i].f&amp;&amp;rest)&#123;</span><br><span class="line">				<span class="keyword">int</span> new_flow=dfs(v,t,min(e[i].f,rest));</span><br><span class="line">				rest-=new_flow;</span><br><span class="line">				e[i].f-=new_flow;</span><br><span class="line">				e[i^<span class="number">1</span>].f+=new_flow;</span><br><span class="line">				<span class="keyword">if</span>(!rest)<span class="keyword">return</span> cur;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cur-rest;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(bfs(s,t))&#123;</span><br><span class="line">			<span class="built_in">memcpy</span>(pre,last,<span class="keyword">sizeof</span>(last));</span><br><span class="line">			ans+=dfs(s,t,INF);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Hungarian</span></span><br><span class="line"><span class="keyword">namespace</span> Hungarian&#123;</span><br><span class="line">	<span class="keyword">int</span> result[maxn];</span><br><span class="line">	<span class="keyword">bool</span> vis[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">			<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">				vis[v]=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(!result[v]||dfs(result[v]))&#123;</span><br><span class="line">					result[v]=u;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">			<span class="keyword">if</span>(dfs(i))cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cnt;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tarjan</span></span><br><span class="line"><span class="keyword">namespace</span> Tarjan&#123;</span><br><span class="line">	<span class="keyword">int</span> dfn[maxn],low[maxn];</span><br><span class="line">	<span class="keyword">int</span> sta[maxn],top;</span><br><span class="line">	<span class="keyword">int</span> dfnnum=<span class="number">0</span>,colnum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">bool</span> vis[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">		dfn[u]=low[u]=++dfnnum;</span><br><span class="line">		vis[u]=<span class="number">1</span>;</span><br><span class="line">		sta[++top]=u;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">			<span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line">				do_main(v);</span><br><span class="line">				low[u]=min(low[u],low[v]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(vis[v])low[u]=min(low[u],dfn[v]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(dfn[u]==low[u])&#123;</span><br><span class="line">			colnum++;</span><br><span class="line">			<span class="keyword">while</span>(sta[top]!=u)&#123;</span><br><span class="line">				color[sta[top]]=colnum;</span><br><span class="line">				vis[sta[top]]=<span class="number">0</span>;</span><br><span class="line">				val[colnum]+=a[sta[top--]];</span><br><span class="line">			&#125;</span><br><span class="line">			color[sta[top]]=colnum;</span><br><span class="line">			vis[sta[top]]=<span class="number">0</span>;</span><br><span class="line">			val[colnum]+=a[sta[top--]];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ST</span></span><br><span class="line"><span class="keyword">namespace</span> ST&#123;</span><br><span class="line">	<span class="keyword">int</span> st[maxn][<span class="number">20</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">				st[i][j]=max(st[i][j<span class="number">-1</span>],st[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query_max</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> k=log2(r-l+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> max(st[l][k],st[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Functional Treap</span></span><br><span class="line"><span class="keyword">namespace</span> Functional_Treap&#123;</span><br><span class="line">	<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> l,r,key,val,size;</span><br><span class="line">	&#125;t[maxn];</span><br><span class="line">	<span class="keyword">int</span> root,num=<span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		t[x].size=t[t[x].l].size+t[t[x].r].size+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> r1,<span class="keyword">int</span> r2)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!r1||!r2)<span class="keyword">return</span> r1+r2;</span><br><span class="line">		<span class="keyword">if</span>(t[r1].key&lt;t[r2].key)&#123;</span><br><span class="line">			<span class="keyword">return</span> t[r1].r=merge(t[r1].r,r2),update(r1),r1;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> t[r2].l=merge(r1,t[r2].l),update(r2),r2;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">pii <span class="title">split</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!k)<span class="keyword">return</span> mp(<span class="number">0</span>,rt);</span><br><span class="line">		<span class="keyword">int</span> l=t[rt].l,r=t[rt].r;</span><br><span class="line">		<span class="keyword">if</span>(k==t[l].size)<span class="keyword">return</span> t[rt].l=<span class="number">0</span>,update(rt),mp(l,rt);</span><br><span class="line">		<span class="keyword">if</span>(k==t[l].size+<span class="number">1</span>)<span class="keyword">return</span> t[rt].r=<span class="number">0</span>,update(rt),mp(rt,r);</span><br><span class="line">		<span class="keyword">if</span>(k&lt;t[l].size)&#123;</span><br><span class="line">			pii tmp=split(l,k);</span><br><span class="line">			<span class="keyword">return</span> t[rt].l=tmp.second,update(rt),mp(tmp.first,rt);</span><br><span class="line">		&#125;</span><br><span class="line">		pii tmp=split(r,k-t[l].size<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">return</span> t[rt].r=tmp.first,update(rt),mp(rt,tmp.second);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>,tmp=INF;</span><br><span class="line">		<span class="keyword">while</span>(k)&#123;</span><br><span class="line">			<span class="keyword">if</span>(x==t[k].val)tmp=min(tmp,ans+t[t[k].l].size+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span>(x&gt;t[k].val)ans+=t[t[k].l].size+<span class="number">1</span>,k=t[k].r;</span><br><span class="line">			<span class="keyword">else</span> k=t[k].l;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> tmp==INF?ans:tmp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    	    <span class="keyword">if</span>(t[t[k].l].size==x<span class="number">-1</span>)<span class="keyword">return</span> t[k].val;</span><br><span class="line">    	    <span class="keyword">if</span>(t[t[k].l].size&gt;x<span class="number">-1</span>)k=t[k].l;</span><br><span class="line">    	    <span class="keyword">else</span> x=x-t[t[k].l].size<span class="number">-1</span>,k=t[k].r;</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	    <span class="keyword">int</span> ans=-INF;</span><br><span class="line">	    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">	        <span class="keyword">if</span>(t[k].val&lt;x)ans=max(ans,t[k].val),k=t[k].r;</span><br><span class="line">	        <span class="keyword">else</span> k=t[k].l;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">neg</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	    <span class="keyword">int</span> ans=INF;</span><br><span class="line">	    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">	        <span class="keyword">if</span>(t[k].val&gt;x)ans=min(ans,t[k].val),k=t[k].l;</span><br><span class="line">	        <span class="keyword">else</span> k=t[k].r;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> k=rank(x,root);</span><br><span class="line">		pii tmp=split(root,k);</span><br><span class="line">		t[++num].val=x;</span><br><span class="line">		t[num].key=rand();</span><br><span class="line">		t[num].size=<span class="number">1</span>;</span><br><span class="line">		root=merge(tmp.first,num);</span><br><span class="line">		root=merge(root,tmp.second);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> k=rank(x,root);</span><br><span class="line">		pii t1=split(root,k);</span><br><span class="line">		pii t2=split(t1.first,k<span class="number">-1</span>);</span><br><span class="line">		root=merge(t2.first,t1.second);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CDQ</span></span><br><span class="line"><span class="keyword">namespace</span> CDQ&#123;</span><br><span class="line">	Operator tmp[maxq];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(Operator arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		do_main(arr,l,mid);</span><br><span class="line">		sort(arr+l,arr+mid+<span class="number">1</span>,cmp1);sort(arr+mid+<span class="number">1</span>,arr+r+<span class="number">1</span>,cmp2);<span class="comment">//Sort according to the partical order</span></span><br><span class="line">		<span class="keyword">int</span> x=l;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> y=mid+<span class="number">1</span>;y&lt;=r;y++)&#123;</span><br><span class="line">			<span class="keyword">while</span>(x&lt;=mid&amp;&amp;arr[x]&lt;arr[y])&#123;<span class="keyword">if</span>(<span class="comment">/*arr[x] is a modify operation*/</span>)<span class="comment">/*Change it*/</span>;x++;&#125;</span><br><span class="line">			<span class="keyword">if</span>(<span class="comment">/*arr[y] is a query operation*/</span>)<span class="comment">/*Calculate the value*/</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=mid;i++)<span class="keyword">if</span>(<span class="comment">/*arr[i] is a modify operation*/</span>)<span class="comment">/*Delete it*/</span>;</span><br><span class="line">		sort(arr+mid+<span class="number">1</span>,arr+r+<span class="number">1</span>,cmp3);<span class="comment">//Sort according to the partical order</span></span><br><span class="line">		do_main(arr,mid+<span class="number">1</span>,r);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Eulerian Path</span></span><br><span class="line"><span class="keyword">namespace</span> Eulerian_Path&#123;</span><br><span class="line">	<span class="keyword">int</span> q[maxm&lt;&lt;<span class="number">1</span>],top=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">bool</span> vis[maxm&lt;&lt;<span class="number">1</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=last[u];~i;i=e[i].nxt)&#123;</span><br><span class="line">    		<span class="keyword">while</span>(~i&amp;&amp;vis[i|<span class="number">1</span>])i=e[i].nxt;</span><br><span class="line">    		<span class="keyword">if</span>(~i)&#123;</span><br><span class="line">				vis[i|<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">				dfs(e[i].v);</span><br><span class="line">				q[++top]=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Suffix Array</span></span><br><span class="line"><span class="keyword">namespace</span> Suffix_Array&#123;</span><br><span class="line">	<span class="keyword">int</span> cntA[<span class="number">300</span>],cntB[<span class="number">300</span>],sa[maxn],tsa[maxn],rank[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">memset</span>(cntA,<span class="number">0</span>,<span class="keyword">sizeof</span>(cntA));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cntA[ch[i]]++;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">256</span>;i++)cntA[i]+=cntA[i<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)sa[cntA[ch[i]]--]=i;</span><br><span class="line">		rank[sa[<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			rank[sa[i]]=rank[sa[i<span class="number">-1</span>]];</span><br><span class="line">			<span class="keyword">if</span>(ch[sa[i]]!=ch[sa[i<span class="number">-1</span>]])rank[sa[i]]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;rank[sa[n]]&lt;n;l&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">memset</span>(cntA,<span class="number">0</span>,<span class="keyword">sizeof</span>(cntA));</span><br><span class="line">			<span class="built_in">memset</span>(cntB,<span class="number">0</span>,<span class="keyword">sizeof</span>(cntB));</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">				cntA[A[i]=rank[i]]++;</span><br><span class="line">				cntB[B[i]=(i+l&lt;=n)?rank[i+l]:<span class="number">0</span>]++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cntA[i]+=cntA[i<span class="number">-1</span>],cntB[i]+=cntB[i<span class="number">-1</span>];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)tsa[cntB[B[i]]--]=i;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)sa[cntA[A[tsa[i]]]--]=tsa[i];</span><br><span class="line">			rank[sa[<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">				rank[sa[i]]=rank[sa[i<span class="number">-1</span>]];</span><br><span class="line">				<span class="keyword">if</span>(A[sa[i]!=A[sa[i<span class="number">-1</span>]]]||B[sa[i]!=B[sa[i<span class="number">-1</span>]]])rank[sa[i]]++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j)j--;</span><br><span class="line">			<span class="keyword">while</span>(ch[i+j]==ch[sa[rank[i]<span class="number">-1</span>]+j)j++;</span><br><span class="line">			height[rank[i]]=j;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Gauss Elimination</span></span><br><span class="line"><span class="keyword">namespace</span> Gauss_Elimination&#123;</span><br><span class="line">	<span class="keyword">typedef</span> <span class="keyword">double</span> Matrix[maxn][maxn];</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">do_main</span><span class="params">(Matrix A,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> r=i;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">fabs</span>(A[j][i])&gt;<span class="built_in">fabs</span>(A[r][i]))r=j;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">fabs</span>(A[r][i])&lt;eps)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(r!=i)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)swap(A[r][j],A[i][j]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=i+<span class="number">1</span>;k&lt;n;k++)&#123;</span><br><span class="line">				<span class="keyword">double</span> f=A[k][i]/A[i][i];</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)A[k][j]-=f*A[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">				A[i][n]-=A[j][n]*A[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">			A[i][n]/=A[i][i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Splay </span></span><br><span class="line"><span class="keyword">namespace</span> Splay&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> ch[<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">int</span> f,key,size,cnt,flip;</span><br><span class="line">	&#125;t[maxn];</span><br><span class="line">	<span class="keyword">int</span> sz,root;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> t[t[x].f].ch[<span class="number">1</span>]==x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		t[x].size=t[x].cnt+t[t[x].ch[<span class="number">0</span>]].size+t[t[x].ch[<span class="number">1</span>]].size;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(t[x].flip)&#123;</span><br><span class="line">			t[x].flip^=<span class="number">1</span>;t[t[x].ch[<span class="number">0</span>]].flip^=<span class="number">1</span>;t[t[x].ch[<span class="number">1</span>]].flip^=<span class="number">1</span>;</span><br><span class="line">			swap(t[x].ch[<span class="number">0</span>],t[x].ch[<span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> f=t[x].f,ff=t[f].f;</span><br><span class="line">		<span class="keyword">bool</span> posx=judge(x),posf=judge(f);</span><br><span class="line">		t[t[x].ch[posx^<span class="number">1</span>]].f=f;t[f].ch[posx]=t[x].ch[posx^<span class="number">1</span>];</span><br><span class="line">		t[f].f=x;t[x].ch[posx^<span class="number">1</span>]=f;</span><br><span class="line">		t[x].f=ff;<span class="keyword">if</span>(ff)t[ff].ch[posf]=x;</span><br><span class="line">		update(f);update(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> &amp;tar)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp=t[tar].f;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i;(i=t[x].f)!=tmp;rotate(x))&#123;</span><br><span class="line">			<span class="keyword">if</span>(t[i].f!=tmp)rotate(judge(x)==judge(i)?i:x);</span><br><span class="line">		&#125;</span><br><span class="line">		tar=x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> f,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">		t[x].f=f;t[x].key=key;t[x].cnt=t[x].size=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!root)&#123;reset(++sz,<span class="number">0</span>,x);root=sz;<span class="keyword">return</span>;&#125;</span><br><span class="line">		<span class="keyword">int</span> now=root,f=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(x==t[now].key)&#123;t[now].cnt++;update(now);splay(now,root);<span class="keyword">return</span>;&#125;</span><br><span class="line">			f=now;now=t[now].ch[t[now].key&lt;x];</span><br><span class="line">			<span class="keyword">if</span>(!now)&#123;</span><br><span class="line">				reset(++sz,f,x);</span><br><span class="line">				t[f].ch[t[f].key&lt;x]=sz;</span><br><span class="line">				splay(sz,root);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> now=rt,res=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(now)&#123;</span><br><span class="line">			pushdown(now);</span><br><span class="line">			<span class="keyword">if</span>(x==t[now].key)&#123;res+=t[t[now].ch[<span class="number">0</span>]].size;splay(now,rt);<span class="keyword">return</span> res;&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(x&gt;t[now].key)res+=t[now].size-t[t[now].ch[<span class="number">1</span>]].size,now=t[now].ch[<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">else</span> now=t[now].ch[<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> now=rt,cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(now)&#123;</span><br><span class="line">			pushdown(now);</span><br><span class="line">			<span class="keyword">if</span>(cnt+t[now].size-t[t[now].ch[<span class="number">1</span>]].size&gt;=x&amp;&amp;cnt+t[t[now].ch[<span class="number">0</span>]].size&lt;x)<span class="keyword">return</span> splay(now,rt),t[now].key;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(cnt+t[now].size-t[t[now].ch[<span class="number">1</span>]].size&lt;x)cnt+=t[now].size-t[t[now].ch[<span class="number">1</span>]].size,now=t[now].ch[<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">else</span> now=t[now].ch[<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> splay(now,rt),t[now].key;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!left||!right)<span class="keyword">return</span> left|right;</span><br><span class="line">		find(left,t[left].size);</span><br><span class="line">		t[left].ch[<span class="number">1</span>]=right;</span><br><span class="line">		t[right].f=left;</span><br><span class="line">		update(left);</span><br><span class="line">		<span class="keyword">return</span> left;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">pii <span class="title">split</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!k)<span class="keyword">return</span> mp(<span class="number">0</span>,rt);</span><br><span class="line">		find(rt,k);</span><br><span class="line">		<span class="keyword">int</span> left=rt,right=t[rt].ch[<span class="number">1</span>];</span><br><span class="line">		t[left].ch[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		t[right].f=<span class="number">0</span>;</span><br><span class="line">		update(left);</span><br><span class="line">		<span class="keyword">return</span> mp(left,right);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> k=rank(root,x);</span><br><span class="line">		pii t1=split(root,k);</span><br><span class="line">		pii t2=split(t1.first,k<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">if</span>(!(--t[t2.second].cnt))root=merge(t2.first,t1.second);</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			root=merge(t2.first,t2.second);</span><br><span class="line">			root=merge(root,t1.second);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=-INF,now=root;</span><br><span class="line">        <span class="keyword">while</span>(now)&#123;</span><br><span class="line">        	pushdown(now);</span><br><span class="line">            <span class="keyword">if</span>(t[now].key&lt;x)res=max(res,t[now].key),now=t[now].ch[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> now=t[now].ch[<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">neg</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=INF,now=root;</span><br><span class="line">        <span class="keyword">while</span>(now)&#123;</span><br><span class="line">        	pushdown(now);</span><br><span class="line">            <span class="keyword">if</span>(t[now].key&gt;x)res=min(res,t[now].key),now=t[now].ch[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> now=t[now].ch[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		pii p1=split(root,l<span class="number">-1</span>);</span><br><span class="line">		pii p2=split(p1.second,r-l+<span class="number">1</span>);</span><br><span class="line">		t[p2.first].flip^=<span class="number">1</span>;</span><br><span class="line">		root=merge(p2.first,p2.second);</span><br><span class="line">		root=merge(p1.first,root);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Simulate Anneal</span></span><br><span class="line"><span class="keyword">namespace</span> Simulate_Anneal&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">accept</span><span class="params">(<span class="keyword">double</span> delta,<span class="keyword">double</span> temper)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(delta&gt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> rand()&lt;<span class="built_in">exp</span>(delta/temper)*RAND_MAX;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(State x)</span></span>&#123;<span class="comment">/* 对状态x进行估价，应该使估价值的数量级较大 */</span>&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">double</span> t=<span class="comment">/* 初始温度 */</span>,del=<span class="number">0.999</span>;</span><br><span class="line">		State plan=<span class="comment">/* 初始状态 */</span>;</span><br><span class="line">		<span class="keyword">while</span>(t&gt;eps)&#123;</span><br><span class="line">			State newplan=<span class="comment">/* 在plan状态的基础上根据t进行变动[ex:（一维坐标系下的模拟退火）double newplan=plan+(((double)rand()/RAND_MAX)*2-1)*t;] */</span>;</span><br><span class="line">			<span class="keyword">if</span>(accept(f(newplan)-f(plan),t))plan=newplan;</span><br><span class="line">			t*=del;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> f(plan);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		srand(<span class="number">20010817</span>);</span><br><span class="line">		<span class="keyword">int</span> res=INF;</span><br><span class="line">		<span class="keyword">int</span> T=<span class="number">100</span>;<span class="comment">//退火次数，可小一些</span></span><br><span class="line">		<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">			res=min(res,solve());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MFMC</span></span><br><span class="line"><span class="keyword">namespace</span> MFMC&#123;</span><br><span class="line">	<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line">	<span class="keyword">int</span> q[maxn*maxn],pe[maxn],pv[maxn],dis[maxn];</span><br><span class="line">	<span class="keyword">bool</span> vis[maxn];</span><br><span class="line">	<span class="keyword">namespace</span> SPFA&#123;</span><br><span class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">			<span class="keyword">int</span> head=<span class="number">1</span>,tail=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">			<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));	</span><br><span class="line">			dis[s]=<span class="number">0</span>;</span><br><span class="line">			vis[s]=<span class="number">1</span>;</span><br><span class="line">			q[++tail]=s;</span><br><span class="line">			<span class="keyword">while</span>(head&lt;=tail)&#123;</span><br><span class="line">				<span class="keyword">int</span> u=q[head++];</span><br><span class="line">				vis[u]=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];~i;i=e[i].nxt)&#123;</span><br><span class="line">					<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">					<span class="keyword">if</span>(e[i].f&amp;&amp;dis[v]&gt;dis[u]+e[i].c)&#123;</span><br><span class="line">						dis[v]=dis[u]+e[i].c;</span><br><span class="line">						pe[v]=i,pv[v]=u;</span><br><span class="line">						<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">							vis[v]=<span class="number">1</span>;</span><br><span class="line">							q[++tail]=v;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> dis[t]&lt;INF;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">pii <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> cost=<span class="number">0</span>,flow=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(SPFA::do_main(s,t))&#123;</span><br><span class="line">			<span class="keyword">int</span> new_flow=INF;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=t;i!=s;i=pv[i])new_flow=min(new_flow,e[pe[i]].f);</span><br><span class="line">			cost+=new_flow*dis[t];</span><br><span class="line">			flow+=new_flow;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=t;i!=s;i=pv[i])e[pe[i]].f-=new_flow,e[pe[i]^<span class="number">1</span>].f+=new_flow;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> pii(cost,flow);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Link-Cut Tree</span></span><br><span class="line"><span class="keyword">namespace</span> LCT&#123;</span><br><span class="line">	<span class="keyword">namespace</span> Splay&#123;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">			<span class="keyword">int</span> ch[<span class="number">2</span>];</span><br><span class="line">			<span class="keyword">int</span> f,key,size;</span><br><span class="line">			<span class="keyword">bool</span> rev;</span><br><span class="line">			Node()&#123;f=key=rev=size=<span class="number">0</span>;&#125;</span><br><span class="line">		&#125;t[maxn];</span><br><span class="line">		<span class="keyword">int</span> sz,root;</span><br><span class="line">		<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">			<span class="keyword">return</span> t[t[x].f].ch[<span class="number">1</span>]==x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">			t[x].size=<span class="number">1</span>+t[t[x].ch[<span class="number">0</span>]].size+t[t[x].ch[<span class="number">1</span>]].size;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(t[x].rev)&#123;</span><br><span class="line">				t[x].rev^=<span class="number">1</span>;t[t[x].ch[<span class="number">0</span>]].rev^=<span class="number">1</span>;t[t[x].ch[<span class="number">1</span>]].rev^=<span class="number">1</span>;</span><br><span class="line">				swap(t[x].ch[<span class="number">0</span>],t[x].ch[<span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">			<span class="keyword">return</span> t[t[x].f].ch[<span class="number">0</span>]!=x&amp;&amp;t[t[x].f].ch[<span class="number">1</span>]!=x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">			<span class="keyword">int</span> f=t[x].f,ff=t[f].f;</span><br><span class="line">			<span class="keyword">bool</span> posx=judge(x),posf=judge(f);</span><br><span class="line">			t[x].f=ff;<span class="keyword">if</span>(!is_root(f))t[ff].ch[posf]=x;</span><br><span class="line">			t[t[x].ch[posx^<span class="number">1</span>]].f=f;t[f].ch[posx]=t[x].ch[posx^<span class="number">1</span>];</span><br><span class="line">			t[f].f=x;t[x].ch[posx^<span class="number">1</span>]=f;</span><br><span class="line">			update(f);update(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> sta[maxn];</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">			<span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">			sta[++top]=x;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=x;!is_root(i);i=t[i].f)sta[++top]=t[i].f;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=top;i;i--)pushdown(sta[i]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i;!is_root(x);rotate(x))&#123;</span><br><span class="line">				<span class="keyword">if</span>(!is_root(i=t[x].f))rotate(judge(x)==judge(i)?i:x);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> Splay;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(x)&#123;</span><br><span class="line">			splay(x);</span><br><span class="line">			t[x].ch[<span class="number">1</span>]=tmp;</span><br><span class="line">			tmp=x;x=t[x].f;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">mroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		access(x);</span><br><span class="line">		splay(x);</span><br><span class="line">		t[x].rev^=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">		mroot(x);</span><br><span class="line">		t[x].f=y;</span><br><span class="line">		splay(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">		mroot(x);</span><br><span class="line">		access(y);</span><br><span class="line">		splay(y);</span><br><span class="line">		t[y].ch[<span class="number">0</span>]=t[x].f=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Baby Steps Giant Steps</span></span><br><span class="line"><span class="keyword">namespace</span> BSGS&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> Quick_pow;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;mp;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(a%p==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		mp.clear();</span><br><span class="line">		<span class="keyword">int</span> m=<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(p));</span><br><span class="line">		<span class="keyword">int</span> am=Quick_Pow::do_main(a,m);</span><br><span class="line">		<span class="keyword">int</span> baj=b%p;</span><br><span class="line">		mp[baj]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">			baj=baj*a%p;</span><br><span class="line">			mp[baj]=j;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ami=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">			ami=ami*am%p;</span><br><span class="line">			<span class="keyword">if</span>(mp.count(ami))<span class="keyword">return</span> i*m-mp[ami];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Minimum Coverage Circle</span></span><br><span class="line"><span class="keyword">namespace</span> MCC&#123;</span><br><span class="line">	<span class="function">Point <span class="title">GetLineIntersection</span><span class="params">(Line l1,Line l2)</span></span>&#123;<span class="keyword">return</span> l1.p+l1.v*(Cross(l2.v,l1.p-l2.p)/Cross(l1.v,l2.v));&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">In_Circle</span><span class="params">(Point p,Circle c)</span></span>&#123;<span class="keyword">return</span> dcmp(Len(p-c.o)-c.r)&lt;<span class="number">0</span>;&#125;</span><br><span class="line">	<span class="function">Circle <span class="title">Cir</span><span class="params">(Point a)</span></span>&#123;Circle C;C.o=a,C.r=<span class="number">0</span>;<span class="keyword">return</span> C;&#125;</span><br><span class="line">	<span class="function">Circle <span class="title">Cir</span><span class="params">(Point a,Point b)</span></span>&#123;Circle C;C.o=(a+b)/<span class="number">2</span>,C.r=Len(C.o-a);<span class="keyword">return</span> C;&#125;</span><br><span class="line">	<span class="function">Circle <span class="title">Cir</span><span class="params">(Point a,Point b,Point c)</span></span>&#123;</span><br><span class="line">		Circle C;</span><br><span class="line">		Line l1=(Line)&#123;(a+b)/<span class="number">2</span>,Normal(a-b)&#125;,l2=(Line)&#123;(b+c)/<span class="number">2</span>,Normal(b-c)&#125;;</span><br><span class="line">		C.o=GetLineIntersection(l1,l2);</span><br><span class="line">		C.r=Len(C.o-a);</span><br><span class="line">		<span class="keyword">return</span> C;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Circle <span class="title">do_main</span><span class="params">(Point *P,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		random_shuffle(P+<span class="number">1</span>,P+n+<span class="number">1</span>);</span><br><span class="line">		Circle c;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!In_Circle(P[i],c))&#123;</span><br><span class="line">				c=Cir(P[i]);</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">					<span class="keyword">if</span>(!In_Circle(P[j],c))&#123;</span><br><span class="line">						c=Cir(P[i],P[j]);</span><br><span class="line">						<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;j;k++)&#123;</span><br><span class="line">							<span class="keyword">if</span>(!In_Circle(P[k],c))&#123;</span><br><span class="line">								<span class="keyword">if</span>(dcmp(Cross(P[i]-P[j],P[i]-P[k])))c=Cir(P[i],P[j],P[k]);</span><br><span class="line">								<span class="keyword">else</span> <span class="keyword">if</span>(dcmp(Len(P[i]-P[k])-Len(P[j]-P[k]))&gt;<span class="number">0</span>)c=Cir(P[i],P[k]);</span><br><span class="line">								<span class="keyword">else</span> c=Cir(P[j],P[k]);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> c;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Minimum Representation</span></span><br><span class="line"><span class="keyword">namespace</span> MR&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">char</span>* s)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i,j,k;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>,j=<span class="number">2</span>,k=<span class="number">0</span>;i&lt;=n&amp;&amp;j&lt;=n&amp;&amp;k&lt;=n;)&#123;</span><br><span class="line">			<span class="keyword">int</span> dif=s[i+k]-s[j+k];</span><br><span class="line">			<span class="keyword">if</span>(!dif)k++;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(dif&gt;<span class="number">0</span>)i=max(i+k+<span class="number">1</span>,j+<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">else</span> j=max(j+k+<span class="number">1</span>,i+<span class="number">1</span>);</span><br><span class="line">				k=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> min(i,j);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Suffix Automaton</span></span><br><span class="line"><span class="keyword">namespace</span> SAM&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> min,max,trans[sigma_size],slink,endpos;</span><br><span class="line">		LL cnt;</span><br><span class="line">	&#125;t[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">int</span> sz=<span class="number">1</span>,ed=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> degree[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">bool</span> is_pre[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">New_node</span><span class="params">(<span class="keyword">int</span> minlen,<span class="keyword">int</span> maxlen,<span class="keyword">int</span> *trans,<span class="keyword">int</span> slink)</span></span>&#123;</span><br><span class="line">		sz++;</span><br><span class="line">		t[sz].min=minlen,t[sz].max=maxlen,t[sz].slink=slink;</span><br><span class="line">		<span class="keyword">if</span>(trans!=<span class="literal">NULL</span>)<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sigma_size;i++)t[sz].trans[i]=trans[i];</span><br><span class="line">		<span class="keyword">return</span> sz;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> c=ch-<span class="string">'a'</span>;</span><br><span class="line">		<span class="keyword">int</span> z=New_node(<span class="number">-1</span>,t[ed].max+<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">-1</span>);</span><br><span class="line">		is_pre[z]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> v=ed;</span><br><span class="line">		ed=z;</span><br><span class="line">		<span class="keyword">while</span>(v&amp;&amp;!t[v].trans[c])&#123;</span><br><span class="line">			t[v].trans[c]=z;</span><br><span class="line">			v=t[v].slink;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!v)&#123;</span><br><span class="line">			t[z].min=<span class="number">1</span>;</span><br><span class="line">			t[z].slink=<span class="number">1</span>;</span><br><span class="line">			degree[<span class="number">1</span>]++;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> x=t[v].trans[c];</span><br><span class="line">		<span class="keyword">if</span>(t[v].max+<span class="number">1</span>==t[x].max)&#123;</span><br><span class="line">			t[z].min=t[x].max+<span class="number">1</span>;</span><br><span class="line">			t[z].slink=x;</span><br><span class="line">			degree[x]++;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> y=New_node(t[t[x].slink].max+<span class="number">1</span>,t[v].max+<span class="number">1</span>,t[x].trans,t[x].slink);</span><br><span class="line">		t[x].slink=t[z].slink=y;degree[y]+=<span class="number">2</span>;</span><br><span class="line">		t[x].min=t[z].min=t[y].max+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(v&amp;&amp;t[v].trans[c]==x)&#123;</span><br><span class="line">			t[v].trans[c]=y;</span><br><span class="line">			v=t[v].slink;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Topo</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=sz;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!degree[i])q.push(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">			<span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">			<span class="keyword">if</span>(is_pre[u])t[u].cnt++;</span><br><span class="line">			t[t[u].slink].cnt+=t[u].cnt;</span><br><span class="line">			<span class="keyword">if</span>(--degree[t[u].slink]==<span class="number">0</span>)q.push(t[u].slink);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConvexHull</span></span><br><span class="line"><span class="keyword">namespace</span> ConvexHull&#123;</span><br><span class="line">	<span class="function">Polygon <span class="title">do_main</span><span class="params">(Point p[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		sort(p+<span class="number">1</span>,p+n+<span class="number">1</span>);</span><br><span class="line">		Polygon res;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">while</span>(res.num&gt;<span class="number">1</span>&amp;&amp;Cross(res.p[res.num]-res.p[res.num<span class="number">-1</span>],p[i]-res.p[res.num<span class="number">-1</span>])&lt;=<span class="number">0</span>)res.num--;</span><br><span class="line">			res.p[++res.num]=p[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> tmp=res.num;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i;i--)&#123;</span><br><span class="line">			<span class="keyword">while</span>(res.num&gt;tmp&amp;&amp;Cross(res.p[res.num]-res.p[res.num<span class="number">-1</span>],p[i]-res.p[res.num<span class="number">-1</span>])&lt;=<span class="number">0</span>)res.num--;</span><br><span class="line">			res.p[++res.num]=p[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(num&gt;<span class="number">1</span>)res.num--;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Half-plane Intersection</span></span><br><span class="line"><span class="keyword">namespace</span> HPI&#123;</span><br><span class="line">	<span class="function">Polygon <span class="title">do_main</span><span class="params">(Line l[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		sort(l+<span class="number">1</span>,l+n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">1</span>||l[i].ang!=l[i<span class="number">-1</span>].ang)l[++top]=l[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> head=<span class="number">1</span>,tail=<span class="number">0</span>;</span><br><span class="line">		q[++tail]=l[<span class="number">1</span>];q[++tail]=l[<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=top;i++)&#123;</span><br><span class="line">			<span class="keyword">while</span>(head&lt;tail&amp;&amp;OnRight(Intersection(q[tail],q[tail<span class="number">-1</span>]),l[i]))tail--;</span><br><span class="line">			<span class="keyword">while</span>(head&lt;tail&amp;&amp;OnRight(Intersection(q[head],q[head+<span class="number">1</span>]),l[i]))head++;</span><br><span class="line">			q[++tail]=l[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(head&lt;tail&amp;&amp;OnRight(Intersection(q[tail],q[tail<span class="number">-1</span>]),l[head]))tail--;</span><br><span class="line">		<span class="keyword">while</span>(head&lt;tail&amp;&amp;OnRight(Intersection(q[head],q[head+<span class="number">1</span>]),l[tail]))head++;</span><br><span class="line">		Polygon res;</span><br><span class="line">		q[tail+<span class="number">1</span>]=q[head];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=head;i&lt;=tail;i++)res.p[++res.num]=Intersection(q[i],q[i+<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Leftist Tree</span></span><br><span class="line"><span class="keyword">namespace</span> Leftist_Tree&#123;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> ls t[x].ch[0]</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> rs t[x].ch[1]</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> f,val,ch[<span class="number">2</span>],h,size;</span><br><span class="line">	&#125;t[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!x||!y)<span class="keyword">return</span> x+y;</span><br><span class="line">		<span class="keyword">if</span>(t[x].val&lt;t[y].val)swap(x,y);</span><br><span class="line">		rs=Merge(rs,y);</span><br><span class="line">		t[rs].f=x;</span><br><span class="line">		<span class="keyword">if</span>(t[ls].size&lt;t[rs].size)swap(ls,rs);</span><br><span class="line">		t[x].size=t[ls].size+t[rs].size+<span class="number">1</span>;</span><br><span class="line">		t[x].h=t[rs].h+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		t[x].val=<span class="number">0</span>;</span><br><span class="line">		t[ls].f=t[rs].f=<span class="number">0</span>;</span><br><span class="line">		Merge(ls,rs);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>知识点总结</tag>
      </tags>
  </entry>
</search>
