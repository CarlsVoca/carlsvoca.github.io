<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Codeforces Round #620 (Div. 2)</title>
    <url>/2020/02/16/Codeforces-Round-620-Div-2/</url>
    <content><![CDATA[<h2 id="A-Two-Rabbits"><a href="#A-Two-Rabbits" class="headerlink" title="A. Two Rabbits"></a>A. Two Rabbits</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> x,y,a,b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;x,&amp;y,&amp;a,&amp;b);</span><br><span class="line">		<span class="keyword">int</span> dis=<span class="built_in">abs</span>(x-y);</span><br><span class="line">		<span class="keyword">if</span>(dis%(a+b)==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis/(a+b));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="B-Longest-Palindrome"><a href="#B-Longest-Palindrome" class="headerlink" title="B. Longest Palindrome"></a>B. Longest Palindrome</h2><p>找得到反转串就输出，中间找一下有没有自反串。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i][k]!=s[j][m-k<span class="number">-1</span>])flag=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">				p[i]=j;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p[i])ans++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i][j]!=s[i][m-j<span class="number">-1</span>])flag=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">			ans++;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p[i])ans++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans*m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p[i])<span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i][j]!=s[i][m-j<span class="number">-1</span>])flag=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p[i])<span class="built_in">cout</span>&lt;&lt;s[p[i]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-Air-Conditioner"><a href="#C-Air-Conditioner" class="headerlink" title="C. Air Conditioner"></a>C. Air Conditioner</h2><p>感觉这题以前（OI时期）见过。Flappy Bird？</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span>&#123;</span></span><br><span class="line">	LL t,l,r;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> C&amp; b)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> t&lt;b.t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		LL m;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;n,&amp;m);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;c[i].t,&amp;c[i].l,&amp;c[i].r);</span><br><span class="line">		sort(c+<span class="number">1</span>,c+n+<span class="number">1</span>);</span><br><span class="line">		LL l=m,r=m,pre=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			l-=(c[i].t-pre);</span><br><span class="line">			r+=(c[i].t-pre);</span><br><span class="line">			<span class="keyword">if</span>(l&gt;c[i].r||r&lt;c[i].l)&#123;</span><br><span class="line">				flag=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				l=max(l,c[i].l);</span><br><span class="line">				r=min(r,c[i].r);</span><br><span class="line">				pre=c[i].t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-Shortest-and-Longest-LIS"><a href="#D-Shortest-and-Longest-LIS" class="headerlink" title="D. Shortest and Longest LIS"></a>D. Shortest and Longest LIS</h2><p>在满足序列的情况下，前面的数越大LIS越小。初始为降序数列，按照大小序列重排部分元素即可。LIS最大和最小同理。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="built_in">string</span> s;</span><br><span class="line">		<span class="keyword">int</span> sta=<span class="number">-1</span>,ed;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)a[i]=n-i+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]==<span class="string">'&gt;'</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(sta==<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					ed=i+<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> j=sta;j&lt;ed-(j-sta);j++)&#123;</span><br><span class="line">						swap(a[j],a[ed-(j-sta)]);</span><br><span class="line">					&#125;</span><br><span class="line">					sta=<span class="number">-1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(sta==<span class="number">-1</span>)sta=i+<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sta!=<span class="number">-1</span>)&#123;</span><br><span class="line">			ed=n;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=sta;j&lt;ed-(j-sta);j++)&#123;</span><br><span class="line">				swap(a[j],a[ed-(j-sta)]);</span><br><span class="line">			&#125;</span><br><span class="line">			sta=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)a[i]=i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]==<span class="string">'&lt;'</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(sta==<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					ed=i+<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> j=sta;j&lt;ed-(j-sta);j++)&#123;</span><br><span class="line">						swap(a[j],a[ed-(j-sta)]);</span><br><span class="line">					&#125;</span><br><span class="line">					sta=<span class="number">-1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(sta==<span class="number">-1</span>)sta=i+<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sta!=<span class="number">-1</span>)&#123;</span><br><span class="line">			ed=n;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=sta;j&lt;ed-(j-sta);j++)&#123;</span><br><span class="line">				swap(a[j],a[ed-(j-sta)]);</span><br><span class="line">			&#125;</span><br><span class="line">			sta=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="E-1-Trees-and-Queries"><a href="#E-1-Trees-and-Queries" class="headerlink" title="E. 1-Trees and Queries"></a>E. 1-Trees and Queries</h2><p>合法步数+偶数步仍为合法步数（可以反复走其中两个点），所以只需要判断合法路径长度的奇偶性。有三种基础路径a➡b，a➡x➡y➡b，a➡y➡x➡b。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> nume=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> last[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++nume]=(Edge)&#123;u,v,last[u]&#125;;</span><br><span class="line">	last[u]=nume;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LCA&#123;</span><br><span class="line">	<span class="keyword">int</span> dep[maxn],f[maxn][<span class="number">22</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">			<span class="keyword">if</span>(v!=f[u][<span class="number">0</span>])&#123;</span><br><span class="line">				f[v][<span class="number">0</span>]=u;</span><br><span class="line">				dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">				dfs(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">				f[i][j]=f[f[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[a]&lt;dep[b])swap(a,b);</span><br><span class="line">		<span class="keyword">int</span> dif=dep[a]-dep[b];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=dif;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;dif)a=f[a][i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a!=b)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=(<span class="keyword">int</span>)log2(n);i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(f[a][i]!=f[b][i])&#123;</span><br><span class="line">					a=f[a][i];b=f[b][i];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			a=f[a][<span class="number">0</span>];b=f[b][<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> LCA=do_main(u,v);</span><br><span class="line">		<span class="keyword">return</span> dep[u]-dep[LCA]+dep[v]-dep[LCA];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> LCA;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">		add_edge(u,v);add_edge(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(<span class="number">1</span>);</span><br><span class="line">	pre();</span><br><span class="line">	<span class="keyword">int</span> q;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="keyword">int</span> x,y,a,b,k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>,&amp;x,&amp;y,&amp;a,&amp;b,&amp;k);</span><br><span class="line">		<span class="keyword">int</span> a_b=dis(a,b),a_x=dis(x,a),b_x=dis(x,b),a_y=dis(y,a),b_y=dis(y,b);</span><br><span class="line">		<span class="keyword">int</span> path1=a_b,path2=a_x+b_y+<span class="number">1</span>,path3=a_y+b_x+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(k&amp;<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>((path1&amp;<span class="number">1</span>)&amp;&amp;k&gt;=path1)&#123;<span class="built_in">puts</span>(<span class="string">"YES"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">			<span class="keyword">if</span>((path2&amp;<span class="number">1</span>)&amp;&amp;k&gt;=path2)&#123;<span class="built_in">puts</span>(<span class="string">"YES"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">			<span class="keyword">if</span>((path3&amp;<span class="number">1</span>)&amp;&amp;k&gt;=path3)&#123;<span class="built_in">puts</span>(<span class="string">"YES"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>((!(path1&amp;<span class="number">1</span>))&amp;&amp;k&gt;=path1)&#123;<span class="built_in">puts</span>(<span class="string">"YES"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">			<span class="keyword">if</span>((!(path2&amp;<span class="number">1</span>))&amp;&amp;k&gt;=path2)&#123;<span class="built_in">puts</span>(<span class="string">"YES"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">			<span class="keyword">if</span>((!(path3&amp;<span class="number">1</span>))&amp;&amp;k&gt;=path3)&#123;<span class="built_in">puts</span>(<span class="string">"YES"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>2020牛客寒假算法基础集训营6</title>
    <url>/2020/02/16/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A56/</url>
    <content><![CDATA[<h2 id="A-配对"><a href="#A-配对" class="headerlink" title="A. 配对"></a>A. 配对</h2><p>转化问题为最大化第k小的和(k=n-k+1)，显然前k-1的和越小越好，将a和b排序后，前k-1小就是a和b前k-1小对应加和。贪心将a数组剩余项倒序和b数组配对后得出答案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x7fffffff</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    k=n-k+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">    sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    sort(a+k,a+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">int</span> ans=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;=n;i++)ans=min(ans,a[i]+b[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="B-图"><a href="#B-图" class="headerlink" title="B. 图"></a>B. 图</h2><p>dfs判个环。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> f[maxn],t[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sta=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[u])<span class="keyword">return</span>;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(vis[t[u]])&#123;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        sta=t[u];</span><br><span class="line">        f[u]=<span class="number">0</span>;</span><br><span class="line">        vis[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(t[u]);</span><br><span class="line">    f[u]=f[t[u]]+<span class="number">1</span>;</span><br><span class="line">    vis[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="comment">//  printf("dfs2 %d\n",u);</span></span><br><span class="line">    <span class="keyword">if</span>(u==sta)<span class="keyword">return</span>;</span><br><span class="line">    f[u]=f[sta];</span><br><span class="line">    dfs2(t[u]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t[i]);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        flag=<span class="number">0</span>;sta=<span class="number">0</span>;</span><br><span class="line">        dfs(i);</span><br><span class="line"><span class="comment">//      printf("sta=%d\n",sta);</span></span><br><span class="line">        <span class="keyword">if</span>(flag)dfs2(t[sta]);</span><br><span class="line">        ans=max(ans,f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-重排列"><a href="#D-重排列" class="headerlink" title="D. 重排列"></a>D. 重排列</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">    LL ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">int</span> pos=lower_bound(b+<span class="number">1</span>,b+n+<span class="number">1</span>,a[i])-b;</span><br><span class="line">        ans*=(n-pos+<span class="number">1</span>-(n-i));</span><br><span class="line">        ans%=MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="F-十字排列"><a href="#F-十字排列" class="headerlink" title="F. 十字排列"></a>F. 十字排列</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Fast_IO&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">int</span> flag=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">        <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">-1</span>;<span class="keyword">if</span>(ch==EOF)<span class="keyword">return</span> <span class="number">0</span>;ch=getchar();&#125;</span><br><span class="line">        <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">        <span class="keyword">return</span> x*=flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Fast_IO;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> totx[maxn],toty[maxn],tot[maxn][maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,h;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;h);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z;i&lt;=h;i++)&#123;</span><br><span class="line">        read(x);read(y);read(z);</span><br><span class="line">        totx[x]=(totx[x]+z)%MOD;</span><br><span class="line">        toty[y]=(toty[y]+z)%MOD;</span><br><span class="line">        tot[x][y]=(tot[x][y]+z)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            ans+=<span class="number">1L</span>L*((totx[i]+toty[j]-tot[i][j])%MOD+MOD)%MOD*(i+j)%MOD;</span><br><span class="line">            ans%=MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="G-括号序列"><a href="#G-括号序列" class="headerlink" title="G. 括号序列"></a>G. 括号序列</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'('</span>)sta.push(s[i]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(sta.empty())ans++;</span><br><span class="line">                <span class="keyword">else</span> sta.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=sta.size();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="J-签到题"><a href="#J-签到题" class="headerlink" title="J. 签到题"></a>J. 签到题</h2><p>不存在No的情况。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    <span class="keyword">if</span>(a+b&gt;c&amp;&amp;a+c&gt;b&amp;&amp;b+c&gt;a)&#123;</span><br><span class="line">        <span class="keyword">double</span> r[<span class="number">4</span>];</span><br><span class="line">        r[<span class="number">1</span>]=(b+c-a)/<span class="number">2.0</span>;</span><br><span class="line">        r[<span class="number">2</span>]=c-r[<span class="number">1</span>];</span><br><span class="line">        r[<span class="number">3</span>]=b-r[<span class="number">1</span>];</span><br><span class="line">        sort(r+<span class="number">1</span>,r+<span class="number">4</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf %.2lf %.2lf\n"</span>,r[<span class="number">1</span>],r[<span class="number">2</span>],r[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"wtnl"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>nowcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>2020牛客寒假算法基础集训营5</title>
    <url>/2020/02/16/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A55/</url>
    <content><![CDATA[<h2 id="A-模板"><a href="#A-模板" class="headerlink" title="A. 模板"></a>A. 模板</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">string</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;min(n,m);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=b[i])ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+max(n,m)-min(n,m));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="B-牛牛战队的比赛地"><a href="#B-牛牛战队的比赛地" class="headerlink" title="B. 牛牛战队的比赛地"></a>B. 牛牛战队的比赛地</h2><p>三分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Ternary_Search&#123;</span><br><span class="line">	<span class="keyword">double</span> EPS=<span class="number">1e-6</span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> ans)</span></span>&#123;</span><br><span class="line">		Point tmp;</span><br><span class="line">        tmp.x=ans;tmp.y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)res=max(res,dis(tmp,p[i]));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">do_main</span><span class="params">(<span class="keyword">double</span> l,<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">while</span>(r-l&gt;EPS)&#123;</span><br><span class="line">        	<span class="keyword">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        	<span class="keyword">double</span> midd=(mid+r)/<span class="number">2</span>;</span><br><span class="line">        	<span class="keyword">if</span>(f(mid)&lt;f(midd))r=midd;</span><br><span class="line">        	<span class="keyword">else</span> l=mid;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> f(l);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Ternary_Search;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,do_main(<span class="number">-10000</span>,<span class="number">10000</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-牛牛与牛妹的约会"><a href="#D-牛牛与牛妹的约会" class="headerlink" title="D. 牛牛与牛妹的约会"></a>D. 牛牛与牛妹的约会</h2><p>能跳就跳。卡了点精度，1e-6过不了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Binary_Search&#123;</span><br><span class="line">    <span class="keyword">double</span> EPS=<span class="number">1e-8</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> ans,<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ans*ans*ans&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">sqrt3</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> l=<span class="number">0</span>,r=<span class="number">1e6</span>;</span><br><span class="line">        <span class="keyword">while</span>(r-l&gt;EPS)&#123;</span><br><span class="line">            <span class="keyword">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid,x))r=mid;</span><br><span class="line">            <span class="keyword">else</span> l=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Binary_Search;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cul</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">abs</span>(x);y=<span class="built_in">abs</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=y)<span class="keyword">return</span> y-x;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">double</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x-sqrt3(x)&gt;<span class="number">1</span>&amp;&amp;sqrt3(x)&gt;=y)&#123;</span><br><span class="line">            x=sqrt3(x);</span><br><span class="line">            res+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min(res+x-y,res+<span class="number">1</span>+<span class="built_in">abs</span>(sqrt3(x)-y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">double</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(a*b&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            a=<span class="built_in">abs</span>(a);</span><br><span class="line">            <span class="keyword">while</span>(a-sqrt3(a)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                a=sqrt3(a);</span><br><span class="line">                ans+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=a;</span><br><span class="line">            ans+=cul(<span class="number">0</span>,b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans+=cul(a,b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="E-Enjoy-the-game"><a href="#E-Enjoy-the-game" class="headerlink" title="E. Enjoy the game"></a>E. Enjoy the game</h2><p>如果n是2的幂次，后手必胜。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>((<span class="number">1L</span>L&lt;&lt;(<span class="keyword">int</span>)log2(n))!=n)<span class="built_in">puts</span>(<span class="string">"Bob"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Alice"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="I-I题是个签到题"><a href="#I-I题是个签到题" class="headerlink" title="I. I题是个签到题"></a>I. I题是个签到题</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">int</span> I=a[<span class="number">9</span>];</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(a[n<span class="number">-2</span>]&lt;=I)<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(I&gt;=m*<span class="number">0.8</span>)<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="J-牛牛战队的秀场"><a href="#J-牛牛战队的秀场" class="headerlink" title="J. 牛牛战队的秀场"></a>J. 牛牛战队的秀场</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lf"</span>,&amp;n,&amp;r);</span><br><span class="line">    <span class="keyword">double</span> a=<span class="built_in">sqrt</span>((<span class="number">1</span>-<span class="built_in">cos</span>(<span class="number">2</span>*pi/n))*<span class="number">2</span>*r*r);</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;i,&amp;j);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,min((max(i,j)-min(i,j))*a,(min(i,j)+n-max(i,j))*a));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>nowcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>2020牛客寒假算法基础集训营4</title>
    <url>/2020/02/11/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A54/</url>
    <content><![CDATA[<h2 id="A-欧几里得"><a href="#A-欧几里得" class="headerlink" title="A. 欧几里得"></a>A. 欧几里得</h2><p>斐波那契数列是欧几里得算法最不理想的情况。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"> </span><br><span class="line">LL f[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)f[i]=f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>];</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[n+<span class="number">1</span>]+f[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="B-括号序列"><a href="#B-括号序列" class="headerlink" title="B. 括号序列"></a>B. 括号序列</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> b,<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="string">'('</span>&amp;&amp;c==<span class="string">')'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="string">'['</span>&amp;&amp;c==<span class="string">']'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="string">'&#123;'</span>&amp;&amp;c==<span class="string">'&#125;'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> n=s.length();</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'('</span>||s[i]==<span class="string">'['</span>||s[i]==<span class="string">'&#123;'</span>)&#123;</span><br><span class="line">            a.push(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!a.empty()&amp;&amp;cmp(a.top(),s[i]))a.pop();</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag||!a.empty())<span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-子段乘积"><a href="#C-子段乘积" class="headerlink" title="C. 子段乘积"></a>C. 子段乘积</h2><p>线段树暴过。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">998244353</span>;</span><br><span class="line"> </span><br><span class="line">LL a[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Segment_Tree&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        LL mul;</span><br><span class="line">    &#125;t[maxn*<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k1)</span></span>&#123;</span><br><span class="line">        t[k1].mul=(t[k1&lt;&lt;<span class="number">1</span>].mul*t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mul)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        t[k1].l=l;t[k1].r=r;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">            t[k1].mul=a[l];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        build(k1&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">        build(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        update(k1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&gt;t[k1].r||R&lt;t[k1].l)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=t[k1].l&amp;&amp;R&gt;=t[k1].r)&#123;</span><br><span class="line">            <span class="keyword">return</span> t[k1].mul;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (query(k1&lt;&lt;<span class="number">1</span>,L,R)*query(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R))%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Segment_Tree;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    LL MAX=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;=n;i++)&#123;</span><br><span class="line">        MAX=max(MAX,query(<span class="number">1</span>,i-k+<span class="number">1</span>,i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,MAX);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-子段异或"><a href="#D-子段异或" class="headerlink" title="D. 子段异或"></a>D. 子段异或</h2><p>若xorsum[i]=xorsum[j]，则a[i+1] ^ … ^ a[j]==0。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn],xorsum[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        xorsum[i]=xorsum[i<span class="number">-1</span>]^a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(xorsum,xorsum+n+<span class="number">1</span>);</span><br><span class="line">    LL cnt=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xorsum[i]==xorsum[i<span class="number">-1</span>])cnt++;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans+=cnt*(cnt<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">            cnt=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=cnt*(cnt<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="E-最小表达式"><a href="#E-最小表达式" class="headerlink" title="E. 最小表达式"></a>E. 最小表达式</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Big_Integer&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BigInteger</span>&#123;</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> base=<span class="number">100000000</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> width=<span class="number">8</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;s;</span><br><span class="line">        BigInteger(<span class="keyword">long</span> <span class="keyword">long</span> num=<span class="number">0</span>)&#123;*<span class="keyword">this</span>=num;&#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> = (<span class="keyword">long</span> <span class="keyword">long</span> num)&#123;</span><br><span class="line">            s.clear();</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                s.push_back(num%base);</span><br><span class="line">                num/=base;</span><br><span class="line">            &#125;<span class="keyword">while</span>(num);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> = (<span class="keyword">const</span> <span class="built_in">string</span> &amp;str)&#123;</span><br><span class="line">            s.clear();</span><br><span class="line">            <span class="keyword">int</span> x,len=(str.length()<span class="number">-1</span>)/width+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> end=str.length()-i*width;</span><br><span class="line">                <span class="keyword">int</span> start=max(<span class="number">0</span>,end-width);</span><br><span class="line">                <span class="built_in">sscanf</span>(str.substr(start,end-start).c_str(),<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">                s.push_back(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> + (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">            BigInteger c;</span><br><span class="line">            c.s.clear();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>,g=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(g==<span class="number">0</span>&amp;&amp;i&gt;=s.size()&amp;&amp;i&gt;=b.s.size())<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;s.size())g+=s[i];</span><br><span class="line">                <span class="keyword">if</span>(i&lt;b.s.size())g+=b.s[i];</span><br><span class="line">                c.s.push_back(g%base);</span><br><span class="line">                g/=base;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> - (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">            BigInteger c;</span><br><span class="line">            c.s.clear();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>,g=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;=s.size())<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;=b.s.size())&#123;</span><br><span class="line">                    c.s.push_back(s[i]+g);</span><br><span class="line">                    g=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(s[i]&lt;b.s[i])&#123;</span><br><span class="line">                        c.s.push_back(s[i]-b.s[i]+base+g);</span><br><span class="line">                        g=<span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        c.s.push_back(s[i]-b.s[i]+g);</span><br><span class="line">                        g=<span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> * (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">            BigInteger c;</span><br><span class="line">            c.s.clear();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size()+b.s.size();i++)c.s.push_back(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b.s.size();j++)&#123;</span><br><span class="line">                c.s[i+j]+=s[i]*b.s[j];</span><br><span class="line">              &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.s.size()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">                c.s[i+<span class="number">1</span>]+=c.s[i]/base;</span><br><span class="line">                c.s[i]=c.s[i]%base;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(c.s.back()==<span class="number">0</span>&amp;&amp;c.s.size()&gt;<span class="number">1</span>)c.s.erase(c.s.end()<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">            BigInteger c;</span><br><span class="line">            c.s.clear();c.s.resize(s.size());</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                res*=base;</span><br><span class="line">                res+=s[i];</span><br><span class="line">                c.s[i]=res/b;</span><br><span class="line">                res%=b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(c.s.back()==<span class="number">0</span>&amp;&amp;c.s.size()&gt;<span class="number">1</span>)c.s.erase(c.s.end()<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> % (<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">            BigInteger c;</span><br><span class="line">            c.s.clear();c.s.resize(s.size());</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                res*=base;</span><br><span class="line">                res+=s[i];</span><br><span class="line">                c.s[i]=res/b;</span><br><span class="line">                res%=b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(c.s.back()==<span class="number">0</span>&amp;&amp;c.s.size()&gt;<span class="number">1</span>)c.s.erase(c.s.end()<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">return</span> (BigInteger)res;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> += (<span class="keyword">const</span> BigInteger &amp;b)&#123;</span><br><span class="line">            *<span class="keyword">this</span>=*<span class="keyword">this</span>+b;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> -= (<span class="keyword">const</span> BigInteger &amp;b)&#123;</span><br><span class="line">            *<span class="keyword">this</span>=*<span class="keyword">this</span>-b;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> *= (<span class="keyword">const</span> BigInteger &amp;b)&#123;</span><br><span class="line">            *<span class="keyword">this</span>=*<span class="keyword">this</span>*b;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> /= (<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)&#123;</span><br><span class="line">            *<span class="keyword">this</span>=*<span class="keyword">this</span>/b;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigInteger <span class="keyword">operator</span> %= (<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)&#123;</span><br><span class="line">            *<span class="keyword">this</span>=*<span class="keyword">this</span>%b;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.size()!=b.s.size())<span class="keyword">return</span> s.size()&lt;b.s.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i]!=b.s[i])<span class="keyword">return</span> s[i]&lt;b.s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;<span class="keyword">return</span> b &lt; *<span class="keyword">this</span>;&#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;<span class="keyword">return</span> !(*<span class="keyword">this</span>&gt;b);&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream &amp;out,<span class="keyword">const</span> BigInteger &amp;x)&#123;</span><br><span class="line">        out&lt;&lt;x.s.back();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x.s.size()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">char</span> buf[<span class="number">20</span>];</span><br><span class="line">            <span class="built_in">sprintf</span>(buf,<span class="string">"%08lld"</span>,x.s[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">strlen</span>(buf);j++)out&lt;&lt;buf[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream &amp;in,BigInteger &amp;x)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">if</span>(!(in&gt;&gt;s))<span class="keyword">return</span> in;</span><br><span class="line">        x=s;</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Big_Integer;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">string</span> ans[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> c[maxn];</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> n=s.length();</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'+'</span>)cnt++;</span><br><span class="line">        <span class="keyword">else</span> c[++num]=s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(c+<span class="number">1</span>,c+num+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> tmp=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(tmp&lt;=num)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">            ans[i]+=c[tmp++];</span><br><span class="line">            <span class="keyword">if</span>(tmp&gt;num)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    BigInteger aans,ttmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)aans+=(ttmp=ans[i]);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;aans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="F-树上博弈"><a href="#F-树上博弈" class="headerlink" title="F. 树上博弈"></a>F. 树上博弈</h2><p>找树上距离为正偶数的点对数量即可。用的树形dp，但实际上只计算出深度为偶数和深度为奇数的点的数量就行。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> nume=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> last[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[++nume]=(Edge)&#123;u,v,last[u]&#125;;</span><br><span class="line">    last[u]=nume;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line">LL dp[maxn][<span class="number">2</span>],ans=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    dp[u][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        dfs(v);</span><br><span class="line">        dp[u][<span class="number">0</span>]+=dp[v][<span class="number">1</span>];</span><br><span class="line">        dp[u][<span class="number">1</span>]+=dp[v][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=(dp[u][<span class="number">0</span>]<span class="number">-1</span>)*<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">        ans+=dp[v][<span class="number">1</span>]*(dp[u][<span class="number">0</span>]<span class="number">-1</span>-dp[v][<span class="number">1</span>]);</span><br><span class="line">        ans+=dp[v][<span class="number">0</span>]*(dp[u][<span class="number">1</span>]-dp[v][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;f[i]);</span><br><span class="line">        add_edge(f[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="坐火车"><a href="#坐火车" class="headerlink" title="坐火车"></a>坐火车</h2><p>线段树被卡常了，改用的树状数组。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Fast_IO&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">int</span> flag=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">        <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">-1</span>;<span class="keyword">if</span>(ch==EOF)<span class="keyword">return</span> <span class="number">0</span>;ch=getchar();&#125;</span><br><span class="line">        <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">        <span class="keyword">return</span> x*=flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Fast_IO;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> l[maxn],r[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Segment_Tree&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        LL sum;</span><br><span class="line">    &#125;t[maxn*<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k1)</span></span>&#123;</span><br><span class="line">        t[k1].sum=t[k1&lt;&lt;<span class="number">1</span>].sum+t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        t[k1].l=l;t[k1].r=r;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">            t[k1].sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        build(k1&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">        build(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        update(k1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change_point</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> pos,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos&gt;t[k1].r||pos&lt;t[k1].l)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(t[k1].r==t[k1].l)&#123;</span><br><span class="line">            t[k1].sum+=k;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        change_point(k1&lt;&lt;<span class="number">1</span>,pos,k);</span><br><span class="line">        change_point(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos,k);</span><br><span class="line">        update(k1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&gt;t[k1].r||R&lt;t[k1].l)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=t[k1].l&amp;&amp;R&gt;=t[k1].r)&#123;</span><br><span class="line">            <span class="keyword">return</span> t[k1].sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> query(k1&lt;&lt;<span class="number">1</span>,L,R)+query(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Segment_Tree;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Binary_Indexed_Tree&#123;</span><br><span class="line">    LL c[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(;x&lt;maxn;x+=x&amp;-x)c[x]+=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        LL res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;x;x-=x&amp;-x)res+=c[x];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(;x&lt;maxn;x+=x&amp;-x)c[x]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Binary_Indexed_Tree;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> col,l,r;</span><br><span class="line">&#125;d[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    read(n);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        read(d[i].col);</span><br><span class="line">        read(d[i].l);</span><br><span class="line">        read(d[i].r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)r[d[i].col]++;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;<span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"0 "</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)&#123;</span><br><span class="line">        Change(d[i].col,-l[d[i].col]);</span><br><span class="line"><span class="comment">//        change_point(1,d[i].col,-l[d[i].col]);</span></span><br><span class="line">        l[d[i<span class="number">-1</span>].col]++;</span><br><span class="line">        r[d[i].col]--;</span><br><span class="line"><span class="comment">//        change_point(1,d[i-1].col,r[d[i-1].col]);</span></span><br><span class="line">        Change(d[i<span class="number">-1</span>].col,r[d[i<span class="number">-1</span>].col]);</span><br><span class="line"><span class="comment">//        printf("%lld ",query(1,d[i].l,d[i].r));</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld "</span>,Query(d[i].r)-Query(d[i].l<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>nowcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #618 (Div. 2)</title>
    <url>/2020/02/11/Codeforces-Round-618-Div-2/</url>
    <content><![CDATA[<h2 id="A-Non-zero"><a href="#A-Non-zero" class="headerlink" title="A. Non-zero"></a>A. Non-zero</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">			<span class="keyword">if</span>(a[i]==<span class="number">0</span>)cnt++;</span><br><span class="line">			sum+=a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		sum+=cnt;</span><br><span class="line">		ans+=cnt;</span><br><span class="line">		<span class="keyword">if</span>(sum==<span class="number">0</span>)ans++;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="B-Assigning-to-Classes"><a href="#B-Assigning-to-Classes" class="headerlink" title="B. Assigning to Classes"></a>B. Assigning to Classes</h2><p>考虑最终作中位数的两位同学。排序后，第i($ i\leq n $​)位同学的可行配对区间为[n+1,n+i]，显然第n+1位同学为前n位同学的最佳配对结果。[n+1,2*n]同理。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		sort(a+<span class="number">1</span>,a+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">int</span> ans=INF;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)ans=min(ans,a[n+<span class="number">1</span>]-a[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++)ans=min(ans,a[i]-a[n]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-Anu-Has-a-Function"><a href="#C-Anu-Has-a-Function" class="headerlink" title="C. Anu Has a Function"></a>C. Anu Has a Function</h2><p>执行f函数的过程实际上是把a[1]的一部分二进制位从1变为0的过程。如果在a[1~n]中，仅有a[i]的第k位为1，我们称k是a[i]独一无二的二进制位。对于a[1]独一无二的二进制位不会在f过程中被变0。按照每个a[i]仅保留独一无二二进制位后的结果排序便是答案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> v,cntt;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Data &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cntt&gt;b.cntt;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d[i].v);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=d[i].v;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;j)&amp;d[i].v)cnt[j]++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=d[i].v;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;j)&amp;d[i].v)&#123;</span><br><span class="line">				<span class="keyword">if</span>(cnt[j]==<span class="number">1</span>)&#123;</span><br><span class="line">					d[i].cntt+=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(d+<span class="number">1</span>,d+n+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,d[i].v);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-Aerodynamic"><a href="#D-Aerodynamic" class="headerlink" title="D. Aerodynamic"></a>D. Aerodynamic</h2><p>检验是否中心对称即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;<span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps)<span class="keyword">return</span> <span class="number">0</span>;<span class="keyword">return</span> x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">	<span class="keyword">double</span> x,y;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">	<span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Point MID;</span><br><span class="line">	MID.x=(p[<span class="number">1</span>].x+p[<span class="number">1</span>+n/<span class="number">2</span>].x)/<span class="number">2</span>;</span><br><span class="line">	MID.y=(p[<span class="number">1</span>].y+p[<span class="number">1</span>+n/<span class="number">2</span>].y)/<span class="number">2</span>; </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(dcmp((p[i].x+p[i+n/<span class="number">2</span>].x)/<span class="number">2</span>-MID.x)!=<span class="number">0</span>||dcmp((p[i].y+p[i+n/<span class="number">2</span>].y)/<span class="number">2</span>-MID.y)!=<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder Beginner Contest 154</title>
    <url>/2020/02/11/AtCoder-Beginner-Contest-154/</url>
    <content><![CDATA[<h2 id="A-Remaining-Balls"><a href="#A-Remaining-Balls" class="headerlink" title="A.Remaining Balls"></a>A.Remaining Balls</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> A,B,C;</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;A&gt;&gt;B&gt;&gt;a&gt;&gt;b&gt;&gt;C;</span><br><span class="line">	<span class="keyword">if</span>(A==C)a--;</span><br><span class="line">	<span class="keyword">else</span> b--;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,a,b);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="B-I-miss-you…"><a href="#B-I-miss-you…" class="headerlink" title="B.I miss you…"></a>B.I miss you…</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	<span class="keyword">int</span> n=s.length();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">putchar</span>(<span class="string">'x'</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-Distinct-or-Not"><a href="#C-Distinct-or-Not" class="headerlink" title="C.Distinct or Not"></a>C.Distinct or Not</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; vis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">		<span class="keyword">if</span>(vis.count(x))flag=<span class="number">1</span>;</span><br><span class="line">		vis[x]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!flag)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-Dice-in-Line"><a href="#D-Dice-in-Line" class="headerlink" title="D.Dice in Line"></a>D.Dice in Line</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,k;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> MAX=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;=n;i++)&#123;</span><br><span class="line">		MAX=max(MAX,sum[i]-sum[i-k]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,(MAX+k)/<span class="number">2.0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="E-Almost-Everywhere-Zero"><a href="#E-Almost-Everywhere-Zero" class="headerlink" title="E.Almost Everywhere Zero"></a>E.Almost Everywhere Zero</h2><p>数位dp。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line">LL C[maxn][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="built_in">string</span> s,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k==<span class="number">0</span>||s.length()==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> n=s.length(),t=s[<span class="number">0</span>]-<span class="string">'0'</span>;</span><br><span class="line">	<span class="keyword">if</span>(t==<span class="number">0</span>)<span class="keyword">return</span> dfs(s.substr(<span class="number">1</span>),k);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> C[n<span class="number">-1</span>][k]*<span class="built_in">pow</span>(<span class="number">9</span>,k)+(t<span class="number">-1</span>)*C[n<span class="number">-1</span>][k<span class="number">-1</span>]*<span class="built_in">pow</span>(<span class="number">9</span>,k<span class="number">-1</span>)+dfs(s.substr(<span class="number">1</span>),k<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;k;</span><br><span class="line">	<span class="keyword">int</span> n=s.length();</span><br><span class="line">	C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i&amp;&amp;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">			C[i][j]=C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i]!=<span class="string">'0'</span>)cnt++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(cnt&gt;=k)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dfs(s,k)+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dfs(s,k));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>atcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>2020牛客寒假算法基础集训营3</title>
    <url>/2020/02/11/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A53/</url>
    <content><![CDATA[<h2 id="A-牛牛的DRB迷宫I"><a href="#A-牛牛的DRB迷宫I" class="headerlink" title="A.牛牛的DRB迷宫I"></a>A.牛牛的DRB迷宫I</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">55</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i][j]==<span class="string">'R'</span>&amp;&amp;j&lt;m<span class="number">-1</span>)&#123;</span><br><span class="line">				dp[i][j+<span class="number">1</span>]=(dp[i][j+<span class="number">1</span>]+dp[i][j])%MOD;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(s[i][j]==<span class="string">'D'</span>&amp;&amp;i&lt;n<span class="number">-1</span>)&#123;</span><br><span class="line">				dp[i+<span class="number">1</span>][j]=(dp[i+<span class="number">1</span>][j]+dp[i][j])%MOD;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(s[i][j]==<span class="string">'B'</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(j&lt;m<span class="number">-1</span>)dp[i][j+<span class="number">1</span>]=(dp[i][j+<span class="number">1</span>]+dp[i][j])%MOD;</span><br><span class="line">				<span class="keyword">if</span>(i&lt;n<span class="number">-1</span>)dp[i+<span class="number">1</span>][j]=(dp[i+<span class="number">1</span>][j]+dp[i][j])%MOD;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n<span class="number">-1</span>][m<span class="number">-1</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="C-牛牛的数组越位"><a href="#C-牛牛的数组越位" class="headerlink" title="C.牛牛的数组越位"></a>C.牛牛的数组越位</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T,n,m,p,x,y,val;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;p);</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">0</span>,flagg=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;val);</span><br><span class="line">			<span class="keyword">int</span> tmp=x*m+y;</span><br><span class="line">			<span class="keyword">if</span>(tmp&lt;<span class="number">0</span>||tmp&gt;=m*n)&#123;</span><br><span class="line">                flagg=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> xx=tmp/m;</span><br><span class="line">            <span class="keyword">int</span> yy=tmp-(xx*m);</span><br><span class="line">			<span class="keyword">if</span>(x&gt;=<span class="number">0</span>&amp;&amp;x&lt;n&amp;&amp;y&gt;=<span class="number">0</span>&amp;&amp;y&lt;m)a[x][y]=val;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(xx&gt;=<span class="number">0</span>&amp;&amp;xx&lt;n&amp;&amp;yy&gt;=<span class="number">0</span>&amp;&amp;yy&lt;m)&#123;</span><br><span class="line">				flag=<span class="number">1</span>;</span><br><span class="line">				a[xx][yy]=val;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flagg)<span class="built_in">puts</span>(<span class="string">"Runtime error"</span>);</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m<span class="number">-1</span>;j++)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i][j]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[i][m<span class="number">-1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"Undefined Behaviour"</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Accepted"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-牛牛与二叉树的数组存储"><a href="#D-牛牛与二叉树的数组存储" class="headerlink" title="D.牛牛与二叉树的数组存储"></a>D.牛牛与二叉树的数组存储</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">4e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],pos[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(a,<span class="number">-1</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">int</span> MAX=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		MAX=max(MAX,a[i]);</span><br><span class="line">		<span class="keyword">if</span>(a[i]!=<span class="number">-1</span>)pos[a[i]]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"The size of the tree is %d\n"</span>,MAX);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Node %d is the root node of the tree\n"</span>,a[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;MAX;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"The father of node %d is %d, the left child is %d, and the right child is %d\n"</span>,i,a[pos[i]/<span class="number">2</span>],a[pos[i]*<span class="number">2</span>],a[pos[i]*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The father of node %d is %d, the left child is %d, and the right child is %d\n"</span>,MAX,a[pos[MAX]/<span class="number">2</span>],a[pos[MAX]*<span class="number">2</span>],a[pos[MAX]*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="F-牛牛的Link-Power-I"><a href="#F-牛牛的Link-Power-I" class="headerlink" title="F.牛牛的Link Power I"></a>F.牛牛的Link Power I</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;a[i]);</span><br><span class="line">	<span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">	LL dis=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="number">1</span>)r++,dis+=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		dis-=r;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="number">1</span>)&#123;</span><br><span class="line">			ans=(ans+dis)%MOD;</span><br><span class="line">			r--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="G-牛牛的Link-Power-II"><a href="#G-牛牛的Link-Power-II" class="headerlink" title="G.牛牛的Link Power II"></a>G.牛牛的Link Power II</h2><p>线段树维护一下区间内所有1到区间左/右端距离和。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> LL maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Segment_Tree&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	    LL l,r,ldis,rdis,cnt;</span><br><span class="line">	&#125;t[maxn*<span class="number">4</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(LL k1)</span></span>&#123;</span><br><span class="line">		t[k1].cnt=t[k1&lt;&lt;<span class="number">1</span>].cnt+t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cnt;</span><br><span class="line">		t[k1].ldis=t[k1&lt;&lt;<span class="number">1</span>].ldis+t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].ldis+t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cnt*(t[k1&lt;&lt;<span class="number">1</span>].r-t[k1&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">		t[k1].rdis=t[k1&lt;&lt;<span class="number">1</span>].rdis+t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rdis+t[k1&lt;&lt;<span class="number">1</span>].cnt*(t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(LL k1,LL l,LL r)</span></span>&#123;</span><br><span class="line">    	t[k1].l=l;t[k1].r=r;</span><br><span class="line">    	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">    	    t[k1].cnt=(a[l]==<span class="number">1</span>);</span><br><span class="line">    	    <span class="keyword">if</span>(t[k1].cnt)t[k1].ldis=t[k1].rdis=<span class="number">1</span>;</span><br><span class="line">    	    <span class="keyword">return</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	LL mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    	build(k1&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    	build(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">   		update(k1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_point</span><span class="params">(LL k1,LL pos,LL k)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(pos&gt;t[k1].r||pos&lt;t[k1].l)<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span>(t[k1].r==t[k1].l)&#123;</span><br><span class="line">    		t[k1].cnt=k;</span><br><span class="line">    		<span class="keyword">if</span>(t[k1].cnt)t[k1].ldis=t[k1].rdis=<span class="number">1</span>;</span><br><span class="line">    	    <span class="keyword">else</span> t[k1].ldis=t[k1].rdis=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	change_point(k1&lt;&lt;<span class="number">1</span>,pos,k);</span><br><span class="line">    	change_point(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos,k);</span><br><span class="line">    	update(k1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">queryl</span><span class="params">(LL k1,LL L,LL R)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(L&gt;t[k1].r||R&lt;t[k1].l||L&gt;R)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">if</span>(L&lt;=t[k1].l&amp;&amp;R&gt;=t[k1].r)&#123;</span><br><span class="line"><span class="comment">//    		printf("   [%d,%d]=%d\n ",t[k1].l,t[k1].r,t[k1].rdis+t[k1].cnt*(R-t[k1].r));</span></span><br><span class="line">    	    <span class="keyword">return</span> t[k1].rdis+t[k1].cnt*(R-t[k1].r);</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> queryl(k1&lt;&lt;<span class="number">1</span>,L,R)+queryl(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">queryr</span><span class="params">(LL k1,LL L,LL R)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(L&gt;t[k1].r||R&lt;t[k1].l||L&gt;R)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">if</span>(L&lt;=t[k1].l&amp;&amp;R&gt;=t[k1].r)&#123;</span><br><span class="line">    	    <span class="keyword">return</span> t[k1].ldis+t[k1].cnt*(t[k1].l-L);</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> queryr(k1&lt;&lt;<span class="number">1</span>,L,R)+queryr(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Segment_Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	LL n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;a[i]);</span><br><span class="line">	build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	LL r=<span class="number">0</span>;</span><br><span class="line">	LL dis=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="number">1</span>)r++,dis+=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		dis-=r;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="number">1</span>)&#123;</span><br><span class="line">			ans=(ans+dis)%MOD;</span><br><span class="line">			r--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;m);</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		LL q,pos;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;q,&amp;pos);</span><br><span class="line">		<span class="keyword">if</span>(q==<span class="number">1</span>)&#123;</span><br><span class="line">			a[pos]=<span class="number">1</span>;</span><br><span class="line">			ans+=(queryl(<span class="number">1</span>,<span class="number">1</span>,pos<span class="number">-1</span>)+queryr(<span class="number">1</span>,pos+<span class="number">1</span>,n));</span><br><span class="line">			ans%=MOD;</span><br><span class="line">            change_point(<span class="number">1</span>,pos,<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			a[pos]=<span class="number">0</span>;</span><br><span class="line">			ans-=(queryl(<span class="number">1</span>,<span class="number">1</span>,pos<span class="number">-1</span>)+queryr(<span class="number">1</span>,pos+<span class="number">1</span>,n));</span><br><span class="line">			ans=(ans%MOD+MOD)%MOD;</span><br><span class="line">            change_point(<span class="number">1</span>,pos,<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		putchar('s');</span></span><br><span class="line"><span class="comment">//		for(LL i=1;i&lt;=n;i++)printf("%d ",a[i]);</span></span><br><span class="line"><span class="comment">//		puts("");</span></span><br><span class="line"><span class="comment">//		for(LL i=1;i&lt;=2*n;i++)printf("[%d,%d] ld=%d rd=%d cnt=%d\n",t[i].l,t[i].r,t[i].ldis,t[i].rdis,t[i].cnt);</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="H-牛牛的k合因子数"><a href="#H-牛牛的k合因子数" class="headerlink" title="H.牛牛的k合因子数"></a>H.牛牛的k合因子数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Sieve_of_Euler&#123;</span><br><span class="line">	<span class="keyword">int</span> nump=<span class="number">0</span>,prime[maxn];</span><br><span class="line">	<span class="keyword">bool</span> is_prime[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">memset</span>(is_prime,<span class="number">1</span>,<span class="keyword">sizeof</span>(is_prime));</span><br><span class="line">		is_prime[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(is_prime[i])prime[++nump]=i;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=nump&amp;&amp;prime[j]*i&lt;maxn;j++)&#123;</span><br><span class="line">				is_prime[i*prime[j]]=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Sieve_of_Euler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	do_main();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j*j&lt;=i;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i%j==<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(!is_prime[j])cnt++;</span><br><span class="line">				<span class="keyword">if</span>(j*j!=i&amp;&amp;!is_prime[i/j])cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans[cnt]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		<span class="keyword">int</span> k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[k]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="I-牛牛的汉诺塔"><a href="#I-牛牛的汉诺塔" class="headerlink" title="I.牛牛的汉诺塔"></a>I.牛牛的汉诺塔</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">66</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">LL f[maxn][<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		f[n][<span class="number">1</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(n<span class="number">-1</span>);</span><br><span class="line">	f[n][<span class="number">1</span>][<span class="number">2</span>]+=f[n<span class="number">-1</span>][<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">	f[n][<span class="number">1</span>][<span class="number">3</span>]+=f[n<span class="number">-1</span>][<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">	f[n][<span class="number">2</span>][<span class="number">1</span>]+=f[n<span class="number">-1</span>][<span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line">	f[n][<span class="number">2</span>][<span class="number">3</span>]+=f[n<span class="number">-1</span>][<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">	f[n][<span class="number">3</span>][<span class="number">1</span>]+=f[n<span class="number">-1</span>][<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line">	f[n][<span class="number">3</span>][<span class="number">2</span>]+=f[n<span class="number">-1</span>][<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">	f[n][<span class="number">1</span>][<span class="number">3</span>]++;</span><br><span class="line">	f[n][<span class="number">1</span>][<span class="number">2</span>]+=f[n<span class="number">-1</span>][<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line">	f[n][<span class="number">1</span>][<span class="number">3</span>]+=f[n<span class="number">-1</span>][<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">	f[n][<span class="number">2</span>][<span class="number">1</span>]+=f[n<span class="number">-1</span>][<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">	f[n][<span class="number">2</span>][<span class="number">3</span>]+=f[n<span class="number">-1</span>][<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">	f[n][<span class="number">3</span>][<span class="number">1</span>]+=f[n<span class="number">-1</span>][<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">	f[n][<span class="number">3</span>][<span class="number">2</span>]+=f[n<span class="number">-1</span>][<span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    dfs(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"A-&gt;B:%lld\n"</span>,f[n][<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"A-&gt;C:%lld\n"</span>,f[n][<span class="number">1</span>][<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"B-&gt;A:%lld\n"</span>,f[n][<span class="number">2</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"B-&gt;C:%lld\n"</span>,f[n][<span class="number">2</span>][<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"C-&gt;A:%lld\n"</span>,f[n][<span class="number">3</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"C-&gt;B:%lld\n"</span>,f[n][<span class="number">3</span>][<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"SUM:%lld\n"</span>,f[n][<span class="number">1</span>][<span class="number">2</span>]+f[n][<span class="number">1</span>][<span class="number">3</span>]+f[n][<span class="number">2</span>][<span class="number">1</span>]+f[n][<span class="number">2</span>][<span class="number">3</span>]+f[n][<span class="number">3</span>][<span class="number">1</span>]+f[n][<span class="number">3</span>][<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>nowcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>2020牛客寒假算法基础集训营2</title>
    <url>/2020/02/11/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A52/</url>
    <content><![CDATA[<p>打比赛打到一半被表妹拽去剪纸做正方体ww，小学生假期还有作业也太惨了吧（大学真好</p>
<h2 id="A-做游戏"><a href="#A-做游戏" class="headerlink" title="A.做游戏"></a>A.做游戏</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,c,x,y,z;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>,&amp;a,&amp;b,&amp;c,&amp;x,&amp;y,&amp;z);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="number">1L</span>L*min(a,y)+min(b,z)+min(c,x));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="B-排数字"><a href="#B-排数字" class="headerlink" title="B.排数字"></a>B.排数字</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	<span class="keyword">int</span> cnt1=<span class="number">0</span>,cnt6=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i]==<span class="string">'1'</span>)cnt1++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'6'</span>)cnt6++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min(cnt1,cnt6<span class="number">-1</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-算概率"><a href="#C-算概率" class="headerlink" title="C.算概率"></a>C.算概率</h2><p>dp[i][j]表示前i题做对j题的概率。</p>
<p>dp[i][j]=dp[i-1][j]<em>(1-p[i])+dp[i-1][j-1]</em>p[i]</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">LL p[maxn],dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;p[i]);</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		dp[i][<span class="number">0</span>]=dp[i<span class="number">-1</span>][<span class="number">0</span>]*(MOD+<span class="number">1</span>-p[i])%MOD;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			dp[i][j]=(dp[i<span class="number">-1</span>][j]*(MOD+<span class="number">1</span>-p[i])+dp[i<span class="number">-1</span>][j<span class="number">-1</span>]*p[i])%MOD;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,dp[n][i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-数三角"><a href="#D-数三角" class="headerlink" title="D.数三角"></a>D.数三角</h2><p>先给一开始想到极角排序后用双指针的自己一嘴巴子（啪</p>
<p>钝角三角形$a^2+b^2&lt;c^2$，时间复杂度虽不如上述方法优但也足够了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-12</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Len2</span><span class="params">(Vector a)</span></span>&#123;<span class="keyword">return</span> a.x*a.x+a.y*a.y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">				Vector a=(Vector)&#123;p[j].x-p[i].x,p[j].y-p[i].y&#125;,b=(Vector)&#123;p[k].x-p[i].x,p[k].y-p[i].y&#125;,c=(Vector)&#123;p[k].x-p[j].x,p[k].y-p[j].y&#125;;</span><br><span class="line">				<span class="keyword">if</span>(a.x*b.y-a.y*b.x==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">int</span> lena2=Len2(a),lenb2=Len2(b),lenc2=Len2(c);</span><br><span class="line">				<span class="keyword">if</span>(lenc2&lt;lena2)swap(lena2,lenc2);</span><br><span class="line">				<span class="keyword">if</span>(lenc2&lt;lenb2)swap(lenb2,lenc2);</span><br><span class="line">				<span class="keyword">if</span>(lena2+lenb2&lt;lenc2)cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="E-做计数"><a href="#E-做计数" class="headerlink" title="E.做计数"></a>E.做计数</h2><p>两边平方并移项，$2\sqrt{ij}=k-(i+j)$，令$\sqrt{ij}$为整数即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	LL n,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(LL i=<span class="number">1</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(LL j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i*i%j==<span class="number">0</span>)ans+=<span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ans++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="F-拿物品"><a href="#F-拿物品" class="headerlink" title="F.拿物品"></a>F.拿物品</h2><p>按照a+b排序，按顺序拿。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> a,b,pos;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Data &amp;c)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a+b&gt;c.a+c.b;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i].a);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i].b);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)p[i].pos=i;</span><br><span class="line">	sort(p+<span class="number">1</span>,p+n+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"%d "</span>,p[i].pos);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i+=<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"%d "</span>,p[i].pos);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="G-判正误"><a href="#G-判正误" class="headerlink" title="G.判正误"></a>G.判正误</h2><p>哈希思想。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Quick_Pow&#123;</span><br><span class="line">	<span class="function">LL <span class="title">do_main</span><span class="params">(LL a,<span class="keyword">int</span> k,<span class="keyword">int</span> MOD)</span></span>&#123;</span><br><span class="line">    	LL r=<span class="number">1</span>,base=a;</span><br><span class="line">		<span class="keyword">while</span>(k)&#123;</span><br><span class="line">        	<span class="keyword">if</span>(k&amp;<span class="number">1</span>)r=r*base%MOD;</span><br><span class="line">        	base=base*base%MOD;</span><br><span class="line">        	k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Quick_Pow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		LL a,b,c,g;</span><br><span class="line">		<span class="keyword">int</span> d,e,f;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%d%d%d%lld"</span>,&amp;a,&amp;b,&amp;c,&amp;d,&amp;e,&amp;f,&amp;g);</span><br><span class="line">		<span class="keyword">int</span> MOD1=<span class="number">1e9</span>+<span class="number">7</span>,MOD2=<span class="number">2020020601</span>;</span><br><span class="line">		LL ans1=do_main(a,d,MOD1),ans2=do_main(b,e,MOD1),ans3=do_main(c,f,MOD1);</span><br><span class="line">		LL ans4=do_main(a,d,MOD2),ans5=do_main(b,e,MOD2),ans6=do_main(c,f,MOD2);</span><br><span class="line">		<span class="keyword">if</span>(ans1+ans2+ans3==g&amp;&amp;ans4+ans5+ans6==g)<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="H-施魔法"><a href="#H-施魔法" class="headerlink" title="H.施魔法"></a>H.施魔法</h2><p>dp，维护前缀dp[i-1]-a[i]最小值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL INF=(<span class="number">1L</span>L&lt;&lt;<span class="number">60</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">300005</span>;</span><br><span class="line"></span><br><span class="line">LL dp[maxn],a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    LL MIN=INF;</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;k)dp[i]=INF;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(MIN&gt;dp[i-k]-a[i-k+<span class="number">1</span>])MIN=dp[i-k]-a[i-k+<span class="number">1</span>];</span><br><span class="line">            dp[i]=MIN+a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="I-建通道"><a href="#I-建通道" class="headerlink" title="I.建通道"></a>I.建通道</h2><p>重复元素可以0代价联通，先去重，找出既有0又有1的最低二进制位k，答案就是(1&lt;&lt;k)*(去重后元素个数-1)。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> m=unique(a+<span class="number">1</span>,a+n+<span class="number">1</span>)-a<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;<span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> orsum=<span class="number">0</span>,andsum=<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)orsum|=a[i],andsum&amp;=a[i];</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(((<span class="number">1</span>&lt;&lt;k)&amp;orsum)==<span class="number">0</span>||(<span class="number">1</span>&lt;&lt;k)&amp;andsum)k++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(<span class="number">1L</span>L&lt;&lt;k)*(m<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>nowcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>2020牛客寒假算法基础集训营1</title>
    <url>/2020/02/11/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A51/</url>
    <content><![CDATA[<h2 id="A-honoka和格点三角形"><a href="#A-honoka和格点三角形" class="headerlink" title="A.honoka和格点三角形"></a>A.honoka和格点三角形</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">if</span>((n==<span class="number">2</span>&amp;&amp;m==<span class="number">2</span>)||n==<span class="number">1</span>||m==<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(<span class="number">1L</span>L*(n<span class="number">-1</span>)*(n<span class="number">-2</span>)%MOD*(m<span class="number">-2</span>)%MOD*<span class="number">2</span>%MOD+<span class="number">1L</span>L*(n<span class="number">-2</span>)*(n<span class="number">-2</span>)%MOD*(m<span class="number">-1</span>)%MOD*<span class="number">2</span>%MOD+<span class="number">1L</span>L*(m<span class="number">-1</span>)*m%MOD*(n<span class="number">-2</span>)%MOD*<span class="number">2</span>%MOD+<span class="number">1L</span>L*(m<span class="number">-2</span>)*m%MOD*(n<span class="number">-1</span>)%MOD*<span class="number">2</span>%MOD)%MOD);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="B-kotori和bangdream"><a href="#B-kotori和bangdream" class="headerlink" title="B.kotori和bangdream"></a>B.kotori和bangdream</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,x,a,b;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;x,&amp;a,&amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,n*<span class="number">0.01</span>*x*a+n*<span class="number">0.01</span>*(<span class="number">100</span>-x)*b);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-umi和弓道"><a href="#C-umi和弓道" class="headerlink" title="C.umi和弓道"></a>C.umi和弓道</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> LL INF=<span class="number">100000000000000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; v;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">culx</span><span class="params">(Point x,Point y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.x==y.x)<span class="keyword">return</span> x.x;</span><br><span class="line">    <span class="keyword">double</span> k=(y.y-x.y)/(y.x-x.x);</span><br><span class="line">    <span class="keyword">return</span> x.x-x.y/k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">culy</span><span class="params">(Point x,Point y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.y==y.y)<span class="keyword">return</span> x.y;</span><br><span class="line">    <span class="keyword">double</span> k=(y.x-x.x)/(y.y-x.y);</span><br><span class="line">    <span class="keyword">return</span> x.y-x.x/k;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[<span class="number">0</span>].x,&amp;p[<span class="number">0</span>].y);</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">    <span class="keyword">double</span> ans=INF;</span><br><span class="line">    v.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i].y*p[<span class="number">0</span>].y&lt;<span class="number">0</span>)v.push_back(culx(p[i],p[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.begin(),v.begin()+v.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+n-k<span class="number">-1</span>&lt;v.size();i++)&#123;</span><br><span class="line">        ans=min(ans,v[i+n-k<span class="number">-1</span>]-v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    v.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i].x*p[<span class="number">0</span>].x&lt;<span class="number">0</span>)v.push_back(culy(p[i],p[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.begin(),v.begin()+v.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+n-k<span class="number">-1</span>&lt;v.size();i++)&#123;</span><br><span class="line">        ans=min(ans,v[i+n-k<span class="number">-1</span>]-v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans==INF)<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-hanayo和米饭"><a href="#D-hanayo和米饭" class="headerlink" title="D.hanayo和米饭"></a>D.hanayo和米饭</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,ans;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]),vis[a[i]]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!vis[i])ans=i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-rin和快速迭代"><a href="#E-rin和快速迭代" class="headerlink" title="E.rin和快速迭代"></a>E.rin和快速迭代</h2><p>模拟。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function">LL <span class="title">cul</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    LL res=<span class="number">0</span>,i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i*i&lt;=x;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>)res+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i--;</span><br><span class="line">    <span class="keyword">if</span>(i*i==x)res--;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x);</span><br><span class="line">    LL ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">2</span>)&#123;</span><br><span class="line">        ans++;</span><br><span class="line">        x=cul(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="F-maki和tree"><a href="#F-maki和tree" class="headerlink" title="F.maki和tree"></a>F.maki和tree</h2><p>预处理出每个白联通块大小，枚举每个黑点统计答案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> LL INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> LL maxn=<span class="number">100005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    LL u,v,nxt;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">LL nume=<span class="number">0</span>;</span><br><span class="line">LL last[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(LL u,LL v)</span></span>&#123;</span><br><span class="line">    e[++nume]=(Edge)&#123;u,v,last[u]&#125;;</span><br><span class="line">    last[u]=nume;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">LL dp[maxn];</span><br><span class="line"><span class="keyword">bool</span> c[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line">LL fff[maxn],cnt[maxn],cntt;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(LL u,LL ff)</span></span>&#123;</span><br><span class="line">    cntt++;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    fff[u]=ff;</span><br><span class="line">    <span class="keyword">for</span>(LL i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">        LL v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v]&amp;&amp;c[v]==<span class="number">0</span>)dfs1(v,ff);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; v;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">0</span>;i&lt;n;i++)c[i+<span class="number">1</span>]=(s[i]==<span class="string">'B'</span>?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        LL u,v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;u,&amp;v);</span><br><span class="line">        add_edge(u,v);add_edge(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]&amp;&amp;c[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            cntt=<span class="number">0</span>;</span><br><span class="line">            dfs1(i,i);</span><br><span class="line">            cnt[i]=cntt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        v.clear();</span><br><span class="line">        <span class="keyword">if</span>(c[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(LL j=last[i];j;j=e[j].nxt)&#123;</span><br><span class="line">                <span class="keyword">if</span>(c[e[j].v]==<span class="number">0</span>)v.push_back(cnt[fff[e[j].v]]);</span><br><span class="line">            &#125;</span><br><span class="line">            LL sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(LL j=<span class="number">0</span>;j&lt;v.size();j++)&#123;</span><br><span class="line">                sum+=v[j];</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=sum*<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span>(LL j=<span class="number">0</span>;j&lt;v.size();j++)&#123;</span><br><span class="line">                ans+=v[j]*(sum-v[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="G-eli和字符串"><a href="#G-eli和字符串" class="headerlink" title="G.eli和字符串"></a>G.eli和字符串</h2><p>二分答案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> cnt[maxn][<span class="number">30</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Binary_Search&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+len<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt[i+len<span class="number">-1</span>][j]-cnt[i<span class="number">-1</span>][j]&gt;=k)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=n;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid))r=mid;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> check(l)?l:<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Binary_Search;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">            cnt[i][j]=cnt[i<span class="number">-1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[i][s[i<span class="number">-1</span>]-<span class="string">'a'</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,do_main());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="H-nozomi和字符串"><a href="#H-nozomi和字符串" class="headerlink" title="H.nozomi和字符串"></a>H.nozomi和字符串</h2><p>和上题解法几乎一样。（官方并不</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> cnt[maxn][<span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Binary_Search&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+len<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((cnt[i+len<span class="number">-1</span>][<span class="number">0</span>]-cnt[i<span class="number">-1</span>][<span class="number">0</span>]&lt;=k)||(cnt[i+len<span class="number">-1</span>][<span class="number">1</span>]-cnt[i<span class="number">-1</span>][<span class="number">1</span>]&lt;=k))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=n;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid))l=mid;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Binary_Search;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cnt[i][<span class="number">0</span>]=cnt[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        cnt[i][<span class="number">1</span>]=cnt[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">        cnt[i][s[i<span class="number">-1</span>]-<span class="string">'0'</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,do_main());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="I-nico和niconiconi"><a href="#I-nico和niconiconi" class="headerlink" title="I.nico和niconiconi"></a>I.nico和niconiconi</h2><p>动态规划。dp[i]表示s[i~n]的最优值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">300005</span>;</span><br><span class="line"> </span><br><span class="line">LL dp[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a,b,c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        dp[i]=dp[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">4</span><span class="number">-1</span>&lt;=n<span class="number">-1</span>&amp;&amp;s.substr(i,<span class="number">4</span>)==<span class="string">"nico"</span>)dp[i]=max(dp[i],dp[i+<span class="number">4</span>]+a);</span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">6</span><span class="number">-1</span>&lt;=n<span class="number">-1</span>&amp;&amp;s.substr(i,<span class="number">6</span>)==<span class="string">"niconi"</span>)dp[i]=max(dp[i],dp[i+<span class="number">6</span>]+b);</span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">10</span><span class="number">-1</span>&lt;=n<span class="number">-1</span>&amp;&amp;s.substr(i,<span class="number">10</span>)==<span class="string">"niconiconi"</span>)dp[i]=max(dp[i],dp[i+<span class="number">10</span>]+c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>nowcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #616 (Div. 2)</title>
    <url>/2020/02/11/Codeforces-Round-616-Div-2/</url>
    <content><![CDATA[<p>又有一位学长上紫了，我什么时候才能和他们一样强啊（大概不能</p>
<h2 id="A-Even-But-Not-Even"><a href="#A-Even-But-Not-Even" class="headerlink" title="A. Even But Not Even"></a>A. Even But Not Even</h2><p>if奇数个数≥2，yes，ans=两个奇数接起来；<br>else，no。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">string</span> s;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s;</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>((s[i]-<span class="string">'0'</span>)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">				cnt++;ans*=<span class="number">10</span>;ans+=s[i]-<span class="string">'0'</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(cnt&gt;=<span class="number">2</span>)<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(cnt&gt;=<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="B-Array-Sharpening"><a href="#B-Array-Sharpening" class="headerlink" title="B. Array Sharpening"></a>B. Array Sharpening</h2><p>check每一位的值是否≥min(该位到达最左端的距离,该位到达最左端的距离)。如果n为偶数还要保证最中间两个数的其中一个≥最短距离+1。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">300005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&lt;min(i<span class="number">-1</span>,n-i))&#123;</span><br><span class="line">				flag=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;!(a[n/<span class="number">2</span>]&gt;=n/<span class="number">2</span>||a[n/<span class="number">2</span>+<span class="number">1</span>]&gt;=n/<span class="number">2</span>))flag=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-Mind-Control"><a href="#C-Mind-Control" class="headerlink" title="C. Mind Control"></a>C. Mind Control</h2><p>不妨默认取数顺序：被劝说同学-&gt;没被劝说同学-&gt;我。数据范围辣么小，直接暴力枚举劝说同学取数之后剩余的区间和没被劝说同学决策后的结果。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3505</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,m,k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		k=min(k,m<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=k+<span class="number">1</span>;l++)&#123;</span><br><span class="line">			<span class="keyword">int</span> MIN=INF,rest=m<span class="number">-1</span>-k,r=l+n-k<span class="number">-1</span>;</span><br><span class="line"><span class="comment">//			printf("l=%d r=%d\n",l,r);</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=l;j&lt;=l+rest;j++)&#123;</span><br><span class="line"><span class="comment">//				printf("%d %d\n",j,r-(rest-(j-l)));</span></span><br><span class="line">				MIN=min(MIN,max(a[j],a[r-(rest-(j-l))]));</span><br><span class="line">			&#125;</span><br><span class="line"><span class="comment">//			printf("MIN=%d\n",MIN);</span></span><br><span class="line">			ans=max(MIN,ans);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-Irreducible-Anagrams"><a href="#D-Irreducible-Anagrams" class="headerlink" title="D. Irreducible Anagrams"></a>D. Irreducible Anagrams</h2><p>yes的情况：①区间长为1 ②区间左右端点字母不同 ③区间内有至少3个不同字母</p>
<p>构造：①略 ②交换左右端点 ③设三个字母为a、b、c，端点为a，从左向右扫描字符串时b较c先出现，则将第一个c换到首位，第一个b换到末尾即可。</p>
<p>证明左右端点相等且区间内只有两个字母时No：设两个字母为a、b，端点为a，显然t的首末为应为b。在l位置，t比s多一个b，在r-1位置，t比s少一个b，期间必存在位置t与s的b数量相等。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[maxn][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	<span class="keyword">int</span> n=s.length();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">			cnt[i][j]=cnt[i<span class="number">-1</span>][j];</span><br><span class="line">		&#125;</span><br><span class="line">		cnt[i][s[i<span class="number">-1</span>]-<span class="string">'a'</span>]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> q;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="keyword">int</span> l,r;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">		<span class="keyword">int</span> cntt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(cnt[r][i]-cnt[l<span class="number">-1</span>][i])cntt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(s[l<span class="number">-1</span>]!=s[r<span class="number">-1</span>]||cntt&gt;=<span class="number">3</span>||r==l)<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #613 (Div. 2)</title>
    <url>/2020/02/11/Codeforces-Round-613-Div-2/</url>
    <content><![CDATA[<h2 id="A-Mezo-Playing-Zoma"><a href="#A-Mezo-Playing-Zoma" class="headerlink" title="A. Mezo Playing Zoma"></a>A. Mezo Playing Zoma</h2><p>范围[-L,R]。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i]==<span class="string">'L'</span>)a++;</span><br><span class="line">		<span class="keyword">else</span> b++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a+b+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="B-Just-Eat-It"><a href="#B-Just-Eat-It" class="headerlink" title="B. Just Eat It!"></a>B. Just Eat It!</h2><p>查找是否有前缀和（不包含全序列的和）或后缀和（不包含全序列的和）不小于0。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line">LL sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">			sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">			<span class="keyword">if</span>(sum[i]&lt;=<span class="number">0</span>)flag=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">1</span>;i--)&#123;</span><br><span class="line">			sum[i]=sum[i+<span class="number">1</span>]+a[i];</span><br><span class="line">			<span class="keyword">if</span>(sum[i]&lt;=<span class="number">0</span>)flag=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-Fadi-and-LCM"><a href="#C-Fadi-and-LCM" class="headerlink" title="C. Fadi and LCM"></a>C. Fadi and LCM</h2><p>将X质因数分解，如果a包含因子p，则b一定不包含该因子，否则不满足最小要求。枚举a包含那些X的质因子即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,k,now,b[<span class="number">1010</span>],ans,len=<span class="number">0</span>,sqnn;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> k,<span class="keyword">long</span> <span class="keyword">long</span> now)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k==len)&#123;</span><br><span class="line">		<span class="comment">//printf("%lld\n",now);</span></span><br><span class="line">		<span class="keyword">if</span>(now&gt;sqnn&amp;&amp;ans&gt;now) ans=now;</span><br><span class="line">		<span class="keyword">return</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	dfs(k+<span class="number">1</span>,now);</span><br><span class="line">	dfs(k+<span class="number">1</span>,now*b[k+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">	sqnn=<span class="built_in">floor</span>(<span class="built_in">sqrt</span>(n));</span><br><span class="line">	<span class="comment">//printf("%lld\n",sqnn);</span></span><br><span class="line">	k=ans=n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">2</span>;i*i&lt;=n;i++) <span class="keyword">if</span>(k%i==<span class="number">0</span>)&#123;</span><br><span class="line">		b[++len]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(k%i==<span class="number">0</span>)&#123;</span><br><span class="line">			k/=i;</span><br><span class="line">			b[len]*=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	b[++len]=k;</span><br><span class="line">	<span class="comment">//for(long long i=1;i&lt;=len;i++) printf("%lld#\n",b[i]);</span></span><br><span class="line">	dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	dfs(<span class="number">1</span>,b[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,n/ans,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-Dr-Evil-Underscores"><a href="#D-Dr-Evil-Underscores" class="headerlink" title="D. Dr. Evil Underscores"></a>D. Dr. Evil Underscores</h2><p>建立一棵01Trie树，从高位向低位递推，dp[i]表示到当前节点对应位数当前节点状态的后续状态为最大值状态时最大值前当前节点对应位数位的值。</p>
<p>如果第i个结点的父亲节点有两个子结点，则dp[i]=dp[f[i]]+(1&lt;&lt;(当前节点对应位数));否则dp[i]=dp[f[i]]。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL INF=<span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e5</span>+<span class="number">5</span>)*<span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">LL ch[maxn][<span class="number">2</span>],f[maxn];</span><br><span class="line">LL dp[maxn];</span><br><span class="line">LL dep[maxn];</span><br><span class="line">LL a[maxn];</span><br><span class="line"><span class="keyword">int</span> size=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">			<span class="keyword">int</span> u=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">				<span class="keyword">int</span> c=(x&amp;(<span class="number">1</span>&lt;&lt;i));</span><br><span class="line">				<span class="keyword">if</span>(c!=<span class="number">0</span>)c=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(!ch[u][c])&#123;</span><br><span class="line">					ch[u][c]=(++size);</span><br><span class="line">					f[size]=u;</span><br><span class="line">					dep[size]=i;</span><br><span class="line">				&#125;</span><br><span class="line">				u=ch[u][c];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		insert(a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=size;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(ch[f[i]][<span class="number">0</span>]*ch[f[i]][<span class="number">1</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">			dp[i]=dp[f[i]];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> dp[i]=dp[f[i]]+(<span class="number">1L</span>L&lt;&lt;dep[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//printf("%d %d %d\n",ch[29][0],ch[29][1],dep[30]);</span></span><br><span class="line">	LL ans=INF;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=size;i++)&#123;</span><br><span class="line"><span class="comment">//		printf("dp[%d]=%d f[]=%d %d %d %d\n",i,dp[i],f[i],dep[i],ch[i][0],ch[i][1]);</span></span><br><span class="line">		<span class="keyword">if</span>(dep[i]==<span class="number">0</span>)ans=min(ans,dp[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #612 (Div. 2)</title>
    <url>/2020/02/11/Codeforces-Round-612-Div-2/</url>
    <content><![CDATA[<h2 id="A-Angry-Students"><a href="#A-Angry-Students" class="headerlink" title="A. Angry Students"></a>A. Angry Students</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="built_in">string</span> s;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		s+=<span class="string">'A'</span>;</span><br><span class="line">		<span class="keyword">int</span> last=n;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]==<span class="string">'A'</span>)&#123;</span><br><span class="line">				ans=max(ans,last-i<span class="number">-1</span>);</span><br><span class="line">				last=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="B-Hyperset"><a href="#B-Hyperset" class="headerlink" title="B. Hyperset"></a>B. Hyperset</h2><p>枚举前两种，可以唯一确定第三种的状态。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1505</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">bool</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> n,k,ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">		mp[s[i]]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			<span class="built_in">string</span> c;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;k;l++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i][l]==s[j][l])c+=s[i][l];</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>((s[i][l]==<span class="string">'S'</span>&amp;&amp;s[j][l]==<span class="string">'E'</span>)||(s[j][l]==<span class="string">'S'</span>&amp;&amp;s[i][l]==<span class="string">'E'</span>))c+=<span class="string">'T'</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>((s[i][l]==<span class="string">'T'</span>&amp;&amp;s[j][l]==<span class="string">'E'</span>)||(s[j][l]==<span class="string">'T'</span>&amp;&amp;s[i][l]==<span class="string">'E'</span>))c+=<span class="string">'S'</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>((s[i][l]==<span class="string">'S'</span>&amp;&amp;s[j][l]==<span class="string">'T'</span>)||(s[j][l]==<span class="string">'S'</span>&amp;&amp;s[i][l]==<span class="string">'T'</span>))c+=<span class="string">'E'</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(mp.count(c))ans++;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans/<span class="number">3</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-Garland"><a href="#C-Garland" class="headerlink" title="C. Garland"></a>C. Garland</h2><p>dp[i][j][k][0/1]表示前i项用掉j个奇数k个偶数最后一个数是奇/偶的最小复杂度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn][maxn][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		<span class="keyword">if</span>(a[i])vis[a[i]]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> num1=<span class="number">0</span>,num2=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&amp;<span class="number">1</span>)num1++;</span><br><span class="line">			<span class="keyword">else</span> num2++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=num1;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=num2;k++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(a[i])&#123;</span><br><span class="line">					dp[i][j][k][a[i]&amp;<span class="number">1</span>]=min(dp[i<span class="number">-1</span>][j][k][a[i]&amp;<span class="number">1</span>],dp[i<span class="number">-1</span>][j][k][!(a[i]&amp;<span class="number">1</span>)]+<span class="number">1</span>);</span><br><span class="line">					dp[i][j][k][!(a[i]&amp;<span class="number">1</span>)]=INF;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(j&gt;<span class="number">0</span>)dp[i][j][k][<span class="number">1</span>]=min(dp[i<span class="number">-1</span>][j<span class="number">-1</span>][k][<span class="number">1</span>],dp[i<span class="number">-1</span>][j<span class="number">-1</span>][k][<span class="number">0</span>]+<span class="number">1</span>);</span><br><span class="line">					<span class="keyword">if</span>(k&gt;<span class="number">0</span>)dp[i][j][k][<span class="number">0</span>]=min(dp[i<span class="number">-1</span>][j][k<span class="number">-1</span>][<span class="number">0</span>],dp[i<span class="number">-1</span>][j][k<span class="number">-1</span>][<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min(dp[n][num1][num2][<span class="number">0</span>],dp[n][num1][num2][<span class="number">1</span>]));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello 2020</title>
    <url>/2020/02/11/Hello-2020/</url>
    <content><![CDATA[<h2 id="A-New-Year-and-Naming"><a href="#A-New-Year-and-Naming" class="headerlink" title="A. New Year and Naming"></a>A. New Year and Naming</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">24</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s[maxn],t[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">cin</span>&gt;&gt;t[i];</span><br><span class="line">	<span class="keyword">int</span> q;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="keyword">int</span> x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;s[(x<span class="number">-1</span>)%n+<span class="number">1</span>]+t[(x<span class="number">-1</span>)%m+<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="B-New-Year-and-Ascent-Sequence"><a href="#B-New-Year-and-Ascent-Sequence" class="headerlink" title="B. New Year and Ascent Sequence"></a>B. New Year and Ascent Sequence</h2><p>记录每个数列的最大值和最小值，统计最大值大于最小值的方案数。注意单个数列自身已经有上升的情况。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mi[maxn],ma[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	LL ans=<span class="number">0</span>;</span><br><span class="line">	LL cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> l;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;l);</span><br><span class="line">		<span class="keyword">int</span> MAX=<span class="number">0</span>,MIN=INF;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,x;j&lt;=l;j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">			<span class="keyword">if</span>(x&gt;MIN)flag=<span class="number">1</span>;</span><br><span class="line">			MAX=max(MAX,x);</span><br><span class="line">			MIN=min(MIN,x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">			cnt++;</span><br><span class="line">			MIN=INF,MAX=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ma[i]=MAX;</span><br><span class="line">		mi[i]=MIN;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(mi+<span class="number">1</span>,mi+n+<span class="number">1</span>);sort(ma+<span class="number">1</span>,ma+n+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> pos=cnt+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n-cnt;i++)&#123;</span><br><span class="line">		<span class="keyword">while</span>(mi[i]&gt;=ma[pos]&amp;&amp;pos&lt;=n)pos++;</span><br><span class="line">		ans+=n-pos+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ans+=cnt*n*<span class="number">2</span>-cnt-cnt*(cnt<span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-New-Year-and-Permutation"><a href="#C-New-Year-and-Permutation" class="headerlink" title="C. New Year and Permutation"></a>C. New Year and Permutation</h2><p>分别统计不同长度对答案的贡献。</p>
<p>长度len对答案的贡献为len! * (n-len+1) * (n-len+1) * (n-len)!</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">250005</span>;</span><br><span class="line"></span><br><span class="line">LL f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,MOD;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;MOD);</span><br><span class="line">	f[<span class="number">0</span>]=f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)f[i]=(f[i<span class="number">-1</span>]*i)%MOD;</span><br><span class="line">	LL ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		ans+=((f[i]*(n-i+<span class="number">1</span>))%MOD*(n-i+<span class="number">1</span>)%MOD)*f[n-i]%MOD;</span><br><span class="line">		ans%=MOD;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Good Bye 2019</title>
    <url>/2020/02/11/Good-Bye-2019/</url>
    <content><![CDATA[<h2 id="A-Card-Game"><a href="#A-Card-Game" class="headerlink" title="A. Card Game"></a>A. Card Game</h2><p>双方最优策略一定是出最大的牌，比较双方初始手牌中的最大值即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,a,b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;a,&amp;b);</span><br><span class="line">		<span class="keyword">int</span> MAXa=<span class="number">0</span>,MAXb=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=a;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">			MAXa=max(MAXa,x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=b;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">			MAXb=max(MAXb,x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(MAXa&gt;MAXb)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="B-Interesting-Subarray"><a href="#B-Interesting-Subarray" class="headerlink" title="B. Interesting Subarray"></a>B. Interesting Subarray</h2><p>如果[l,r]符合条件，则[l,r]间存在相邻元素满足条件。因此只需考虑相邻元素。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">abs</span>(a[i]-a[i+<span class="number">1</span>])&gt;<span class="number">1</span>)&#123;</span><br><span class="line">				flag=<span class="number">1</span>;</span><br><span class="line">				<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,i,i+<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag==<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-Make-Good"><a href="#C-Make-Good" class="headerlink" title="C. Make Good"></a>C. Make Good</h2><p>构造。b1=xorsum，b2=xorsum+sum。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		LL sum=<span class="number">0</span>,xorsum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			LL x;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x),sum+=x,xorsum^=x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sum==xorsum*<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"0\n\n"</span>);</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"2\n%lld %lld\n"</span>,xorsum,sum+xorsum);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-Strange-Device"><a href="#D-Strange-Device" class="headerlink" title="D. Strange Device"></a>D. Strange Device</h2><p>我们仅用前k+1个元素，在k+1次查询内找出m。第i次询问除a[i]以外的其他数，则在全部k+1个答案中第m小数的出现了k-m+1次，第m+1小的数出现了m次。因此答案中较大数的出现次数就是答案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,k;</span><br><span class="line">	<span class="keyword">int</span> cntMAX=<span class="number">0</span>,MAX=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k+<span class="number">1</span>;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"?"</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k+<span class="number">1</span>;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j!=i)<span class="built_in">printf</span>(<span class="string">" %d"</span>,j);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">		fflush(<span class="built_in">stdout</span>);</span><br><span class="line">		<span class="keyword">int</span> pos,val;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;pos,&amp;val);</span><br><span class="line">		<span class="keyword">if</span>(val&gt;MAX)&#123;</span><br><span class="line">			MAX=val;</span><br><span class="line">			cntMAX=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(val==MAX)cntMAX++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"! %d\n"</span>,cntMAX);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 79 (Rated for Div. 2)</title>
    <url>/2020/02/11/Educational-Codeforces-Round-79-Rated-for-Div-2/</url>
    <content><![CDATA[<h2 id="A-New-Year-Garland"><a href="#A-New-Year-Garland" class="headerlink" title="A. New Year Garland"></a>A. New Year Garland</h2><p>不妨设a≤b≤c，如果b+c≥a-1，则一定有解(b和c所对应的颜色插在a所对应颜色的空隙中)。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> a,b,c;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">		<span class="keyword">if</span>(a&lt;b)swap(a,b);</span><br><span class="line">		<span class="keyword">if</span>(a&lt;c)swap(a,c);</span><br><span class="line">		<span class="keyword">if</span>(b+c&gt;=a<span class="number">-1</span>)<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="B-Verse-For-Santa"><a href="#B-Verse-For-Santa" class="headerlink" title="B. Verse For Santa"></a>B. Verse For Santa</h2><p>skip的数一定是不skip的情况下能到达的部分或不能到达部分的首个，在这些数中贪心取最大值skip掉即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line">LL sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		LL s;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;n,&amp;s);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]),sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">		<span class="keyword">if</span>(sum[n]&lt;=s)&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(sum[i]&lt;=s)top=i;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> MAX=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top+<span class="number">1</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&gt;MAX)MAX=a[i],ans=i;</span><br><span class="line">		&#125;</span><br><span class="line">		s+=MAX;</span><br><span class="line">		<span class="keyword">int</span> newtop=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(sum[i]&lt;=s)newtop=i;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(newtop&gt;top)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-Stack-of-Presents"><a href="#C-Stack-of-Presents" class="headerlink" title="C. Stack of Presents"></a>C. Stack of Presents</h2><p>模拟分发礼物的过程，记录以分发礼物在栈中的最大深度dep。如果当前礼物深度&lt;dep，则一定可以通过前面的重排使其在栈顶；否则花费上方剩余礼物数*2+1的时间，并更新最大深度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],pos[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,m;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">			pos[a[i]]=i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> dep=<span class="number">0</span>;</span><br><span class="line">		LL ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">			<span class="keyword">if</span>(dep&gt;pos[b[i]])ans++;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				ans+=<span class="number">2L</span>L*(pos[b[i]]<span class="number">-1</span>-(i<span class="number">-1</span>))+<span class="number">1</span>;</span><br><span class="line">				dep=pos[b[i]];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-Santa’s-Bot"><a href="#D-Santa’s-Bot" class="headerlink" title="D. Santa’s Bot"></a>D. Santa’s Bot</h2><p>分别统计每种礼物对答案的贡献。特定礼物对答案的贡献为：一二选中选中此种礼物的概率*三选中选中愿望单中含有此礼物的孩子的概率。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL MOD=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line">LL k[maxn],b[maxn],cnt1[maxn],cnt2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Quick_Pow&#123;</span><br><span class="line">	<span class="function">LL <span class="title">do_main</span><span class="params">(LL a,LL k)</span></span>&#123;</span><br><span class="line">    	LL r=<span class="number">1</span>,base=a%MOD;</span><br><span class="line">		<span class="keyword">while</span>(k)&#123;</span><br><span class="line">        	<span class="keyword">if</span>(k&amp;<span class="number">1</span>)r=r*base%MOD;</span><br><span class="line">        	base=base*base%MOD;</span><br><span class="line">        	k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Quick_Pow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	LL sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;k[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k[i];j++)&#123;</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;b[j]);</span><br><span class="line">                    (cnt1[b[j]]+=do_main(n,MOD<span class="number">-2</span>)*do_main(k[i],MOD<span class="number">-2</span>)%MOD)%=MOD;</span><br><span class="line">                    (cnt2[b[j]]+=do_main(n,MOD<span class="number">-2</span>))%=MOD;</span><br><span class="line">                &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	LL ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1e6</span>;i++)&#123;</span><br><span class="line">		(ans+=(cnt1[i]*cnt2[i])%MOD)%=MOD;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #610 (Div. 2)</title>
    <url>/2020/02/11/Codeforces-Round-610-Div-2/</url>
    <content><![CDATA[<h2 id="A-Temporarily-unavailable"><a href="#A-Temporarily-unavailable" class="headerlink" title="A. Temporarily unavailable"></a>A. Temporarily unavailable</h2><p>求两区间交集，然后用行程区间长度减去交集区间长度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> a,b,c,r;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;a,&amp;b,&amp;c,&amp;r);</span><br><span class="line">		<span class="keyword">int</span> ll=c-r,rr=c+r;</span><br><span class="line">		<span class="keyword">if</span>(a&gt;b)swap(a,b);</span><br><span class="line">		<span class="keyword">if</span>(ll&gt;b||rr&lt;a)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b-a);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">int</span> l=max(ll,a),r=min(rr,b);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b-a-(r-l));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="B1-K-for-the-Price-of-One-Easy-Version"><a href="#B1-K-for-the-Price-of-One-Easy-Version" class="headerlink" title="B1. K for the Price of One (Easy Version)"></a>B1. K for the Price of One (Easy Version)</h2><p>按价格排序。考虑购买前i个商品的最小花费：当商品剩余数≥2时，每次购买最贵的商品白嫖次贵商品；当商品剩余数为1时，直接购买。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],sum[maxn],sum1[maxn],sum2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,p,k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;p,&amp;k);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">			<span class="keyword">if</span>(i&amp;<span class="number">1</span>)&#123;</span><br><span class="line">				sum1[i]=sum1[i<span class="number">-1</span>]+a[i];</span><br><span class="line">				sum2[i]=sum2[i<span class="number">-1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				sum1[i]=sum1[i<span class="number">-1</span>];</span><br><span class="line">				sum2[i]=sum2[i<span class="number">-1</span>]+a[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">4</span>;</span><br><span class="line">		<span class="keyword">if</span>(p&lt;a[<span class="number">1</span>]||n==<span class="number">0</span>)ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>((p&gt;=a[<span class="number">1</span>]&amp;&amp;p&lt;a[<span class="number">2</span>])||n==<span class="number">1</span>)ans=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>((p&gt;=a[<span class="number">2</span>]&amp;&amp;p&lt;a[<span class="number">1</span>]+a[<span class="number">3</span>])||n==<span class="number">2</span>)ans=<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>((p&gt;=a[<span class="number">1</span>]+a[<span class="number">3</span>]&amp;&amp;p&lt;a[<span class="number">2</span>]+a[<span class="number">4</span>])||n==<span class="number">3</span>)ans=<span class="number">3</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=n;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(i&amp;<span class="number">1</span>)&#123;</span><br><span class="line">					<span class="keyword">if</span>(sum[i]-sum2[i]&lt;=p)ans=i;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(sum[i]-sum1[i]&lt;=p)ans=i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min(ans,n));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="B2-K-for-the-Price-of-One-Hard-Version"><a href="#B2-K-for-the-Price-of-One-Hard-Version" class="headerlink" title="B2. K for the Price of One (Hard Version)"></a>B2. K for the Price of One (Hard Version)</h2><p>按价格排序。考虑购买前i个商品的最小花费：当商品剩余数≥k时，每次购买最贵的商品白嫖次贵商品；当商品剩余数＜k时，直接购买。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],sum[maxn],smm[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,p,k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;p,&amp;k);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">			smm[i]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;=k)smm[i]=smm[i-k]+a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(smm[i]+sum[i%k]&lt;=p)ans=i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-Petya-and-Exam"><a href="#C-Petya-and-Exam" class="headerlink" title="C. Petya and Exam"></a>C. Petya and Exam</h2><p>可能产生答案的时刻仅有t[i]-1和T。枚举每一个t[i]-1，用完成必要任务之后剩下的时间尽可能多的完成非必要任务——在所有对于该时刻不必要完成的任务中优先挑选简单题完成。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Problem</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> t,v;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Problem &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> t&lt;b.t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"></span><br><span class="line">LL sum[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">3</span>][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,m,a,b;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;a,&amp;b);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> type;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;type);</span><br><span class="line">			<span class="keyword">if</span>(type)p[i].v=b;</span><br><span class="line">			<span class="keyword">else</span> p[i].v=a;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i].t);</span><br><span class="line">		sort(p+<span class="number">1</span>,p+n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			sum[i]=sum[i<span class="number">-1</span>]+p[i].v;</span><br><span class="line">			cnt[<span class="number">0</span>][i]=cnt[<span class="number">0</span>][i<span class="number">-1</span>];cnt[<span class="number">1</span>][i]=cnt[<span class="number">1</span>][i<span class="number">-1</span>];</span><br><span class="line">			<span class="keyword">if</span>(p[i].v==b)cnt[<span class="number">1</span>][i]++;</span><br><span class="line">			<span class="keyword">else</span> cnt[<span class="number">0</span>][i]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(sum[i<span class="number">-1</span>]&gt;p[i].t<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				res=i<span class="number">-1</span>;</span><br><span class="line">				<span class="keyword">int</span> left=p[i].t<span class="number">-1</span>-sum[i<span class="number">-1</span>];</span><br><span class="line">				res+=min(left/a,cnt[<span class="number">0</span>][n]-cnt[<span class="number">0</span>][i<span class="number">-1</span>]);</span><br><span class="line">				left-=((res-(i<span class="number">-1</span>))*a);</span><br><span class="line">				res+=min(left/b,cnt[<span class="number">1</span>][n]-cnt[<span class="number">1</span>][i<span class="number">-1</span>]);</span><br><span class="line">				ans=max(ans,res);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(m&gt;=sum[n])ans=n;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>contest</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Carls&#39;s Arithmetic Templates</title>
    <url>/2020/02/11/Carls-s-Arithmetic-Templates/</url>
    <content><![CDATA[<p>总结了一部分学过的算法模板，持续更新中。</p>
<a id="more"></a>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">				Carls's Arithmetic Templates</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> Fast_IO&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">		x=<span class="number">0</span>;<span class="keyword">int</span> flag=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">		<span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)flag=<span class="number">-1</span>;<span class="keyword">if</span>(ch==EOF)<span class="keyword">return</span> <span class="number">0</span>;ch=getchar();&#125;</span><br><span class="line">		<span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">		<span class="keyword">return</span> x*=flag;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Quick Sort</span></span><br><span class="line"><span class="keyword">namespace</span> Quick_Sort&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> i,j,base;</span><br><span class="line">    	i=<span class="number">1</span>;j=size;</span><br><span class="line">    	base=arr[i+j&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    	<span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">    	    <span class="keyword">while</span>(arr[i]&lt;base)i++;</span><br><span class="line">    	    <span class="keyword">while</span>(arr[j]&gt;base)j--;</span><br><span class="line">    	    <span class="keyword">if</span> (i&lt;=j)&#123; </span><br><span class="line">    	        swap(arr[i],arr[j]);</span><br><span class="line">    	        i++;j--;</span><br><span class="line">    	    &#125;</span><br><span class="line">    	&#125;</span><br><span class="line">	    <span class="keyword">if</span>(<span class="number">1</span>&lt;j)do_main(<span class="number">1</span>,j);</span><br><span class="line">		<span class="keyword">if</span>(i&lt;size)do_main(i,size);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Bubble Sort</span></span><br><span class="line"><span class="keyword">namespace</span> Bubble_Sort&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">int</span> pre=size;</span><br><span class="line">    	<span class="keyword">while</span>(pre)&#123;</span><br><span class="line">    		flag=<span class="number">0</span>;</span><br><span class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pre<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        		<span class="keyword">if</span>(arr[i]&gt;arr[i+<span class="number">1</span>])swap(arr[i],arr[i+<span class="number">1</span>]),flag=i+<span class="number">1</span>;</span><br><span class="line">    		&#125;</span><br><span class="line">    		pre=flag;</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Insert Sort</span></span><br><span class="line"><span class="keyword">namespace</span> Insert_Sort&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=size;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&amp;&amp;arr[j]&gt;arr[j+<span class="number">1</span>];j++)&#123;</span><br><span class="line">				swap(arr[j],arr[j+<span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Shell Sort</span></span><br><span class="line"><span class="keyword">namespace</span> Shell_Sort&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> gap=size&gt;&gt;<span class="number">1</span>;gap;gap&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=gap+<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=i-gap;j&gt;<span class="number">0</span>&amp;&amp;a[j]&gt;a[j+gap];j+=gap)&#123;</span><br><span class="line">					swap(a[j],a[j+gap]);</span><br><span class="line">				&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Selection Sort</span></span><br><span class="line"><span class="keyword">namespace</span> Selection_Sort&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> MIN=INF;</span><br><span class="line">		<span class="keyword">int</span> minnode=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=size;i++)&#123;</span><br><span class="line">			MIN=INF;</span><br><span class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=size;j++)&#123;</span><br><span class="line">    	    	<span class="keyword">if</span>(arr[j]&lt;min)minnode=j,MIN=arr[j];</span><br><span class="line">    		&#125;</span><br><span class="line">    		swap(arr[i],arr[minnode]);</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Merge Sort</span></span><br><span class="line"><span class="keyword">namespace</span> Merge_Sort&#123;</span><br><span class="line">	<span class="keyword">int</span> T[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		do_main(arr,l,mid);</span><br><span class="line">		do_main(arr,mid+<span class="number">1</span>,r);</span><br><span class="line">		<span class="keyword">int</span> x=l,y=mid+<span class="number">1</span>,z=l;</span><br><span class="line">		<span class="keyword">while</span>(x&lt;=mid||y&lt;=r)&#123;</span><br><span class="line">			<span class="keyword">if</span>(y&gt;r||(x&lt;=mid&amp;&amp;arr[x]&lt;=arr[y]))T[z++]=arr[x++];</span><br><span class="line">			<span class="keyword">else</span> T[z++]=arr[y++]<span class="comment">/*,cnt+=mid-x+1 (Query the number of inversions) */</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)arr[i]=T[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Radix Sort</span></span><br><span class="line"><span class="keyword">namespace</span> Radix_Sort&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;r[<span class="number">10</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> num=<span class="number">10</span>;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(flag)&#123;</span><br><span class="line">			flag=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=size;i++)&#123;</span><br><span class="line">				r[(arr[i]/(num/<span class="number">10</span>))%num].push_back(arr[i]);</span><br><span class="line">				<span class="keyword">if</span>(arr[i]/num)flag=<span class="number">1</span>;	</span><br><span class="line">			&#125;</span><br><span class="line">			cnt=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;r[i].size();j++)&#123;</span><br><span class="line">					arr[++cnt]=r[i][j];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			num*=<span class="number">10</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)r[i].resize(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Binary-Search</span></span><br><span class="line"><span class="keyword">namespace</span> Binary_Search&#123;</span><br><span class="line">	<span class="keyword">double</span> EPS=<span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> ans)</span></span>&#123;</span><br><span class="line">		<span class="comment">//......</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">double</span> l=<span class="number">0</span>,r=MAX;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">			<span class="keyword">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span>(check(mid))r=mid;</span><br><span class="line">			<span class="keyword">else</span> l=mid+EPS;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> l;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Ternary-Search</span></span><br><span class="line"><span class="keyword">namespace</span> Ternary_Search&#123;</span><br><span class="line">	<span class="keyword">double</span> EPS=<span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> ans)</span></span>&#123;</span><br><span class="line">		<span class="comment">//......</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">do_main</span><span class="params">(<span class="keyword">double</span> l,<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">while</span>(r-l&gt;ESP)&#123;</span><br><span class="line">        	<span class="keyword">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        	<span class="keyword">double</span> midd=(mid+r)/<span class="number">2</span>;</span><br><span class="line">        	<span class="keyword">if</span>(f(mid)&gt;f(midd))r=midd;</span><br><span class="line">        	<span class="keyword">else</span> l=mid;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> l;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BigInteger</span></span><br><span class="line"><span class="keyword">namespace</span> Big_Integer&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BigInteger</span>&#123;</span></span><br><span class="line">		<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> base=<span class="number">100000000</span>;</span><br><span class="line">		<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> width=<span class="number">8</span>;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;s;</span><br><span class="line">		BigInteger(<span class="keyword">long</span> <span class="keyword">long</span> num=<span class="number">0</span>)&#123;*<span class="keyword">this</span>=num;&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> = (<span class="keyword">long</span> <span class="keyword">long</span> num)&#123;</span><br><span class="line">			s.clear();</span><br><span class="line">			<span class="keyword">do</span>&#123;</span><br><span class="line">				s.push_back(num%base);</span><br><span class="line">				num/=base;</span><br><span class="line">			&#125;<span class="keyword">while</span>(num);</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> = (<span class="keyword">const</span> <span class="built_in">string</span> &amp;str)&#123;</span><br><span class="line">			s.clear();</span><br><span class="line">			<span class="keyword">int</span> x,len=(str.length()<span class="number">-1</span>)/width+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">				<span class="keyword">int</span> end=str.length()-i*width;</span><br><span class="line">				<span class="keyword">int</span> start=max(<span class="number">0</span>,end-width);</span><br><span class="line">				<span class="built_in">sscanf</span>(str.substr(start,end-start).c_str(),<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">				s.push_back(x);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> + (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">			BigInteger c;</span><br><span class="line">			c.s.clear();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>,g=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(g==<span class="number">0</span>&amp;&amp;i&gt;=s.size()&amp;&amp;i&gt;=b.s.size())<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">if</span>(i&lt;s.size())g+=s[i];</span><br><span class="line">				<span class="keyword">if</span>(i&lt;b.s.size())g+=b.s[i];</span><br><span class="line">				c.s.push_back(g%base);</span><br><span class="line">				g/=base;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> c;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> - (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">			BigInteger c;</span><br><span class="line">			c.s.clear();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>,g=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(i&gt;=s.size())<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">if</span>(i&gt;=b.s.size())&#123;</span><br><span class="line">					c.s.push_back(s[i]+g);</span><br><span class="line">			    	g=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(s[i]&lt;b.s[i])&#123;</span><br><span class="line">						c.s.push_back(s[i]-b.s[i]+base+g);</span><br><span class="line">						g=<span class="number">-1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span>&#123;</span><br><span class="line">						c.s.push_back(s[i]-b.s[i]+g);</span><br><span class="line">						g=<span class="number">0</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> c;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> * (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">			BigInteger c;</span><br><span class="line">			c.s.clear();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size()+b.s.size();i++)c.s.push_back(<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">			  <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b.s.size();j++)&#123;</span><br><span class="line">			  	c.s[i+j]+=s[i]*b.s[j];</span><br><span class="line">			  &#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.s.size()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">				c.s[i+<span class="number">1</span>]+=c.s[i]/base;</span><br><span class="line">				c.s[i]=c.s[i]%base;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(c.s.back()==<span class="number">0</span>&amp;&amp;c.s.size()&gt;<span class="number">1</span>)c.s.erase(c.s.end()<span class="number">-1</span>);</span><br><span class="line">			<span class="keyword">return</span> c;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">			BigInteger c;</span><br><span class="line">			c.s.clear();c.s.resize(s.size());</span><br><span class="line">			<span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">				res*=base;</span><br><span class="line">				res+=s[i];</span><br><span class="line">				c.s[i]=res/b;</span><br><span class="line">				res%=b;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(c.s.back()==<span class="number">0</span>&amp;&amp;c.s.size()&gt;<span class="number">1</span>)c.s.erase(c.s.end()<span class="number">-1</span>);</span><br><span class="line">			<span class="keyword">return</span> c;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> % (<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">			BigInteger c;</span><br><span class="line">			c.s.clear();c.s.resize(s.size());</span><br><span class="line">			<span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">				res*=base;</span><br><span class="line">				res+=s[i];</span><br><span class="line">				c.s[i]=res/b;</span><br><span class="line">				res%=b;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(c.s.back()==<span class="number">0</span>&amp;&amp;c.s.size()&gt;<span class="number">1</span>)c.s.erase(c.s.end()<span class="number">-1</span>);</span><br><span class="line">			<span class="keyword">return</span> (BigInteger)res;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> += (<span class="keyword">const</span> BigInteger &amp;b)&#123;</span><br><span class="line">			*<span class="keyword">this</span>=*<span class="keyword">this</span>+b;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> -= (<span class="keyword">const</span> BigInteger &amp;b)&#123;</span><br><span class="line">			*<span class="keyword">this</span>=*<span class="keyword">this</span>-b;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> *= (<span class="keyword">const</span> BigInteger &amp;b)&#123;</span><br><span class="line">			*<span class="keyword">this</span>=*<span class="keyword">this</span>*b;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> /= (<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)&#123;</span><br><span class="line">			*<span class="keyword">this</span>=*<span class="keyword">this</span>/b;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		BigInteger <span class="keyword">operator</span> %= (<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;b)&#123;</span><br><span class="line">			*<span class="keyword">this</span>=*<span class="keyword">this</span>%b;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(s.size()!=b.s.size())<span class="keyword">return</span> s.size()&lt;b.s.size();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i]!=b.s[i])<span class="keyword">return</span> s[i]&lt;b.s[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;<span class="keyword">return</span> b &lt; *<span class="keyword">this</span>;&#125;</span><br><span class="line">		<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> BigInteger &amp;b)<span class="keyword">const</span>&#123;<span class="keyword">return</span> !(*<span class="keyword">this</span>&gt;b);&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream &amp;out,<span class="keyword">const</span> BigInteger &amp;x)&#123;</span><br><span class="line">		out&lt;&lt;x.s.back();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=x.s.size()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			<span class="keyword">char</span> buf[<span class="number">20</span>];</span><br><span class="line">			<span class="built_in">sprintf</span>(buf,<span class="string">"%08lld"</span>,x.s[i]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">strlen</span>(buf);j++)out&lt;&lt;buf[j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> out;</span><br><span class="line">	&#125;</span><br><span class="line">	istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream &amp;in,BigInteger &amp;x)&#123;</span><br><span class="line">		<span class="built_in">string</span> s;</span><br><span class="line">		<span class="keyword">if</span>(!(in&gt;&gt;s))<span class="keyword">return</span> in;</span><br><span class="line">		x=s;</span><br><span class="line">		<span class="keyword">return</span> in;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Discretization</span></span><br><span class="line"><span class="keyword">namespace</span> Discretization&#123;</span><br><span class="line">	<span class="keyword">int</span> tmp[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">		<span class="built_in">memcpy</span>(tmp+<span class="number">1</span>,arr+<span class="number">1</span>,size&lt;&lt;?);<span class="comment">//int:?=2;long long:?=4;</span></span><br><span class="line">		sort(tmp+<span class="number">1</span>,tmp+size+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">int</span> m=unique(tmp+<span class="number">1</span>,tmp+size+<span class="number">1</span>)-tmp<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=size;i++)arr[i]=lower_bound(tmp+<span class="number">1</span>,tmp+m+<span class="number">1</span>,arr[i])-tmp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Segment Tree</span></span><br><span class="line"><span class="keyword">namespace</span> Segment_Tree&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	    <span class="keyword">int</span> l,r,sum,lazy;</span><br><span class="line">	&#125;t[maxn*<span class="number">4</span>];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k1)</span></span>&#123;</span><br><span class="line">    	t[k1].sum=t[k1&lt;&lt;<span class="number">1</span>].sum+t[k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    	t[k1].l=l;t[k1].r=r;</span><br><span class="line">    	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">    	    t[k1].sum=val[l];</span><br><span class="line">    	    <span class="keyword">return</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    	build(k1&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    	build(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">   		update(k1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k1)</span></span>&#123;</span><br><span class="line">    	t[k1].sum+=t[k1&gt;&gt;<span class="number">1</span>].lazy*(t[k1].r-t[k1].l+<span class="number">1</span>);</span><br><span class="line">    	t[k1].lazy+=t[k1&gt;&gt;<span class="number">1</span>].lazy;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k1)</span></span>&#123;</span><br><span class="line">	    add(k1&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	    add(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	    t[k1].lazy=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_point</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> pos,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(pos&gt;t[k1].r||pos&lt;t[k1].l)<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span>(t[k1].r==t[k1].l)&#123;</span><br><span class="line">    		t[k1].sum+=k;</span><br><span class="line">    		<span class="keyword">return</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	pushdown(k1);</span><br><span class="line">    	change_point(k1&lt;&lt;<span class="number">1</span>,pos,k);</span><br><span class="line">    	change_point(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos,k);</span><br><span class="line">    	update(k1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_interval</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(L&gt;t[k1].r||R&lt;t[k1].l)<span class="keyword">return</span>;</span><br><span class="line">    	<span class="keyword">if</span>(L&lt;=t[k1].l&amp;&amp;R&gt;=t[k1].r)&#123;</span><br><span class="line">    	    t[k1].lazy+=k;</span><br><span class="line">    	    t[k1].sum+=k*(t[k1].r-t[k1].l+<span class="number">1</span>);</span><br><span class="line">    	    <span class="keyword">return</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	pushdown(k1);</span><br><span class="line">    	change_interval(k1&lt;&lt;<span class="number">1</span>,L,R,k);</span><br><span class="line">    	change_interval(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R,k);</span><br><span class="line">    	update(k1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k1,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(L&gt;t[k1].r||R&lt;t[k1].l)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">if</span>(L&lt;=t[k1].l&amp;&amp;R&gt;=t[k1].r)&#123;</span><br><span class="line">    	    <span class="keyword">return</span> t[k1].sum;</span><br><span class="line">    	&#125;</span><br><span class="line">    	pushdown(k1);</span><br><span class="line">    	<span class="keyword">return</span> query(k1&lt;&lt;<span class="number">1</span>,L,R)+query(k1&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Cantor</span></span><br><span class="line"><span class="keyword">namespace</span> Cantor&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">State</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> ch[maxn];</span><br><span class="line">		<span class="keyword">int</span> num;</span><br><span class="line">		State()&#123;</span><br><span class="line">			<span class="comment">//......</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> fac[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</span><br><span class="line">		fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">			fac[i]=fac[i<span class="number">-1</span>]*i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(State &amp;a)</span></span>&#123;</span><br><span class="line">		a.num=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(a.ch[j]&gt;a.ch[i])cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">			a.num+=fac[i]*cnt;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ++a.num;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//A-Star Search</span></span><br><span class="line"><span class="keyword">namespace</span> A_Star_Search&#123;</span><br><span class="line">	<span class="keyword">bool</span> vis[maxn];</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">State</span>&#123;</span></span><br><span class="line">		<span class="comment">//......</span></span><br><span class="line">		<span class="keyword">int</span> g,h;</span><br><span class="line">		<span class="keyword">int</span> num;</span><br><span class="line">		State()&#123;</span><br><span class="line">			<span class="comment">//......</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> State &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> g==b.g?h&gt;b.h:g&gt;b.g;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">guess</span><span class="params">(State &amp;a)</span></span>&#123;</span><br><span class="line">		a.h=<span class="number">0</span>;</span><br><span class="line">		<span class="comment">//......</span></span><br><span class="line">		<span class="keyword">return</span> a.h;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(State s,State t)</span></span>&#123;</span><br><span class="line">		Hash::pre();</span><br><span class="line">		priority_queue&lt;State&gt;q;</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">		Hash::do_main(t);</span><br><span class="line">		Hash::do_main(s);guess(s);s.g=<span class="number">0</span>;</span><br><span class="line">		q.push(s);</span><br><span class="line">		vis[s.num]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">			State now=q.top();</span><br><span class="line">			q.pop();</span><br><span class="line">			<span class="keyword">if</span>(now.num==t.num)&#123;</span><br><span class="line">				<span class="comment">//......</span></span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">				State to=now;</span><br><span class="line">				<span class="comment">//......</span></span><br><span class="line">				<span class="keyword">if</span>(<span class="comment">/*......*/</span>||vis[Hash::do_main(to)])<span class="keyword">continue</span>;</span><br><span class="line">				to.g++;</span><br><span class="line">				vis[to.num]=<span class="number">1</span>;</span><br><span class="line">				guess(to);</span><br><span class="line">				q.push(to);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SPFA</span></span><br><span class="line"><span class="keyword">namespace</span> SPFA&#123;</span><br><span class="line">	<span class="keyword">int</span> cnt[maxn];</span><br><span class="line">	<span class="keyword">bool</span> vis[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">		<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">		<span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">		<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">		vis[s]=<span class="number">1</span>;</span><br><span class="line">		dis[s]=<span class="number">0</span>;</span><br><span class="line">		q.push(s);</span><br><span class="line">		<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">			<span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">			vis[u]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">				<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">				<span class="keyword">if</span>(dis[v]&gt;dis[u]+e[i].w)&#123;</span><br><span class="line">					dis[v]=dis[u]+e[i].w;</span><br><span class="line">					<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">						vis[v]=<span class="number">1</span>;</span><br><span class="line">						q.push(v);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dijkstra</span></span><br><span class="line"><span class="keyword">namespace</span> Dijkstra&#123;</span><br><span class="line">	<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">		priority_queue&lt; pii,<span class="built_in">vector</span>&lt;pii&gt;,greater&lt;pii&gt; &gt;q;</span><br><span class="line">		<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">		dis[s]=<span class="number">0</span>;</span><br><span class="line">		q.push(pii(<span class="number">0</span>,s));</span><br><span class="line">		<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">			pii now=q.top();q.pop();</span><br><span class="line">			<span class="keyword">int</span> u=now.second;</span><br><span class="line">			<span class="keyword">if</span>(dis[u]&lt;now.first)<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">				<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">				<span class="keyword">if</span>(dis[u]+e[i].w&lt;dis[v])&#123;</span><br><span class="line">					dis[v]=dis[u]+e[i].w;</span><br><span class="line">					q.push(pii(dis[v],v));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Floyd</span></span><br><span class="line"><span class="keyword">namespace</span> Floyd&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">					dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line">				&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Union-Find</span></span><br><span class="line"><span class="keyword">namespace</span> Union_Find&#123;</span><br><span class="line">	<span class="keyword">int</span> f[maxn],Rank[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		<span class="built_in">memset</span>(Rank,<span class="number">0</span>,<span class="keyword">sizeof</span>(Rank));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)f[i]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> f[x]==x?x:f[x]=Find(f[x]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> fx=Find(x),fy=Find(y);</span><br><span class="line">		<span class="keyword">if</span>(fx!=fy)&#123;</span><br><span class="line">			<span class="keyword">if</span>(Rank[fx]&gt;Rank[fy])f[fy]=fx;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				f[fx]=fy;</span><br><span class="line">				<span class="keyword">if</span>(Rank[fx]==Rank[fy])Rank[fy]++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Kruskal</span></span><br><span class="line"><span class="keyword">namespace</span> Kruskal&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Union_Find::pre();</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">		sort(e+<span class="number">1</span>,e+nume+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nume;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> fu=Union_Find::find(e[i].u),fv=Union_Find::find(e[i].v);</span><br><span class="line">			<span class="keyword">if</span>(fu!=fv)&#123;</span><br><span class="line">				Union_Find::f[fu]=fv;</span><br><span class="line">				ans+=e[i].w;</span><br><span class="line">				<span class="keyword">if</span>(++cnt==n<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(cnt!=n<span class="number">-1</span>)<span class="keyword">return</span> ans=<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Boruvka</span></span><br><span class="line"><span class="keyword">namespace</span> Boruvka&#123;</span><br><span class="line">	<span class="keyword">int</span> MIN[maxn],pos[maxn];</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> Union_Find;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">			flag=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">memset</span>(MIN,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(MIN));</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)&#123;</span><br><span class="line">				<span class="keyword">int</span> fu=Find(u);</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">					<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">					<span class="keyword">int</span> fv=Find(v);</span><br><span class="line">					<span class="keyword">if</span>(fu!=fv&amp;&amp;e[i].w&lt;MIN[f[u]])&#123;</span><br><span class="line">						MIN[f[u]]=e[i].w;</span><br><span class="line">						pos[f[u]]=f[v];</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(MIN[i]!=INF&amp;&amp;Find(i)!=Find(pos[i]))&#123;</span><br><span class="line">					flag=<span class="number">1</span>;</span><br><span class="line">					Union(i,pos[i]);</span><br><span class="line">					ret+=MIN[i];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(!flag)<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MP</span></span><br><span class="line"><span class="keyword">namespace</span> MP&#123;</span><br><span class="line">	<span class="keyword">int</span> f[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Get_Fail</span><span class="params">(<span class="keyword">char</span> *P)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> lenp=<span class="built_in">strlen</span>(P+<span class="number">1</span>);</span><br><span class="line">		f[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=lenp;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> j=f[i<span class="number">-1</span>];</span><br><span class="line">			<span class="keyword">while</span>(j&amp;&amp;P[j+<span class="number">1</span>]!=P[i])j=f[j];</span><br><span class="line">			f[i]=P[j+<span class="number">1</span>]==P[i]?j+<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">char</span> *T,<span class="keyword">char</span> *P)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> lent=<span class="built_in">strlen</span>(T+<span class="number">1</span>),lenp=<span class="built_in">strlen</span>(P+<span class="number">1</span>);</span><br><span class="line">		Get_Fail(P);</span><br><span class="line">		<span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lent;i++)&#123;</span><br><span class="line">			<span class="keyword">while</span>(j&amp;&amp;T[i]!=P[j+<span class="number">1</span>])j=f[j];</span><br><span class="line">			<span class="keyword">if</span>(T[i]==P[j+<span class="number">1</span>])j++;</span><br><span class="line">			<span class="keyword">if</span>(j==lenp)&#123;</span><br><span class="line">				j=f[j];</span><br><span class="line">				res++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Manacher</span></span><br><span class="line"><span class="keyword">namespace</span> Manacher&#123;</span><br><span class="line">	<span class="keyword">char</span> tmp[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">int</span> p[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)tmp[i*<span class="number">2</span><span class="number">-1</span>]=<span class="string">'%'</span>,tmp[i*<span class="number">2</span>]=s[i];</span><br><span class="line">		tmp[len=len*<span class="number">2</span>+<span class="number">1</span>]=<span class="string">'%'</span>;</span><br><span class="line">		<span class="keyword">int</span> pos=<span class="number">0</span>,R=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> MAX=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&lt;R)p[i]=min(p[pos*<span class="number">2</span>-i],R-i);<span class="keyword">else</span> p[i]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">while</span>(i-p[i]&gt;=<span class="number">1</span>&amp;&amp;i+p[i]&lt;=len&amp;&amp;tmp[i-p[i]]==tmp[i+p[i]])p[i]++;</span><br><span class="line">			<span class="keyword">if</span>(i+p[i]&gt;R)pos=i,R=i+p[i];</span><br><span class="line">			MAX=max(MAX,p[i]<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> MAX;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Trie</span></span><br><span class="line"><span class="keyword">namespace</span> Trie&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Tire</span>&#123;</span></span><br><span class="line">		<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> sigma_size=<span class="number">30</span>;</span><br><span class="line">		<span class="keyword">int</span> ch[maxn][sigma_size];</span><br><span class="line">		<span class="keyword">int</span> val[maxn];</span><br><span class="line">		<span class="keyword">int</span> prefix[maxn];</span><br><span class="line">		<span class="keyword">int</span> size;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</span><br><span class="line">			size=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">memset</span>(ch,<span class="number">0</span>,<span class="keyword">sizeof</span>(ch));</span><br><span class="line">			<span class="built_in">memset</span>(val,<span class="number">0</span>,<span class="keyword">sizeof</span>(val));</span><br><span class="line">			<span class="built_in">memset</span>(prefix,<span class="number">0</span>,<span class="keyword">sizeof</span>(prefix));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">			<span class="keyword">return</span> c-<span class="string">'a'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">			<span class="keyword">int</span> u=<span class="number">0</span>,n=<span class="built_in">strlen</span>(s);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">				<span class="keyword">int</span> c=idx(s[i]);</span><br><span class="line">				<span class="keyword">if</span>(!ch[u][c])&#123;</span><br><span class="line">					ch[u][c]=size++;</span><br><span class="line">				&#125;</span><br><span class="line">				u=ch[u][c];</span><br><span class="line">				prefix[u]++;</span><br><span class="line">			&#125;</span><br><span class="line">			val[u]=v;</span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">query_val</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;<span class="comment">//Query the value of s</span></span><br><span class="line">			<span class="keyword">int</span> u=<span class="number">0</span>,n=<span class="built_in">strlen</span>(s);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">				<span class="keyword">int</span> c=idx(s[i]);</span><br><span class="line">				<span class="keyword">if</span>(!ch[u][c])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				u=ch[u][c];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> val[u];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">query_prefix</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;<span class="comment">//Query the number of words prefixed with s</span></span><br><span class="line">			<span class="keyword">int</span> u=<span class="number">0</span>,n=<span class="built_in">strlen</span>(s);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">				<span class="keyword">int</span> c=idx(s[i]);</span><br><span class="line">				<span class="keyword">if</span>(!ch[u][c])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				u=ch[u][c];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> prefix[u];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;tire;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Aho-Corasick Automaton</span></span><br><span class="line"><span class="keyword">namespace</span> Aho_Corasick_Automaton&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Aho_Corasick_Automaton</span>&#123;</span></span><br><span class="line">		<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> sigma_size=<span class="number">26</span>;</span><br><span class="line">		<span class="keyword">int</span> ch[maxn][sigma_size];</span><br><span class="line">		<span class="keyword">int</span> val[maxn],last[maxn];</span><br><span class="line">		<span class="keyword">int</span> f[maxn];</span><br><span class="line">		<span class="keyword">int</span> size;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</span><br><span class="line">			<span class="built_in">memset</span>(ch,<span class="number">0</span>,<span class="keyword">sizeof</span>(ch));</span><br><span class="line">			<span class="built_in">memset</span>(val,<span class="number">0</span>,<span class="keyword">sizeof</span>(val));</span><br><span class="line">			<span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span>(last));</span><br><span class="line">			<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">			size=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">			<span class="keyword">return</span> c-<span class="string">'a'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *P,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">			<span class="keyword">int</span> u=<span class="number">0</span>,n=<span class="built_in">strlen</span>(P);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">				<span class="keyword">int</span> c=idx(P[i]);</span><br><span class="line">				<span class="keyword">if</span>(!ch[u][c])&#123;</span><br><span class="line">					ch[u][c]=++size;</span><br><span class="line">				&#125;</span><br><span class="line">				u=ch[u][c];</span><br><span class="line">			&#125;</span><br><span class="line">			val[u]=v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">get_fail</span><span class="params">()</span></span>&#123;</span><br><span class="line">			<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">			f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;sigma_size;c++)&#123;</span><br><span class="line">				<span class="keyword">int</span> u=ch[<span class="number">0</span>][c];</span><br><span class="line">				<span class="keyword">if</span>(u)&#123;</span><br><span class="line">					f[u]=<span class="number">0</span>;</span><br><span class="line">					q.push(u);</span><br><span class="line">					last[u]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">				<span class="keyword">int</span> r=q.front();q.pop();</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;sigma_size;c++)&#123;</span><br><span class="line">					<span class="keyword">int</span> u=ch[r][c];</span><br><span class="line">					<span class="keyword">if</span>(!u)&#123;</span><br><span class="line">						ch[r][c]=ch[f[r]][c];</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					q.push(u);</span><br><span class="line">					<span class="keyword">int</span> v=f[r];</span><br><span class="line">					<span class="keyword">while</span>(v&amp;&amp;!ch[v][c])v=f[v];</span><br><span class="line">					f[u]=ch[v][c];</span><br><span class="line">					last[u]=val[f[u]]?f[u]:last[f[u]];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">count</span><span class="params">(<span class="keyword">char</span> *T)</span></span>&#123;</span><br><span class="line">			<span class="keyword">int</span> u=<span class="number">0</span>,n=<span class="built_in">strlen</span>(T);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">				<span class="keyword">int</span> c=idx(T[i]);</span><br><span class="line">				u=ch[u][c];</span><br><span class="line">				<span class="keyword">if</span>(val[u]||last[u])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;ac;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Quick Pow</span></span><br><span class="line"><span class="keyword">namespace</span> Quick_Pow&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> r=<span class="number">1</span>,base=a;</span><br><span class="line">		<span class="keyword">while</span>(k)&#123;</span><br><span class="line">        	<span class="keyword">if</span>(k&amp;<span class="number">1</span>)r=r*base;</span><br><span class="line">        	base=base*base;</span><br><span class="line">        	k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Matrix Quick Pow</span></span><br><span class="line"><span class="keyword">namespace</span> Matrix_Quick_Pow&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line">    	<span class="keyword">int</span> arr[maxn][maxn];</span><br><span class="line">    	Matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> Matrix &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        	Matrix ret;</span><br><span class="line">        	<span class="built_in">memset</span>(ret.arr,<span class="number">0</span>,<span class="keyword">sizeof</span>(ret.arr));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">            	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n<span class="number">-1</span>;j++)</span><br><span class="line">                	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=n<span class="number">-1</span>;k++)&#123;</span><br><span class="line">                		ret.arr[i][j]=(ret.arr[i][j]+arr[i][k]*b.arr[k][j])%mod;</span><br><span class="line">                	&#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">       &#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function">Matrix <span class="title">do_main</span><span class="params">(Matrix a,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    	Matrix r;</span><br><span class="line">    	<span class="built_in">memset</span>(r.arr,<span class="number">0</span>,<span class="keyword">sizeof</span>(a.arr));</span><br><span class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">        	r.arr[i][j]=(i==j);</span><br><span class="line">		&#125;</span><br><span class="line">		Matrix base=a;</span><br><span class="line">    	<span class="keyword">while</span>(k)&#123;</span><br><span class="line">        	<span class="keyword">if</span>(k&amp;<span class="number">1</span>)r=r*base;</span><br><span class="line">        	base=base*base;</span><br><span class="line">        	k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Topo Sort</span></span><br><span class="line"><span class="keyword">namespace</span> Topo_Sort&#123;</span><br><span class="line">	<span class="keyword">int</span> degree[maxn];</span><br><span class="line">	<span class="keyword">int</span> topo[maxn],num=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!degree[i])q.push(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">			<span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">			topo[++num]=u;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">				<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">				<span class="keyword">if</span>(--degree[v]==<span class="number">0</span>)q.push(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(num!=n)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tree-Chain Division</span></span><br><span class="line"><span class="keyword">namespace</span> Tree_Chain_Division&#123;</span><br><span class="line">	<span class="keyword">int</span> size[maxn],f[maxn],dep[maxn],son[maxn],top[maxn],id[maxn],real[maxn],val[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DFS_1</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">	    size[u]=<span class="number">1</span>;</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].next)&#123;</span><br><span class="line">	        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">	        <span class="keyword">if</span>(v!=f[u])&#123;</span><br><span class="line">	    	    f[v]=u;</span><br><span class="line">	    	    dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">	    	    DFS_1(v);</span><br><span class="line">	    	    size[u]+=size[v];</span><br><span class="line">	    	    <span class="keyword">if</span>(size[v]&gt;=size[son[u]])son[u]=v;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DFS_2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line">	    top[u]=tp;</span><br><span class="line">	    id[u]=++numn;</span><br><span class="line">	    real[numn]=u;</span><br><span class="line">	    <span class="keyword">if</span>(son[u])DFS_2(son[u],tp);</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].next)&#123;</span><br><span class="line">	        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">	        <span class="keyword">if</span>(v!=f[u]&amp;&amp;v!=son[u])DFS_2(v,v);</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Node:</span></span><br><span class="line"><span class="comment">	Segment_Tree:</span></span><br><span class="line"><span class="comment">		void build(int k1,int l,int r)&#123;</span></span><br><span class="line"><span class="comment">		    //......</span></span><br><span class="line"><span class="comment">				t[k1].sum=val[real[l]];</span></span><br><span class="line"><span class="comment">		    //......</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_road</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	    <span class="keyword">int</span> tp1=top[u],tp2=top[v];</span><br><span class="line">	    <span class="keyword">while</span>(tp1!=tp2)&#123;</span><br><span class="line">	        <span class="keyword">if</span>(dep[tp1]&lt;dep[tp2])swap(tp1,tp2),swap(u,v);</span><br><span class="line">	        Segment_Tree::change_interval(<span class="number">1</span>,id[tp1],id[u],x);</span><br><span class="line">	        u=f[tp1];</span><br><span class="line">	        tp1=top[u];</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">if</span>(dep[u]&gt;dep[v])swap(u,v);</span><br><span class="line">	    Segment_Tree::change_interval(<span class="number">1</span>,id[u],id[v],x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query_road</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	    LL sum=<span class="number">0</span>;</span><br><span class="line">	    <span class="keyword">int</span> tp1=top[u],tp2=top[v];</span><br><span class="line">	    <span class="keyword">while</span>(tp1!=tp2)&#123;</span><br><span class="line">	        <span class="keyword">if</span>(dep[tp1]&lt;dep[tp2])swap(tp1,tp2),swap(u,v);</span><br><span class="line">	        sum+=Segment_Tree::query(<span class="number">1</span>,id[tp1],id[u]);</span><br><span class="line">	        u=f[tp1];</span><br><span class="line">	        tp1=top[u];</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">if</span>(dep[u]&gt;dep[v])swap(u,v);</span><br><span class="line">	    sum+=Segment_Tree::query(<span class="number">1</span>,id[u],id[v]);</span><br><span class="line">	    <span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change_root</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	   	<span class="keyword">int</span> begin=id[now];</span><br><span class="line">	    <span class="keyword">int</span> end=id[now]+size[now]<span class="number">-1</span>;</span><br><span class="line">	    Segment_Tree::change_interval(<span class="number">1</span>,begin,end,x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">query_root</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line">	    <span class="keyword">int</span> begin=id[now];</span><br><span class="line">	    <span class="keyword">int</span> end=id[now]+size[now]<span class="number">-1</span>;</span><br><span class="line">	    <span class="keyword">return</span> Segment_Tree::query(<span class="number">1</span>,begin,end);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Binary Indexed Tree</span></span><br><span class="line"><span class="keyword">namespace</span> Binary_Indexed_Tree&#123;</span><br><span class="line">	<span class="keyword">int</span> c[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;x&lt;=n;x+=x&amp;-x)c[x]+=k;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(;x;x-=x&amp;-x)res+=c[x];</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(;x&lt;=n;x+=x&amp;-x)c[x]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Gcd</span></span><br><span class="line"><span class="keyword">namespace</span> Gcd&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> y?gcd(y,x%y):x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Exgcd</span></span><br><span class="line"><span class="keyword">namespace</span> Exgcd&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!b)x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			exgcd(b,a%b,y,x);</span><br><span class="line">			y-=(a/b)*x;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Sieve of Euler</span></span><br><span class="line"><span class="keyword">namespace</span> Sieve_of_Euler&#123;</span><br><span class="line">	<span class="keyword">int</span> nump=<span class="number">0</span>,prime[maxn];</span><br><span class="line">	<span class="keyword">bool</span> is_prime[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">memset</span>(is_prime,<span class="number">1</span>,<span class="keyword">sizeof</span>(is_prime));</span><br><span class="line">		is_prime[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(is_prime[i])prime[++nump]=i;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=nump&amp;&amp;prime[j]*i&lt;maxn;j++)&#123;</span><br><span class="line">				is_prime[i*prime[j]]=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Euler's totient function</span></span><br><span class="line"><span class="keyword">namespace</span> Euler_totient_function&#123;</span><br><span class="line">	<span class="keyword">int</span> euler[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++)euler[i]=i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(euler[i]==i)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;maxn;j+=i)&#123;</span><br><span class="line">					euler[j]=euler[j]/i*(i<span class="number">-1</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Euler</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> res=x;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=x;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(x%i==<span class="number">0</span>)&#123;</span><br><span class="line">				res=res/i*(i<span class="number">-1</span>);</span><br><span class="line">				<span class="keyword">while</span>(x%i==<span class="number">0</span>)x/=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">1</span>)res=res/i*(i<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LCA</span></span><br><span class="line"><span class="keyword">namespace</span> LCA&#123;</span><br><span class="line">	<span class="keyword">int</span> dep[maxn],f[maxn][<span class="number">22</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">			<span class="keyword">if</span>(v!=f[u][<span class="number">0</span>])&#123;</span><br><span class="line">				f[v][<span class="number">0</span>]=u;</span><br><span class="line">				dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">				dfs(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">				f[i][j]=f[f[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[a]&lt;dep[b])swap(a,b);</span><br><span class="line">		<span class="keyword">int</span> dif=dep[a]-dep[b];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=dif;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;dif)a=f[a][i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a!=b)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=(<span class="keyword">int</span>)log2(n);i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(f[a][i]!=f[b][i])&#123;</span><br><span class="line">					a=f[a][i];b=f[b][i];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			a=f[a][<span class="number">0</span>];b=f[b][<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dinic</span></span><br><span class="line"><span class="keyword">namespace</span> Dinic&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Note:</span></span><br><span class="line"><span class="comment">	memset(last,-1,sizeof(last));</span></span><br><span class="line"><span class="comment">	nume从0开始 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	<span class="keyword">int</span> dep[maxn],pre[maxn],q[maxn*maxn];</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> head=<span class="number">1</span>,tail=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">		dep[s]=<span class="number">1</span>;</span><br><span class="line">		q[++tail]=s;</span><br><span class="line">		<span class="keyword">while</span>(head&lt;=tail)&#123;</span><br><span class="line">			<span class="keyword">int</span> u=q[head++];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];~i;i=e[i].nxt)&#123;</span><br><span class="line">				<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">				<span class="keyword">if</span>(!dep[v]&amp;&amp;e[i].f)&#123;</span><br><span class="line">					dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">					q[++tail]=v;</span><br><span class="line">					<span class="keyword">if</span>(v==t)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> t,<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(u==t)<span class="keyword">return</span> cur;</span><br><span class="line">		<span class="keyword">int</span> rest=cur;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=pre[u];~i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">			<span class="keyword">if</span>(dep[v]==dep[u]+<span class="number">1</span>&amp;&amp;e[i].f&amp;&amp;rest)&#123;</span><br><span class="line">				<span class="keyword">int</span> new_flow=dfs(v,t,min(e[i].f,rest));</span><br><span class="line">				rest-=new_flow;</span><br><span class="line">				e[i].f-=new_flow;</span><br><span class="line">				e[i^<span class="number">1</span>].f+=new_flow;</span><br><span class="line">				<span class="keyword">if</span>(!rest)<span class="keyword">return</span> cur;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cur-rest;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(bfs(s,t))&#123;</span><br><span class="line">			<span class="built_in">memcpy</span>(pre,last,<span class="keyword">sizeof</span>(last));</span><br><span class="line">			ans+=dfs(s,t,INF);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Hungarian</span></span><br><span class="line"><span class="keyword">namespace</span> Hungarian&#123;</span><br><span class="line">	<span class="keyword">int</span> result[maxn];</span><br><span class="line">	<span class="keyword">bool</span> vis[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">			<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">				vis[v]=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(!result[v]||dfs(result[v]))&#123;</span><br><span class="line">					result[v]=u;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">			<span class="keyword">if</span>(dfs(i))cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cnt;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tarjan</span></span><br><span class="line"><span class="keyword">namespace</span> Tarjan&#123;</span><br><span class="line">	<span class="keyword">int</span> dfn[maxn],low[maxn];</span><br><span class="line">	<span class="keyword">int</span> sta[maxn],top;</span><br><span class="line">	<span class="keyword">int</span> dfnnum=<span class="number">0</span>,colnum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">bool</span> vis[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">		dfn[u]=low[u]=++dfnnum;</span><br><span class="line">		vis[u]=<span class="number">1</span>;</span><br><span class="line">		sta[++top]=u;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">			<span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line">				do_main(v);</span><br><span class="line">				low[u]=min(low[u],low[v]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(vis[v])low[u]=min(low[u],dfn[v]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(dfn[u]==low[u])&#123;</span><br><span class="line">			colnum++;</span><br><span class="line">			<span class="keyword">while</span>(sta[top]!=u)&#123;</span><br><span class="line">				color[sta[top]]=colnum;</span><br><span class="line">				vis[sta[top]]=<span class="number">0</span>;</span><br><span class="line">				val[colnum]+=a[sta[top--]];</span><br><span class="line">			&#125;</span><br><span class="line">			color[sta[top]]=colnum;</span><br><span class="line">			vis[sta[top]]=<span class="number">0</span>;</span><br><span class="line">			val[colnum]+=a[sta[top--]];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ST</span></span><br><span class="line"><span class="keyword">namespace</span> ST&#123;</span><br><span class="line">	<span class="keyword">int</span> st[maxn][<span class="number">20</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">				st[i][j]=max(st[i][j<span class="number">-1</span>],st[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query_max</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> k=log2(r-l+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> max(st[l][k],st[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Functional Treap</span></span><br><span class="line"><span class="keyword">namespace</span> Functional_Treap&#123;</span><br><span class="line">	<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> l,r,key,val,size;</span><br><span class="line">	&#125;t[maxn];</span><br><span class="line">	<span class="keyword">int</span> root,num=<span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		t[x].size=t[t[x].l].size+t[t[x].r].size+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> r1,<span class="keyword">int</span> r2)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!r1||!r2)<span class="keyword">return</span> r1+r2;</span><br><span class="line">		<span class="keyword">if</span>(t[r1].key&lt;t[r2].key)&#123;</span><br><span class="line">			<span class="keyword">return</span> t[r1].r=merge(t[r1].r,r2),update(r1),r1;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> t[r2].l=merge(r1,t[r2].l),update(r2),r2;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">pii <span class="title">split</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!k)<span class="keyword">return</span> mp(<span class="number">0</span>,rt);</span><br><span class="line">		<span class="keyword">int</span> l=t[rt].l,r=t[rt].r;</span><br><span class="line">		<span class="keyword">if</span>(k==t[l].size)<span class="keyword">return</span> t[rt].l=<span class="number">0</span>,update(rt),mp(l,rt);</span><br><span class="line">		<span class="keyword">if</span>(k==t[l].size+<span class="number">1</span>)<span class="keyword">return</span> t[rt].r=<span class="number">0</span>,update(rt),mp(rt,r);</span><br><span class="line">		<span class="keyword">if</span>(k&lt;t[l].size)&#123;</span><br><span class="line">			pii tmp=split(l,k);</span><br><span class="line">			<span class="keyword">return</span> t[rt].l=tmp.second,update(rt),mp(tmp.first,rt);</span><br><span class="line">		&#125;</span><br><span class="line">		pii tmp=split(r,k-t[l].size<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">return</span> t[rt].r=tmp.first,update(rt),mp(rt,tmp.second);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>,tmp=INF;</span><br><span class="line">		<span class="keyword">while</span>(k)&#123;</span><br><span class="line">			<span class="keyword">if</span>(x==t[k].val)tmp=min(tmp,ans+t[t[k].l].size+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span>(x&gt;t[k].val)ans+=t[t[k].l].size+<span class="number">1</span>,k=t[k].r;</span><br><span class="line">			<span class="keyword">else</span> k=t[k].l;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> tmp==INF?ans:tmp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    	    <span class="keyword">if</span>(t[t[k].l].size==x<span class="number">-1</span>)<span class="keyword">return</span> t[k].val;</span><br><span class="line">    	    <span class="keyword">if</span>(t[t[k].l].size&gt;x<span class="number">-1</span>)k=t[k].l;</span><br><span class="line">    	    <span class="keyword">else</span> x=x-t[t[k].l].size<span class="number">-1</span>,k=t[k].r;</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	    <span class="keyword">int</span> ans=-INF;</span><br><span class="line">	    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">	        <span class="keyword">if</span>(t[k].val&lt;x)ans=max(ans,t[k].val),k=t[k].r;</span><br><span class="line">	        <span class="keyword">else</span> k=t[k].l;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">neg</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	    <span class="keyword">int</span> ans=INF;</span><br><span class="line">	    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">	        <span class="keyword">if</span>(t[k].val&gt;x)ans=min(ans,t[k].val),k=t[k].l;</span><br><span class="line">	        <span class="keyword">else</span> k=t[k].r;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> k=rank(x,root);</span><br><span class="line">		pii tmp=split(root,k);</span><br><span class="line">		t[++num].val=x;</span><br><span class="line">		t[num].key=rand();</span><br><span class="line">		t[num].size=<span class="number">1</span>;</span><br><span class="line">		root=merge(tmp.first,num);</span><br><span class="line">		root=merge(root,tmp.second);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> k=rank(x,root);</span><br><span class="line">		pii t1=split(root,k);</span><br><span class="line">		pii t2=split(t1.first,k<span class="number">-1</span>);</span><br><span class="line">		root=merge(t2.first,t1.second);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CDQ</span></span><br><span class="line"><span class="keyword">namespace</span> CDQ&#123;</span><br><span class="line">	Operator tmp[maxq];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">(Operator arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		do_main(arr,l,mid);</span><br><span class="line">		sort(arr+l,arr+mid+<span class="number">1</span>,cmp1);sort(arr+mid+<span class="number">1</span>,arr+r+<span class="number">1</span>,cmp2);<span class="comment">//Sort according to the partical order</span></span><br><span class="line">		<span class="keyword">int</span> x=l;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> y=mid+<span class="number">1</span>;y&lt;=r;y++)&#123;</span><br><span class="line">			<span class="keyword">while</span>(x&lt;=mid&amp;&amp;arr[x]&lt;arr[y])&#123;<span class="keyword">if</span>(<span class="comment">/*arr[x] is a modify operation*/</span>)<span class="comment">/*Change it*/</span>;x++;&#125;</span><br><span class="line">			<span class="keyword">if</span>(<span class="comment">/*arr[y] is a query operation*/</span>)<span class="comment">/*Calculate the value*/</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=mid;i++)<span class="keyword">if</span>(<span class="comment">/*arr[i] is a modify operation*/</span>)<span class="comment">/*Delete it*/</span>;</span><br><span class="line">		sort(arr+mid+<span class="number">1</span>,arr+r+<span class="number">1</span>,cmp3);<span class="comment">//Sort according to the partical order</span></span><br><span class="line">		do_main(arr,mid+<span class="number">1</span>,r);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Eulerian Path</span></span><br><span class="line"><span class="keyword">namespace</span> Eulerian_Path&#123;</span><br><span class="line">	<span class="keyword">int</span> q[maxm&lt;&lt;<span class="number">1</span>],top=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">bool</span> vis[maxm&lt;&lt;<span class="number">1</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=last[u];~i;i=e[i].nxt)&#123;</span><br><span class="line">    		<span class="keyword">while</span>(~i&amp;&amp;vis[i|<span class="number">1</span>])i=e[i].nxt;</span><br><span class="line">    		<span class="keyword">if</span>(~i)&#123;</span><br><span class="line">				vis[i|<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">				dfs(e[i].v);</span><br><span class="line">				q[++top]=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Suffix Array</span></span><br><span class="line"><span class="keyword">namespace</span> Suffix_Array&#123;</span><br><span class="line">	<span class="keyword">int</span> cntA[<span class="number">300</span>],cntB[<span class="number">300</span>],sa[maxn],tsa[maxn],rank[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">memset</span>(cntA,<span class="number">0</span>,<span class="keyword">sizeof</span>(cntA));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cntA[ch[i]]++;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">256</span>;i++)cntA[i]+=cntA[i<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)sa[cntA[ch[i]]--]=i;</span><br><span class="line">		rank[sa[<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			rank[sa[i]]=rank[sa[i<span class="number">-1</span>]];</span><br><span class="line">			<span class="keyword">if</span>(ch[sa[i]]!=ch[sa[i<span class="number">-1</span>]])rank[sa[i]]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;rank[sa[n]]&lt;n;l&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">memset</span>(cntA,<span class="number">0</span>,<span class="keyword">sizeof</span>(cntA));</span><br><span class="line">			<span class="built_in">memset</span>(cntB,<span class="number">0</span>,<span class="keyword">sizeof</span>(cntB));</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">				cntA[A[i]=rank[i]]++;</span><br><span class="line">				cntB[B[i]=(i+l&lt;=n)?rank[i+l]:<span class="number">0</span>]++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cntA[i]+=cntA[i<span class="number">-1</span>],cntB[i]+=cntB[i<span class="number">-1</span>];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)tsa[cntB[B[i]]--]=i;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)sa[cntA[A[tsa[i]]]--]=tsa[i];</span><br><span class="line">			rank[sa[<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">				rank[sa[i]]=rank[sa[i<span class="number">-1</span>]];</span><br><span class="line">				<span class="keyword">if</span>(A[sa[i]!=A[sa[i<span class="number">-1</span>]]]||B[sa[i]!=B[sa[i<span class="number">-1</span>]]])rank[sa[i]]++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j)j--;</span><br><span class="line">			<span class="keyword">while</span>(ch[i+j]==ch[sa[rank[i]<span class="number">-1</span>]+j)j++;</span><br><span class="line">			height[rank[i]]=j;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Gauss Elimination</span></span><br><span class="line"><span class="keyword">namespace</span> Gauss_Elimination&#123;</span><br><span class="line">	<span class="keyword">typedef</span> <span class="keyword">double</span> Matrix[maxn][maxn];</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">do_main</span><span class="params">(Matrix A,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> r=i;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">fabs</span>(A[j][i])&gt;<span class="built_in">fabs</span>(A[r][i]))r=j;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">fabs</span>(A[r][i])&lt;eps)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(r!=i)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)swap(A[r][j],A[i][j]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=i+<span class="number">1</span>;k&lt;n;k++)&#123;</span><br><span class="line">				<span class="keyword">double</span> f=A[k][i]/A[i][i];</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)A[k][j]-=f*A[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">				A[i][n]-=A[j][n]*A[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">			A[i][n]/=A[i][i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Splay </span></span><br><span class="line"><span class="keyword">namespace</span> Splay&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> ch[<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">int</span> f,key,size,cnt,flip;</span><br><span class="line">	&#125;t[maxn];</span><br><span class="line">	<span class="keyword">int</span> sz,root;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> t[t[x].f].ch[<span class="number">1</span>]==x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		t[x].size=t[x].cnt+t[t[x].ch[<span class="number">0</span>]].size+t[t[x].ch[<span class="number">1</span>]].size;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(t[x].flip)&#123;</span><br><span class="line">			t[x].flip^=<span class="number">1</span>;t[t[x].ch[<span class="number">0</span>]].flip^=<span class="number">1</span>;t[t[x].ch[<span class="number">1</span>]].flip^=<span class="number">1</span>;</span><br><span class="line">			swap(t[x].ch[<span class="number">0</span>],t[x].ch[<span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> f=t[x].f,ff=t[f].f;</span><br><span class="line">		<span class="keyword">bool</span> posx=judge(x),posf=judge(f);</span><br><span class="line">		t[t[x].ch[posx^<span class="number">1</span>]].f=f;t[f].ch[posx]=t[x].ch[posx^<span class="number">1</span>];</span><br><span class="line">		t[f].f=x;t[x].ch[posx^<span class="number">1</span>]=f;</span><br><span class="line">		t[x].f=ff;<span class="keyword">if</span>(ff)t[ff].ch[posf]=x;</span><br><span class="line">		update(f);update(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> &amp;tar)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp=t[tar].f;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i;(i=t[x].f)!=tmp;rotate(x))&#123;</span><br><span class="line">			<span class="keyword">if</span>(t[i].f!=tmp)rotate(judge(x)==judge(i)?i:x);</span><br><span class="line">		&#125;</span><br><span class="line">		tar=x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> f,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">		t[x].f=f;t[x].key=key;t[x].cnt=t[x].size=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!root)&#123;reset(++sz,<span class="number">0</span>,x);root=sz;<span class="keyword">return</span>;&#125;</span><br><span class="line">		<span class="keyword">int</span> now=root,f=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(x==t[now].key)&#123;t[now].cnt++;update(now);splay(now,root);<span class="keyword">return</span>;&#125;</span><br><span class="line">			f=now;now=t[now].ch[t[now].key&lt;x];</span><br><span class="line">			<span class="keyword">if</span>(!now)&#123;</span><br><span class="line">				reset(++sz,f,x);</span><br><span class="line">				t[f].ch[t[f].key&lt;x]=sz;</span><br><span class="line">				splay(sz,root);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> now=rt,res=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(now)&#123;</span><br><span class="line">			pushdown(now);</span><br><span class="line">			<span class="keyword">if</span>(x==t[now].key)&#123;res+=t[t[now].ch[<span class="number">0</span>]].size;splay(now,rt);<span class="keyword">return</span> res;&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(x&gt;t[now].key)res+=t[now].size-t[t[now].ch[<span class="number">1</span>]].size,now=t[now].ch[<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">else</span> now=t[now].ch[<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> now=rt,cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(now)&#123;</span><br><span class="line">			pushdown(now);</span><br><span class="line">			<span class="keyword">if</span>(cnt+t[now].size-t[t[now].ch[<span class="number">1</span>]].size&gt;=x&amp;&amp;cnt+t[t[now].ch[<span class="number">0</span>]].size&lt;x)<span class="keyword">return</span> splay(now,rt),t[now].key;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(cnt+t[now].size-t[t[now].ch[<span class="number">1</span>]].size&lt;x)cnt+=t[now].size-t[t[now].ch[<span class="number">1</span>]].size,now=t[now].ch[<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">else</span> now=t[now].ch[<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> splay(now,rt),t[now].key;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!left||!right)<span class="keyword">return</span> left|right;</span><br><span class="line">		find(left,t[left].size);</span><br><span class="line">		t[left].ch[<span class="number">1</span>]=right;</span><br><span class="line">		t[right].f=left;</span><br><span class="line">		update(left);</span><br><span class="line">		<span class="keyword">return</span> left;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">pii <span class="title">split</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!k)<span class="keyword">return</span> mp(<span class="number">0</span>,rt);</span><br><span class="line">		find(rt,k);</span><br><span class="line">		<span class="keyword">int</span> left=rt,right=t[rt].ch[<span class="number">1</span>];</span><br><span class="line">		t[left].ch[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		t[right].f=<span class="number">0</span>;</span><br><span class="line">		update(left);</span><br><span class="line">		<span class="keyword">return</span> mp(left,right);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> k=rank(root,x);</span><br><span class="line">		pii t1=split(root,k);</span><br><span class="line">		pii t2=split(t1.first,k<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">if</span>(!(--t[t2.second].cnt))root=merge(t2.first,t1.second);</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			root=merge(t2.first,t2.second);</span><br><span class="line">			root=merge(root,t1.second);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=-INF,now=root;</span><br><span class="line">        <span class="keyword">while</span>(now)&#123;</span><br><span class="line">        	pushdown(now);</span><br><span class="line">            <span class="keyword">if</span>(t[now].key&lt;x)res=max(res,t[now].key),now=t[now].ch[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> now=t[now].ch[<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">neg</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=INF,now=root;</span><br><span class="line">        <span class="keyword">while</span>(now)&#123;</span><br><span class="line">        	pushdown(now);</span><br><span class="line">            <span class="keyword">if</span>(t[now].key&gt;x)res=min(res,t[now].key),now=t[now].ch[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> now=t[now].ch[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		pii p1=split(root,l<span class="number">-1</span>);</span><br><span class="line">		pii p2=split(p1.second,r-l+<span class="number">1</span>);</span><br><span class="line">		t[p2.first].flip^=<span class="number">1</span>;</span><br><span class="line">		root=merge(p2.first,p2.second);</span><br><span class="line">		root=merge(p1.first,root);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Simulate Anneal</span></span><br><span class="line"><span class="keyword">namespace</span> Simulate_Anneal&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">accept</span><span class="params">(<span class="keyword">double</span> delta,<span class="keyword">double</span> temper)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(delta&gt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> rand()&lt;<span class="built_in">exp</span>(delta/temper)*RAND_MAX;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">double</span> t=<span class="number">10000</span>,del=<span class="number">0.999</span>;</span><br><span class="line">		plan;</span><br><span class="line">		<span class="keyword">while</span>(t&gt;eps)&#123;</span><br><span class="line">			newplan;</span><br><span class="line">			<span class="keyword">if</span>(accept(newplan-plan,t))plan=newplan;</span><br><span class="line">			t*=del;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> plan;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">do_main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		srand(<span class="number">20010817</span>);</span><br><span class="line">		<span class="keyword">int</span> res=INF;</span><br><span class="line">		<span class="keyword">int</span> T=<span class="number">100</span>;</span><br><span class="line">		<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">			res=min(res,solve());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MFMC</span></span><br><span class="line"><span class="keyword">namespace</span> MFMC&#123;</span><br><span class="line">	<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line">	<span class="keyword">int</span> q[maxn*maxn],pe[maxn],pv[maxn],dis[maxn];</span><br><span class="line">	<span class="keyword">bool</span> vis[maxn];</span><br><span class="line">	<span class="keyword">namespace</span> SPFA&#123;</span><br><span class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">			<span class="keyword">int</span> head=<span class="number">1</span>,tail=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">			<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));	</span><br><span class="line">			dis[s]=<span class="number">0</span>;</span><br><span class="line">			vis[s]=<span class="number">1</span>;</span><br><span class="line">			q[++tail]=s;</span><br><span class="line">			<span class="keyword">while</span>(head&lt;=tail)&#123;</span><br><span class="line">				<span class="keyword">int</span> u=q[head++];</span><br><span class="line">				vis[u]=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=last[u];~i;i=e[i].nxt)&#123;</span><br><span class="line">					<span class="keyword">int</span> v=e[i].v;</span><br><span class="line">					<span class="keyword">if</span>(e[i].f&amp;&amp;dis[v]&gt;dis[u]+e[i].c)&#123;</span><br><span class="line">						dis[v]=dis[u]+e[i].c;</span><br><span class="line">						pe[v]=i,pv[v]=u;</span><br><span class="line">						<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">							vis[v]=<span class="number">1</span>;</span><br><span class="line">							q[++tail]=v;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> dis[t]&lt;INF;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">pii <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> cost=<span class="number">0</span>,flow=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(SPFA::do_main(s,t))&#123;</span><br><span class="line">			<span class="keyword">int</span> new_flow=INF;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=t;i!=s;i=pv[i])new_flow=min(new_flow,e[pe[i]].f);</span><br><span class="line">			cost+=new_flow*dis[t];</span><br><span class="line">			flow+=new_flow;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=t;i!=s;i=pv[i])e[pe[i]].f-=new_flow,e[pe[i]^<span class="number">1</span>].f+=new_flow;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> pii(cost,flow);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Link-Cut Tree</span></span><br><span class="line"><span class="keyword">namespace</span> LCT&#123;</span><br><span class="line">	<span class="keyword">namespace</span> Splay&#123;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">			<span class="keyword">int</span> ch[<span class="number">2</span>];</span><br><span class="line">			<span class="keyword">int</span> f,key,size;</span><br><span class="line">			<span class="keyword">bool</span> rev;</span><br><span class="line">			Node()&#123;f=key=rev=size=<span class="number">0</span>;&#125;</span><br><span class="line">		&#125;t[maxn];</span><br><span class="line">		<span class="keyword">int</span> sz,root;</span><br><span class="line">		<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">			<span class="keyword">return</span> t[t[x].f].ch[<span class="number">1</span>]==x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">			t[x].size=<span class="number">1</span>+t[t[x].ch[<span class="number">0</span>]].size+t[t[x].ch[<span class="number">1</span>]].size;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(t[x].rev)&#123;</span><br><span class="line">				t[x].rev^=<span class="number">1</span>;t[t[x].ch[<span class="number">0</span>]].rev^=<span class="number">1</span>;t[t[x].ch[<span class="number">1</span>]].rev^=<span class="number">1</span>;</span><br><span class="line">				swap(t[x].ch[<span class="number">0</span>],t[x].ch[<span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">			<span class="keyword">return</span> t[t[x].f].ch[<span class="number">0</span>]!=x&amp;&amp;t[t[x].f].ch[<span class="number">1</span>]!=x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">			<span class="keyword">int</span> f=t[x].f,ff=t[f].f;</span><br><span class="line">			<span class="keyword">bool</span> posx=judge(x),posf=judge(f);</span><br><span class="line">			t[x].f=ff;<span class="keyword">if</span>(!is_root(f))t[ff].ch[posf]=x;</span><br><span class="line">			t[t[x].ch[posx^<span class="number">1</span>]].f=f;t[f].ch[posx]=t[x].ch[posx^<span class="number">1</span>];</span><br><span class="line">			t[f].f=x;t[x].ch[posx^<span class="number">1</span>]=f;</span><br><span class="line">			update(f);update(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> sta[maxn];</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">			<span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">			sta[++top]=x;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=x;!is_root(i);i=t[i].f)sta[++top]=t[i].f;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=top;i;i--)pushdown(sta[i]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i;!is_root(x);rotate(x))&#123;</span><br><span class="line">				<span class="keyword">if</span>(!is_root(i=t[x].f))rotate(judge(x)==judge(i)?i:x);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> Splay;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(x)&#123;</span><br><span class="line">			splay(x);</span><br><span class="line">			t[x].ch[<span class="number">1</span>]=tmp;</span><br><span class="line">			tmp=x;x=t[x].f;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">mroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		access(x);</span><br><span class="line">		splay(x);</span><br><span class="line">		t[x].rev^=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">		mroot(x);</span><br><span class="line">		t[x].f=y;</span><br><span class="line">		splay(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">		mroot(x);</span><br><span class="line">		access(y);</span><br><span class="line">		splay(y);</span><br><span class="line">		t[y].ch[<span class="number">0</span>]=t[x].f=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Baby Steps Giant Steps</span></span><br><span class="line"><span class="keyword">namespace</span> BSGS&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> Quick_pow;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;mp;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(a%p==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		mp.clear();</span><br><span class="line">		<span class="keyword">int</span> m=<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(p));</span><br><span class="line">		<span class="keyword">int</span> am=Quick_Pow::do_main(a,m);</span><br><span class="line">		<span class="keyword">int</span> baj=b%p;</span><br><span class="line">		mp[baj]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">			baj=baj*a%p;</span><br><span class="line">			mp[baj]=j;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ami=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">			ami=ami*am%p;</span><br><span class="line">			<span class="keyword">if</span>(mp.count(ami))<span class="keyword">return</span> i*m-mp[ami];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Minimum Coverage Circle</span></span><br><span class="line"><span class="keyword">namespace</span> MCC&#123;</span><br><span class="line">	<span class="function">Point <span class="title">GetLineIntersection</span><span class="params">(Line l1,Line l2)</span></span>&#123;<span class="keyword">return</span> l1.p+l1.v*(Cross(l2.v,l1.p-l2.p)/Cross(l1.v,l2.v));&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">In_Circle</span><span class="params">(Point p,Circle c)</span></span>&#123;<span class="keyword">return</span> dcmp(Len(p-c.o)-c.r)&lt;<span class="number">0</span>;&#125;</span><br><span class="line">	<span class="function">Circle <span class="title">Cir</span><span class="params">(Point a)</span></span>&#123;Circle C;C.o=a,C.r=<span class="number">0</span>;<span class="keyword">return</span> C;&#125;</span><br><span class="line">	<span class="function">Circle <span class="title">Cir</span><span class="params">(Point a,Point b)</span></span>&#123;Circle C;C.o=(a+b)/<span class="number">2</span>,C.r=Len(C.o-a);<span class="keyword">return</span> C;&#125;</span><br><span class="line">	<span class="function">Circle <span class="title">Cir</span><span class="params">(Point a,Point b,Point c)</span></span>&#123;</span><br><span class="line">		Circle C;</span><br><span class="line">		Line l1=(Line)&#123;(a+b)/<span class="number">2</span>,Normal(a-b)&#125;,l2=(Line)&#123;(b+c)/<span class="number">2</span>,Normal(b-c)&#125;;</span><br><span class="line">		C.o=GetLineIntersection(l1,l2);</span><br><span class="line">		C.r=Len(C.o-a);</span><br><span class="line">		<span class="keyword">return</span> C;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Circle <span class="title">do_main</span><span class="params">(Point *P,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		random_shuffle(P+<span class="number">1</span>,P+n+<span class="number">1</span>);</span><br><span class="line">		Circle c;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!In_Circle(P[i],c))&#123;</span><br><span class="line">				c=Cir(P[i]);</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">					<span class="keyword">if</span>(!In_Circle(P[j],c))&#123;</span><br><span class="line">						c=Cir(P[i],P[j]);</span><br><span class="line">						<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;j;k++)&#123;</span><br><span class="line">							<span class="keyword">if</span>(!In_Circle(P[k],c))&#123;</span><br><span class="line">								<span class="keyword">if</span>(dcmp(Cross(P[i]-P[j],P[i]-P[k])))c=Cir(P[i],P[j],P[k]);</span><br><span class="line">								<span class="keyword">else</span> <span class="keyword">if</span>(dcmp(Len(P[i]-P[k])-Len(P[j]-P[k]))&gt;<span class="number">0</span>)c=Cir(P[i],P[k]);</span><br><span class="line">								<span class="keyword">else</span> c=Cir(P[j],P[k]);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> c;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Minimum Representation</span></span><br><span class="line"><span class="keyword">namespace</span> MR&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">do_main</span><span class="params">(<span class="keyword">char</span>* s)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i,j,k;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>,j=<span class="number">2</span>,k=<span class="number">0</span>;i&lt;=n&amp;&amp;j&lt;=n&amp;&amp;k&lt;=n;)&#123;</span><br><span class="line">			<span class="keyword">int</span> dif=s[i+k]-s[j+k];</span><br><span class="line">			<span class="keyword">if</span>(!dif)k++;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(dif&gt;<span class="number">0</span>)i=max(i+k+<span class="number">1</span>,j+<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">else</span> j=max(j+k+<span class="number">1</span>,i+<span class="number">1</span>);</span><br><span class="line">				k=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> min(i,j);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Suffix Automaton</span></span><br><span class="line"><span class="keyword">namespace</span> SAM&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> min,max,trans[sigma_size],slink,endpos;</span><br><span class="line">		LL cnt;</span><br><span class="line">	&#125;t[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">int</span> sz=<span class="number">1</span>,ed=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> degree[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">bool</span> is_pre[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">New_node</span><span class="params">(<span class="keyword">int</span> minlen,<span class="keyword">int</span> maxlen,<span class="keyword">int</span> *trans,<span class="keyword">int</span> slink)</span></span>&#123;</span><br><span class="line">		sz++;</span><br><span class="line">		t[sz].min=minlen,t[sz].max=maxlen,t[sz].slink=slink;</span><br><span class="line">		<span class="keyword">if</span>(trans!=<span class="literal">NULL</span>)<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sigma_size;i++)t[sz].trans[i]=trans[i];</span><br><span class="line">		<span class="keyword">return</span> sz;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> c=ch-<span class="string">'a'</span>;</span><br><span class="line">		<span class="keyword">int</span> z=New_node(<span class="number">-1</span>,t[ed].max+<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">-1</span>);</span><br><span class="line">		is_pre[z]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> v=ed;</span><br><span class="line">		ed=z;</span><br><span class="line">		<span class="keyword">while</span>(v&amp;&amp;!t[v].trans[c])&#123;</span><br><span class="line">			t[v].trans[c]=z;</span><br><span class="line">			v=t[v].slink;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!v)&#123;</span><br><span class="line">			t[z].min=<span class="number">1</span>;</span><br><span class="line">			t[z].slink=<span class="number">1</span>;</span><br><span class="line">			degree[<span class="number">1</span>]++;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> x=t[v].trans[c];</span><br><span class="line">		<span class="keyword">if</span>(t[v].max+<span class="number">1</span>==t[x].max)&#123;</span><br><span class="line">			t[z].min=t[x].max+<span class="number">1</span>;</span><br><span class="line">			t[z].slink=x;</span><br><span class="line">			degree[x]++;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> y=New_node(t[t[x].slink].max+<span class="number">1</span>,t[v].max+<span class="number">1</span>,t[x].trans,t[x].slink);</span><br><span class="line">		t[x].slink=t[z].slink=y;degree[y]+=<span class="number">2</span>;</span><br><span class="line">		t[x].min=t[z].min=t[y].max+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(v&amp;&amp;t[v].trans[c]==x)&#123;</span><br><span class="line">			t[v].trans[c]=y;</span><br><span class="line">			v=t[v].slink;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Topo</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=sz;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!degree[i])q.push(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">			<span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">			<span class="keyword">if</span>(is_pre[u])t[u].cnt++;</span><br><span class="line">			t[t[u].slink].cnt+=t[u].cnt;</span><br><span class="line">			<span class="keyword">if</span>(--degree[t[u].slink]==<span class="number">0</span>)q.push(t[u].slink);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConvexHull</span></span><br><span class="line"><span class="keyword">namespace</span> ConvexHull&#123;</span><br><span class="line">	<span class="function">Polygon <span class="title">do_main</span><span class="params">(Point p[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		sort(p+<span class="number">1</span>,p+n+<span class="number">1</span>);</span><br><span class="line">		Polygon res;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">while</span>(res.num&gt;<span class="number">1</span>&amp;&amp;Cross(res.p[res.num]-res.p[res.num<span class="number">-1</span>],p[i]-res.p[res.num<span class="number">-1</span>])&lt;=<span class="number">0</span>)res.num--;</span><br><span class="line">			res.p[++res.num]=p[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> tmp=res.num;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i;i--)&#123;</span><br><span class="line">			<span class="keyword">while</span>(res.num&gt;tmp&amp;&amp;Cross(res.p[res.num]-res.p[res.num<span class="number">-1</span>],p[i]-res.p[res.num<span class="number">-1</span>])&lt;=<span class="number">0</span>)res.num--;</span><br><span class="line">			res.p[++res.num]=p[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(num&gt;<span class="number">1</span>)res.num--;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Half-plane Intersection</span></span><br><span class="line"><span class="keyword">namespace</span> HPI&#123;</span><br><span class="line">	<span class="function">Polygon <span class="title">do_main</span><span class="params">(Line l[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		sort(l+<span class="number">1</span>,l+n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">1</span>||l[i].ang!=l[i<span class="number">-1</span>].ang)l[++top]=l[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> head=<span class="number">1</span>,tail=<span class="number">0</span>;</span><br><span class="line">		q[++tail]=l[<span class="number">1</span>];q[++tail]=l[<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=top;i++)&#123;</span><br><span class="line">			<span class="keyword">while</span>(head&lt;tail&amp;&amp;OnRight(Intersection(q[tail],q[tail<span class="number">-1</span>]),l[i]))tail--;</span><br><span class="line">			<span class="keyword">while</span>(head&lt;tail&amp;&amp;OnRight(Intersection(q[head],q[head+<span class="number">1</span>]),l[i]))head++;</span><br><span class="line">			q[++tail]=l[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(head&lt;tail&amp;&amp;OnRight(Intersection(q[tail],q[tail<span class="number">-1</span>]),l[head]))tail--;</span><br><span class="line">		<span class="keyword">while</span>(head&lt;tail&amp;&amp;OnRight(Intersection(q[head],q[head+<span class="number">1</span>]),l[tail]))head++;</span><br><span class="line">		Polygon res;</span><br><span class="line">		q[tail+<span class="number">1</span>]=q[head];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=head;i&lt;=tail;i++)res.p[++res.num]=Intersection(q[i],q[i+<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Leftist Tree</span></span><br><span class="line"><span class="keyword">namespace</span> Leftist_Tree&#123;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> ls t[x].ch[0]</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> rs t[x].ch[1]</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> f,val,ch[<span class="number">2</span>],h,size;</span><br><span class="line">	&#125;t[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!x||!y)<span class="keyword">return</span> x+y;</span><br><span class="line">		<span class="keyword">if</span>(t[x].val&lt;t[y].val)swap(x,y);</span><br><span class="line">		rs=Merge(rs,y);</span><br><span class="line">		t[rs].f=x;</span><br><span class="line">		<span class="keyword">if</span>(t[ls].size&lt;t[rs].size)swap(ls,rs);</span><br><span class="line">		t[x].size=t[ls].size+t[rs].size+<span class="number">1</span>;</span><br><span class="line">		t[x].h=t[rs].h+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		t[x].val=<span class="number">0</span>;</span><br><span class="line">		t[ls].f=t[rs].f=<span class="number">0</span>;</span><br><span class="line">		Merge(ls,rs);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
</search>
